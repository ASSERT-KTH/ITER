bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int[]  observations  =  getObservations().toArray(new  int[this.references.size()  ]);  [CE]  cannot  find  symbol  references  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  observations  =  getObservations().toArray(new  int[this.references.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  observations  =  getObservations().toArray(new  int[this.references.size()  ]);	  final    int[]    observations    =    getObservations().toArray(new    int[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  references	106	None	replace
2	[BUG]  [BUGGY]  final  int[]  observations  =  getObservations().toArray(new  int[getReferences().size()  ]);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  observations  =  getObservations().toArray(new  int[getReferences().size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  observations  =  getObservations().toArray(new  int[getReferences().size()  ]);	  final    int[]    observations    =    getObservations().toArray(new    int[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
3	[BUG]  [BUGGY]  final  int[]  observations  =  getObservations().toArray(new  int[parameters.size()  ]);  [CE]  cannot  find  symbol  parameters  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  observations  =  getObservations().toArray(new  int[parameters.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  observations  =  getObservations().toArray(new  int[parameters.size()  ]);	  final    int[]    observations    =    getObservations().toArray(new    int[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  parameters	106	None	replace
4	[BUG]  [BUGGY]  final  double  parameters  =  getParameterTypes();  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  parameters  =  getParameterTypes();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  parameters  =  getParameterTypes();	  final    int    parameters    =    getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
5	[BUG]  [BUGGY]  final  int  parameters  =  getParameterTypes().length;  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  parameters  =  getParameterTypes().length;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  parameters  =  getParameterTypes().length;	  final    int    parameters    =    getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
6	[BUG]  [BUGGY]  final  int  parameters  =  getParameterTypes()  -  1;  [CE]  cannot  find  symbol  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  parameters  =  getParameterTypes()  -  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  parameters  =  getParameterTypes()  -  1;	  final    int    parameters    =    getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
7	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).gauss();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).gauss();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).gauss();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
8	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  parameters).gauss();  [CE]  ')'  expected  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  parameters).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  parameters).gauss();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).gauss();    	non-compiled	[CE]  ')'  expected	88	None	replace
9	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  getObservedPoint()).gauss();  [CE]  ')'  expected  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  getObservedPoint()).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  getObservedPoint()).gauss();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).gauss();    	non-compiled	[CE]  ')'  expected	88	None	replace
10	[BUG]  [BUGGY]  G2.setFont(this.getFunctionStandardFunctions());  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  G2.setFont(this.getFunctionStandardFunctions());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	G2.setFont(this.getFunctionStandardFunctions());	  G2.setFont(getFunctionStandardFunctions());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
11	[BUG]  [BUGGY]  G2.setFont(getStandardFunctions());  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  G2.setFont(getStandardFunctions());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	G2.setFont(getStandardFunctions());	  G2.setFont(getFunctionStandardFunctions());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
12	[BUG]  [BUGGY]  G2.setFont(getFunctionStandardFunctions(),  getObservations());  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  G2.setFont(getFunctionStandardFunctions(),  getObservations());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	G2.setFont(getFunctionStandardFunctions(),  getObservations());	  G2.setFont(getFunctionStandardFunctions());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
13	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations(),  parameters.gauss();  [CE]  ';'  expected  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations(),  parameters.gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations(),  parameters.gauss();	  final    double[]    guess    =    getObservations().gauss();    	non-compiled	[CE]  ';'  expected	1	None	replace
14	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().gauss(),  parameters;  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().gauss(),  parameters;  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().gauss(),  parameters;	  final    double[]    guess    =    getObservations().gauss();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
15	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().gauss(),  parameters);  [CE]  ';'  expected  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().gauss(),  parameters);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().gauss(),  parameters);	  final    double[]    guess    =    getObservations().gauss();    	non-compiled	[CE]  ';'  expected	1	None	replace
16	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  *  1]);  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  *  1]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  *  1]);	  double[]    observations    =    getObservations().toArray(new    double[getObservations().size()    +    1]);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
17	[BUG]  [BUGGY]  final  double[]  parameters  =  getParameterTypes();  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  parameters  =  getParameterTypes();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  parameters  =  getParameterTypes();	  final    int[]    parameters    =    getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
18	[BUG]  [BUGGY]  final  int[]  parameters  =  getParameterTypes().length;  [CE]  cannot  find  symbol  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  parameters  =  getParameterTypes().length;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  parameters  =  getParameterTypes().length;	  final    int[]    parameters    =    getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
19	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[observations.size()  ]);  [CE]  observations  has  private  access  in  CurveFitter  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[observations.size()  ]);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[observations.size()  ]);	  final    double[]    guess    =    getObservations().toArray(new    double[returnValues()    ]);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	104	None	replace
20	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[returnValues()  ],  parameters);  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[returnValues()  ],  parameters);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[returnValues()  ],  parameters);	  final    double[]    guess    =    getObservations().toArray(new    double[returnValues()    ]);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
21	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[observations.length  ]);  [CE]  observations  has  private  access  in  CurveFitter  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[observations.length  ]);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[observations.length  ]);	  final    double[]    guess    =    getObservations().toArray(new    double[returnValues()    ]);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	104	None	replace
22	[BUG]  [BUGGY]  final  double  initialGuess  =  getInitialArguments();  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  initialGuess  =  getInitialArguments();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getInitialArguments();	  final    int    initialGuess    =    getInitialArguments();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
23	[BUG]  [BUGGY]  final  long  initialGuess  =  getInitialArguments();  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  long  initialGuess  =  getInitialArguments();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  long  initialGuess  =  getInitialArguments();	  final    int    initialGuess    =    getInitialArguments();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
24	[BUG]  [BUGGY]  final  int  initialGuess  =  getInitialArguments()  -  1;  [CE]  cannot  find  symbol  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  initialGuess  =  getInitialArguments()  -  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getInitialArguments()  -  1;	  final    int    initialGuess    =    getInitialArguments();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
25	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getReferences().size()  +  1]);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getReferences().size()  +  1]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getReferences().size()  +  1]);	  double[]    observations    =    getObservations().toArray(new    double[getReferences().size()    ]);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
26	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getReferences().length  ]);  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getReferences().length  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getReferences().length  ]);	  double[]    observations    =    getObservations().toArray(new    double[getReferences().size()    ]);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
27	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getReferences().size()  ],  parameters);  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getReferences().size()  ],  parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getReferences().size()  ],  parameters);	  double[]    observations    =    getObservations().toArray(new    double[getReferences().size()    ]);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
28	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters)).computeValues();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters)).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters)).computeValues();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs())).computeValues();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
29	[BUG]  [BUGGY]  G2.setFont(getFallThroughFunctions());  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  G2.setFont(getFallThroughFunctions());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	G2.setFont(getFallThroughFunctions());	  g2.setFont(getFallThroughFunctions());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
30	[BUG]  [BUGGY]  g2.setFont(this.getFallThroughFunctions());  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  g2.setFont(this.getFallThroughFunctions());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	g2.setFont(this.getFallThroughFunctions());	  g2.setFont(getFallThroughFunctions());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
31	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters)).gauss();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters)).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters)).gauss();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs())).gauss();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
32	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(this,  parameters);  [CE]  cannot  find  symbol  parameters  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(this,  parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(this,  parameters);	  double[]    observations    =    getObservations().toArray(this);    	non-compiled	[CE]  cannot  find  symbol  parameters	77	None	replace
33	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(returnValues);  [CE]  cannot  find  symbol  returnValues  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(returnValues);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(returnValues);	  double[]    observations    =    getObservations().toArray(this);    	non-compiled	[CE]  cannot  find  symbol  returnValues	77	None	replace
34	[BUG]  [BUGGY]  final  double  initialGuess  =  getImmediateParameters();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  initialGuess  =  getImmediateParameters();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getImmediateParameters();	  final    double    initialGuess    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
35	[BUG]  [BUGGY]  final  double  initialGuess  =  getInitialValues();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  initialGuess  =  getInitialValues();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getInitialValues();	  final    double    initialGuess    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
36	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  this.parameters.getObservations();  [CE]  cannot  find  symbol  parameters  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  this.parameters.getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  this.parameters.getObservations();	  final    WeightedObservedPoint[]    observations    =    parameters.getObservations();    	non-compiled	[CE]  cannot  find  symbol  parameters	24	None	replace
37	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[compiler.length()  ]);  [CE]  cannot  find  symbol  compiler  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[compiler.length()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[compiler.length()  ]);	  double[]    observations    =    getObservations().toArray(new    double[compiler.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  compiler	64	None	replace
38	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getParameters().size()  ]);  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getParameters().size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getParameters().size()  ]);	  double[]    observations    =    getObservations().toArray(new    double[compiler.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
39	[BUG]  [BUGGY]  final  double  parameters  =  getParameterCount();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  parameters  =  getParameterCount();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  parameters  =  getParameterCount();	  final    int    parameters    =    getParameterCount();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
40	[BUG]  [BUGGY]  final  int  parameters  =  getParameterCount()  -  1;  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  parameters  =  getParameterCount()  -  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  parameters  =  getParameterCount()  -  1;	  final    int    parameters    =    getParameterCount();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
41	[BUG]  [BUGGY]  final  int  parameters  =  getParameterCount()  +  1;  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  parameters  =  getParameterCount()  +  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  parameters  =  getParameterCount()  +  1;	  final    int    parameters    =    getParameterCount();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
42	[BUG]  [BUGGY]  final  int  parameters  =  getParameterCount()  -  2;  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  parameters  =  getParameterCount()  -  2;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  parameters  =  getParameterCount()  -  2;	  final    int    parameters    =    getParameterCount();    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
43	[BUG]  [BUGGY]  final  double[]  parameters  =  getParameters().length;  [CE]  cannot  find  symbol  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  parameters  =  getParameters().length;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  parameters  =  getParameters().length;	  final    int[]    parameters    =    getParameters().length;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
44	[BUG]  [BUGGY]  final  int[]  parameters  =  getParameters(),  parameters.length;  [CE]  ';'  expected  [FE]                          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  parameters  =  getParameters(),  parameters.length;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  parameters  =  getParameters(),  parameters.length;	  final    int[]    parameters    =    getParameters().length;    	non-compiled	[CE]  ';'  expected	7	None	replace
45	[BUG]  [BUGGY]  final  int[]  parameters  =  getParameters().toArray(new  int[parameters.size()  ]);  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  parameters  =  getParameters().toArray(new  int[parameters.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  parameters  =  getParameters().toArray(new  int[parameters.size()  ]);	  final    int[]    parameters    =    getParameters().toArray(parameters);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
46	[BUG]  [BUGGY]  final  int[]  parameters  =  getParameters().toArray(this.parameters);  [CE]  cannot  find  symbol  parameters  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  parameters  =  getParameters().toArray(this.parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  parameters  =  getParameters().toArray(this.parameters);	  final    int[]    parameters    =    getParameters().toArray(parameters);    	non-compiled	[CE]  cannot  find  symbol  parameters	91	None	replace
47	[BUG]  [BUGGY]  final  double[]  parameters  =  getParameters().toArray(parameters);  [CE]  cannot  find  symbol  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  parameters  =  getParameters().toArray(parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  parameters  =  getParameters().toArray(parameters);	  final    int[]    parameters    =    getParameters().toArray(parameters);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
48	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  observations)).guess();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  observations)).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  observations)).guess();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
49	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters));  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters));	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
50	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters),  true);  [CE]  ')'  expected  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters),  true);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters),  true);	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    parameters)).guess();    	non-compiled	[CE]  ')'  expected	21	None	replace
51	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[1]);  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[1]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[1]);	  double[]    observations    =    getObservations().toArray(new    double[0]);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
52	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[2]);  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[2]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[2]);	  double[]    observations    =    getObservations().toArray(new    double[0]);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
53	[BUG]  [BUGGY]  Double[]  observations  =  getObservations().toArray(new  double[0]);  [CE]  cannot  find  symbol  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  Double[]  observations  =  getObservations().toArray(new  double[0]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	Double[]  observations  =  getObservations().toArray(new  double[0]);	  double[]    observations    =    getObservations().toArray(new    double[0]);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
54	[BUG]  [BUGGY]          final    WeightedObservedPoint[]    observations    =    getObservations();    final  WeightedObservedPoint[]  observers  =  getObservations();  final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();  [CE]  variable  observations  is  already  defined  in  method  fit()  [FE]    NotStrictlyPositiveException    [CONTEXT]      public  double[]  fit()  {      [BUGGY]          final    WeightedObservedPoint[]    observations    =    getObservations();    final  WeightedObservedPoint[]  observers  =  getObservations();  final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	                final        WeightedObservedPoint[]        observations        =        getObservations();        final    WeightedObservedPoint[]    observers    =    getObservations();    final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit()	36	None	add
55	[BUG]  [BUGGY]          final    WeightedObservedPoint[]    observations    =    getObservations();    final  WeightedObservedPoint[]  observers  =  getObservations();  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();  [CE]  variable  observations  is  already  defined  in  method  fit()  [FE]      NotStrictlyPositiveException    [CONTEXT]      public  double[]  fit()  {      [BUGGY]          final    WeightedObservedPoint[]    observations    =    getObservations();    final  WeightedObservedPoint[]  observers  =  getObservations();  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	                final        WeightedObservedPoint[]        observations        =        getObservations();        final    WeightedObservedPoint[]    observers    =    getObservations();    WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit()	36	None	add
56	[BUG]  [BUGGY]          final    WeightedObservedPoint[]    observations    =    getObservations();    final  WeightedObservedPoint[]  observers  =  getObservations();  final  WeightedObservedPoint[]  observations  =  getObservations();  [CE]  variable  observations  is  already  defined  in  method  fit()  [FE]        NotStrictlyPositiveException    [CONTEXT]      public  double[]  fit()  {      [BUGGY]          final    WeightedObservedPoint[]    observations    =    getObservations();    final  WeightedObservedPoint[]  observers  =  getObservations();  final  WeightedObservedPoint[]  observations  =  getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	                final        WeightedObservedPoint[]        observations        =        getObservations();        final    WeightedObservedPoint[]    observers    =    getObservations();    final  WeightedObservedPoint[]  observations  =  getObservations();	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit()	36	None	add
57	[BUG]  [BUGGY]          final    WeightedObservedPoint[]    observations    =    getObservations();    final  WeightedObservedPoint[]  observers  =  getObservations();  Final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();  [CE]  ';'  expected  [FE]          NotStrictlyPositiveException    [CONTEXT]      public  double[]  fit()  {      [BUGGY]          final    WeightedObservedPoint[]    observations    =    getObservations();    final  WeightedObservedPoint[]  observers  =  getObservations();  Final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	                final        WeightedObservedPoint[]        observations        =        getObservations();        final    WeightedObservedPoint[]    observers    =    getObservations();    Final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();	  	non-compiled	[CE]  ';'  expected	36	None	add
58	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  observations)).guess();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  observations)).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  observations)).guess();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
59	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  initialGuess)).guess();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  initialGuess)).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  initialGuess)).guess();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
60	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  measurements)).guess();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  measurements)).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  measurements)).guess();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
61	[BUG]  [BUGGY]  final  double  initialGuess  =  getInitialGuess().length;  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  initialGuess  =  getInitialGuess().length;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getInitialGuess().length;	  final    int    initialGuess    =    getInitialGuess().length;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
62	[BUG]  [BUGGY]  final  long  initialGuess  =  getInitialGuess().length;  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  long  initialGuess  =  getInitialGuess().length;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  long  initialGuess  =  getInitialGuess().length;	  final    int    initialGuess    =    getInitialGuess().length;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
63	[BUG]  [BUGGY]  final  int  initialGuess  =  getInitialGuess().length  -  1;  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  initialGuess  =  getInitialGuess().length  -  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getInitialGuess().length  -  1;	  final    int    initialGuess    =    getInitialGuess().length;    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
64	[BUG]  [BUGGY]  final  double[]  initialGuess  =  getInitialValues();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  initialGuess  =  getInitialValues();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  initialGuess  =  getInitialValues();	  final    double[]    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
65	[BUG]  [BUGGY]  final  double[]  initialGuess  =  getInitialArguments();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  initialGuess  =  getInitialArguments();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  initialGuess  =  getInitialArguments();	  final    double[]    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
66	[BUG]  [BUGGY]  final  double[]  initialGuess  =  getInitialGuess().clone();  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  initialGuess  =  getInitialGuess().clone();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  initialGuess  =  getInitialGuess().clone();	  final    double[]    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
67	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardFields();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardFields();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getStandardFields();	  WeightedObservedPoint[]    observations    =    getFields();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
68	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getFields().toArray(new  WeightedObservedPoint[0]);  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getFields().toArray(new  WeightedObservedPoint[0]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getFields().toArray(new  WeightedObservedPoint[0]);	  WeightedObservedPoint[]    observations    =    getFields();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
69	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getFields().clone();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getFields().clone();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getFields().clone();	  WeightedObservedPoint[]    observations    =    getFields();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
70	[BUG]  [BUGGY]  final  double  initialGuess  =  getObservations().size()  +  1;  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  initialGuess  =  getObservations().size()  +  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getObservations().size()  +  1;	  final    int    initialGuess    =    getObservations().size()    +    1;    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
71	[BUG]  [BUGGY]  final  int  initialGuess  =  getObservations().length  +  1;  [CE]  cannot  find  symbol  guess  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  initialGuess  =  getObservations().length  +  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getObservations().length  +  1;	  final    int    initialGuess    =    getObservations().size()    +    1;    	non-compiled	[CE]  cannot  find  symbol  guess	45	None	replace
72	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getAllObservations().cloneTree();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getAllObservations().cloneTree();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getAllObservations().cloneTree();	  final    WeightedObservedPoint[]    observations    =    getAllObservations();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
73	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[0]);  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[0]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[0]);	  final    WeightedObservedPoint[]    observations    =    getAllObservations();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
74	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardObservations().clone();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardObservations().clone();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getStandardObservations().clone();	  final    WeightedObservedPoint[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
75	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardObservations(false);  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardObservations(false);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getStandardObservations(false);	  final    WeightedObservedPoint[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
76	[BUG]  [BUGGY]  final  double  initialGuess  =  getObservations().length;  [CE]  cannot  find  symbol  guess  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  initialGuess  =  getObservations().length;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getObservations().length;	  final    int    initialGuess    =    getObservations().length;    	non-compiled	[CE]  cannot  find  symbol  guess	62	None	replace
77	[BUG]  [BUGGY]  final  int  initialGuess  =  getObservations().length  -  1;  [CE]  cannot  find  symbol  guess  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  initialGuess  =  getObservations().length  -  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getObservations().length  -  1;	  final    int    initialGuess    =    getObservations().length;    	non-compiled	[CE]  cannot  find  symbol  guess	62	None	replace
78	[BUG]  [BUGGY]  final  long  initialGuess  =  getObservations().length;  [CE]  cannot  find  symbol  guess  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  long  initialGuess  =  getObservations().length;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  long  initialGuess  =  getObservations().length;	  final    int    initialGuess    =    getObservations().length;    	non-compiled	[CE]  cannot  find  symbol  guess	62	None	replace
79	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[0]);  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[0]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(new  double[0]);	  final    double[]    observations    =    getObservations().toArray(new    double[returnNull()    ]);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
80	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[observations.size()  ]);  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[observations.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(new  double[observations.size()  ]);	  final    double[]    observations    =    getObservations().toArray(new    double[returnNull()    ]);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
81	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[returnNull()  +  1]);  [CE]  cannot  find  symbol  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[returnNull()  +  1]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(new  double[returnNull()  +  1]);	  final    double[]    observations    =    getObservations().toArray(new    double[returnNull()    ]);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
82	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).gauss();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).gauss();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments())).gauss();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
83	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(this.parameters);  [CE]  cannot  find  symbol  parameters  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(this.parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(this.parameters);	  double[]    observations    =    getObservations().toArray(requiredPoints);    	non-compiled	[CE]  cannot  find  symbol  parameters	78	None	replace
84	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(observedPoints);  [CE]  cannot  find  symbol  observedPoints  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(observedPoints);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(observedPoints);	  double[]    observations    =    getObservations().toArray(requiredPoints);    	non-compiled	[CE]  cannot  find  symbol  observedPoints	78	None	replace
85	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(observations);  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(observations);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(observations);	  double[]    observations    =    getObservations().toArray(requiredPoints);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
86	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters()));  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters()));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters()));	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
87	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).correct();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).correct();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).correct();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
88	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).pass(0);  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).pass(0);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).pass(0);	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
89	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getStandardArgs())).guess();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getStandardArgs())).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getStandardArgs())).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
90	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters()));  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters()));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters()));	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
91	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[this.references.size()  ]);  [CE]  cannot  find  symbol  references  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[this.references.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(new  double[this.references.size()  ]);	  final    double[]    observations    =    getObservations().toArray(new    double[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  references	80	None	replace
92	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[this.parameters.size()  ]);  [CE]  cannot  find  symbol  parameters  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[this.parameters.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(new  double[this.parameters.size()  ]);	  final    double[]    observations    =    getObservations().toArray(new    double[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  parameters	80	None	replace
93	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[references.size()  +  1]);  [CE]  cannot  find  symbol  references  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[references.size()  +  1]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(new  double[references.size()  +  1]);	  final    double[]    observations    =    getObservations().toArray(new    double[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  references	80	None	replace
94	[BUG]  [BUGGY]  final  int[]  observations  =  getObservations().length  -  1;  [CE]  incompatible  types  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  observations  =  getObservations().length  -  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  observations  =  getObservations().length  -  1;	  final    int[]    observations    =    getObservations().length;    	non-compiled	[CE]  incompatible  types	57	None	replace
95	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getObservations();  [CE]  cannot  find  symbol  guess  [FE]          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getObservations();	          final    WeightedObservedPoint[]    observations    =    getObservations();    WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol  guess	34	None	replace
96	[BUG]  [BUGGY]  weightedObservedPoint[]  observations  =  getObservations();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  weightedObservedPoint[]  observations  =  getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	weightedObservedPoint[]  observations  =  getObservations();	          final    WeightedObservedPoint[]    observations    =    getObservations();    WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
97	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.initialGuess.getObservations();  [CE]  cannot  find  symbol  initialGuess  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.initialGuess.getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  this.initialGuess.getObservations();	  final    WeightedObservedPoint[]    observations    =    this.fns.getObservations();    	non-compiled	[CE]  cannot  find  symbol  initialGuess	76	None	replace
98	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.symbols.getObservations();  [CE]  cannot  find  symbol  symbols  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.symbols.getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  this.symbols.getObservations();	  final    WeightedObservedPoint[]    observations    =    this.fns.getObservations();    	non-compiled	[CE]  cannot  find  symbol  symbols	76	None	replace
99	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.g.getObservations();  [CE]  cannot  find  symbol  g  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.g.getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  this.g.getObservations();	  final    WeightedObservedPoint[]    observations    =    this.fns.getObservations();    	non-compiled	[CE]  cannot  find  symbol  g	76	None	replace
100	[BUG]  [BUGGY]  final  long  initialGuess  =  getImmediateParameters();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  long  initialGuess  =  getImmediateParameters();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  long  initialGuess  =  getImmediateParameters();	  final    int    initialGuess    =    getImmediateParameters();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
101	[BUG]  [BUGGY]  final  int  initialGuess  =  getImmediateParameters().length;  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  initialGuess  =  getImmediateParameters().length;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getImmediateParameters().length;	  final    int    initialGuess    =    getImmediateParameters();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
102	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ],  initialGuess);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ],  initialGuess);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ],  initialGuess);	  double[]    observations    =    getObservations().toArray(new    double[getObservations().size()    ],    parameters);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
103	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  +  1],  parameters);  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  +  1],  parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  +  1],  parameters);	  double[]    observations    =    getObservations().toArray(new    double[getObservations().size()    ],    parameters);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
104	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).validate();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).validate();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).validate();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
105	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  parameters).validate();  [CE]  ')'  expected  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  parameters).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  parameters).validate();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).validate();    	non-compiled	[CE]  ')'  expected	90	None	replace
106	[BUG]  [BUGGY]  final  long  initialGuess  =  getInitialValues();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  long  initialGuess  =  getInitialValues();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  long  initialGuess  =  getInitialValues();	  final    int    initialGuess    =    getInitialValues();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
107	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.results.size()  ]);  [CE]  cannot  find  symbol  results  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.results.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[this.results.size()  ]);	  double[]    observations    =    getObservations().toArray(new    double[results.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  results	111	None	replace
108	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[parameters.size()  ]);  [CE]  cannot  find  symbol  parameters  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[parameters.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[parameters.size()  ]);	  double[]    observations    =    getObservations().toArray(new    double[results.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  parameters	111	None	replace
109	[BUG]  [BUGGY]  final  double[]  guess  =  getParameters().gauss();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getParameters().gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getParameters().gauss();	  final    double[]    guess    =    getParameters().guess();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
110	[BUG]  [BUGGY]  final  double[]  guess  =  getParameters().place(null,  null);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getParameters().place(null,  null);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getParameters().place(null,  null);	  final    double[]    guess    =    getParameters().guess();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
111	[BUG]  [BUGGY]  final  double[]  guess  =  getParameters().place(0,  0);  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getParameters().place(0,  0);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getParameters().place(0,  0);	  final    double[]    guess    =    getParameters().guess();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
112	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray();	  final    double[]    guess    =    getObservations().assignments();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
113	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().placements();  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().placements();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().placements();	  final    double[]    guess    =    getObservations().assignments();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
114	[BUG]  [BUGGY]  G2d.setFont(getStandardFunctions());  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  G2d.setFont(getStandardFunctions());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	G2d.setFont(getStandardFunctions());	  g2.setFont(getStandardFunctions());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
115	[BUG]  [BUGGY]  final  double  parameters  =  getParameters();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  parameters  =  getParameters();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  parameters  =  getParameters();	  final    double    parameters    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
116	[BUG]  [BUGGY]  final  double  parameters  =  getStandardParameters();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  parameters  =  getStandardParameters();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  parameters  =  getStandardParameters();	  final    double    parameters    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
117	[BUG]  [BUGGY]  final  double  initialGuess  =  getObservations().size()  -  1;  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  initialGuess  =  getObservations().size()  -  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getObservations().size()  -  1;	  final    double    initialGuess    =    getObservations().size();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
118	[BUG]  [BUGGY]  final  double  initialGuess  =  getObservations().size()  -  2;  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  initialGuess  =  getObservations().size()  -  2;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getObservations().size()  -  2;	  final    double    initialGuess    =    getObservations().size();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
119	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations(),  parameters.values();  [CE]  ';'  expected  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations(),  parameters.values();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations(),  parameters.values();	  final    double[]    observations    =    getObservations().values();    	non-compiled	[CE]  ';'  expected	81	None	replace
120	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(results);  [CE]  cannot  find  symbol  results  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().toArray(results);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(results);	  final    double[]    observations    =    getObservations().values();    	non-compiled	[CE]  cannot  find  symbol  results	81	None	replace
121	[BUG]  [BUGGY]  final  double  initialGuess  =  getInitialGuess()  /  2;  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  initialGuess  =  getInitialGuess()  /  2;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getInitialGuess()  /  2;	  final    double    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
122	[BUG]  [BUGGY]  final  double  initialGuess  =  getInitialGuess(),  parameters);  [CE]  ';'  expected  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  initialGuess  =  getInitialGuess(),  parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getInitialGuess(),  parameters);	  final    double    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  ';'  expected	59	None	replace
123	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameterTypes(),  getStandardArgs())).guess();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameterTypes(),  getStandardArgs())).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameterTypes(),  getStandardArgs())).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    getParameterTypes())).guess();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
124	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameterTypes()));  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameterTypes()));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameterTypes()));	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    getParameterTypes())).guess();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
125	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes()));  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes()));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes()));	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameterTypes())).guess();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
126	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).correct();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).correct();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).correct();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameterTypes())).guess();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
127	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).pass(0);  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).pass(0);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).pass(0);	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameterTypes())).guess();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
128	[BUG]  [BUGGY]  final  int[]  initialGuess  =  getInitialArguments(),  parameters);  [CE]  ';'  expected  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  initialGuess  =  getInitialArguments(),  parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  initialGuess  =  getInitialArguments(),  parameters);	  final    int[]    initialGuess    =    getInitialArguments();    	non-compiled	[CE]  ';'  expected	9	None	replace
129	[BUG]  [BUGGY]  final  float[]  initialGuess  =  getInitialArguments();  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  float[]  initialGuess  =  getInitialArguments();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  float[]  initialGuess  =  getInitialArguments();	  final    int[]    initialGuess    =    getInitialArguments();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
130	[BUG]  [BUGGY]  double[]  observations  =  getReturnObservations();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getReturnObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getReturnObservations();	  double[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
131	[BUG]  [BUGGY]  double[]  observations  =  getStandardArguments();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getStandardArguments();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getStandardArguments();	  double[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
132	[BUG]  [BUGGY]  final  long[]  observations  =  getObservations().length;  [CE]  incompatible  types  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  long[]  observations  =  getObservations().length;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  long[]  observations  =  getObservations().length;	  final    long[]    observations    =    getObservations();    	non-compiled	[CE]  incompatible  types	58	None	replace
133	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters).guess();  [CE]  ')'  expected  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters).guess();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint()),    parameters).guess();    	non-compiled	[CE]  ')'  expected	22	None	replace
134	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  observations).guess();  [CE]  ')'  expected  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  observations).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  observations).guess();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint()),    parameters).guess();    	non-compiled	[CE]  ')'  expected	22	None	replace
135	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())/  parameters).guess();  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())/  parameters).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())/  parameters).guess();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint()),    parameters).guess();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
136	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  observations).guess();  [CE]  ')'  expected  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  observations).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  observations).guess();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint()),    parameters).guess();    	non-compiled	[CE]  ')'  expected	22	None	replace
137	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  observations)).guess();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  observations)).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  observations)).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
138	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters));  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters));	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
139	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  observations)).guess();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  observations)).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  observations)).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
140	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters));  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters));	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
141	[BUG]  [BUGGY]  final  double  initialGuess  =  getInitialGuess()  -  1;  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  initialGuess  =  getInitialGuess()  -  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getInitialGuess()  -  1;	  final    int    initialGuess    =    getInitialGuess()    -    1;    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
142	[BUG]  [BUGGY]  final  long  initialGuess  =  getInitialGuess()  -  1;  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  long  initialGuess  =  getInitialGuess()  -  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  long  initialGuess  =  getInitialGuess()  -  1;	  final    int    initialGuess    =    getInitialGuess()    -    1;    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
143	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getFields().clone();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getFields().clone();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getFields().clone();	  final    WeightedObservedPoint[]    observations    =    getFields();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
144	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardFields();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardFields();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getStandardFields();	  final    WeightedObservedPoint[]    observations    =    getFields();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
145	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters)).computeValues();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters)).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters)).computeValues();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds())).computeValues();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
146	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).computeValues();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).computeValues();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds())).computeValues();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
147	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  f.getObservations();  [CE]  cannot  find  symbol  f  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  f.getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  f.getObservations();	  final    WeightedObservedPoint[]    observations    =    g.getObservations();    	non-compiled	[CE]  cannot  find  symbol  f	26	None	replace
148	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  parameters.getObservations();  [CE]  cannot  find  symbol  parameters  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  parameters.getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  parameters.getObservations();	  final    WeightedObservedPoint[]    observations    =    g.getObservations();    	non-compiled	[CE]  cannot  find  symbol  parameters	26	None	replace
149	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardParameters();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardParameters();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getStandardParameters();	  final    WeightedObservedPoint[]    observations    =    getStandardParameters();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
150	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getParameters();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getParameters();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getParameters();	  final    WeightedObservedPoint[]    observations    =    getStandardParameters();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
151	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardParameters().clone();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardParameters().clone();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getStandardParameters().clone();	  final    WeightedObservedPoint[]    observations    =    getStandardParameters();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
152	[BUG]  [BUGGY]  Double[]  observations  =  getObservations().toArray(new  double[this.parameters.size()  ]);  [CE]  cannot  find  symbol  parameters  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  Double[]  observations  =  getObservations().toArray(new  double[this.parameters.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	Double[]  observations  =  getObservations().toArray(new  double[this.parameters.size()  ]);	  double[]    observations    =    getObservations().toArray(new    double[this.parameters.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  parameters	19	None	replace
153	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.parameters.size()  +  1]);  [CE]  cannot  find  symbol  parameters  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.parameters.size()  +  1]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[this.parameters.size()  +  1]);	  double[]    observations    =    getObservations().toArray(new    double[this.parameters.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  parameters	19	None	replace
154	[BUG]  [BUGGY]  final  double  parameters  =  getFieldParameters();  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  parameters  =  getFieldParameters();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  parameters  =  getFieldParameters();	  final    int    parameters    =    getFieldParameters();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
155	[BUG]  [BUGGY]  final  int  parameters  =  getFieldParameters().length;  [CE]  cannot  find  symbol  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  parameters  =  getFieldParameters().length;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  parameters  =  getFieldParameters().length;	  final    int    parameters    =    getFieldParameters();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
156	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters()));  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters()));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters()));	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
157	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).correct();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).correct();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).correct();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
158	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).passes();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).passes();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).passes();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
159	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.parameters!=  null?  this.parameters.getObservations()  :  new  WeightedObservedPoint[0];  [CE]  cannot  find  symbol  parameters  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.parameters!=  null?  this.parameters.getObservations()  :  new  WeightedObservedPoint[0];  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  this.parameters!=  null?  this.parameters.getObservations()  :  new  WeightedObservedPoint[0];	  final    WeightedObservedPoint[]    observations    =    this.parameters.getObservations();    	non-compiled	[CE]  cannot  find  symbol  parameters	93	None	replace
160	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.parameters!=  null?  this.parameters.getObservations()  :  Collections.EMPTY_LIST;  [CE]  cannot  find  symbol  parameters  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.parameters!=  null?  this.parameters.getObservations()  :  Collections.EMPTY_LIST;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  this.parameters!=  null?  this.parameters.getObservations()  :  Collections.EMPTY_LIST;	  final    WeightedObservedPoint[]    observations    =    this.parameters.getObservations();    	non-compiled	[CE]  cannot  find  symbol  parameters	93	None	replace
161	[BUG]  [BUGGY]  final  int  parameters  =  getParameters()  -  1;  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  parameters  =  getParameters()  -  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  parameters  =  getParameters()  -  1;	  final    int    parameters    =    getParameters();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
162	[BUG]  [BUGGY]  final  int  parameters  =  getParameters().length;  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  parameters  =  getParameters().length;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  parameters  =  getParameters().length;	  final    int    parameters    =    getParameters();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
163	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.references.size()  +  1]);  [CE]  cannot  find  symbol  references  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.references.size()  +  1]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[this.references.size()  +  1]);	  double[]    observations    =    getObservations().toArray(new    double[this.references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  references	18	None	replace
164	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().length  -  1]);  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().length  -  1]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getObservations().length  -  1]);	  double[]    observations    =    getObservations().toArray(new    double[getObservations().length    ]);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
165	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().length  +  1]);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().length  +  1]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getObservations().length  +  1]);	  double[]    observations    =    getObservations().toArray(new    double[getObservations().length    ]);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
166	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().length  -  2]);  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().length  -  2]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getObservations().length  -  2]);	  double[]    observations    =    getObservations().toArray(new    double[getObservations().length    ]);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
167	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[this.references.size()  ]);  [CE]  cannot  find  symbol  references  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[this.references.size()  ]);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[this.references.size()  ]);	  final    double[]    guess    =    getObservations().toArray(new    double[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  references	105	None	replace
168	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[returnValues.size()  ]);  [CE]  cannot  find  symbol  returnValues  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[returnValues.size()  ]);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[returnValues.size()  ]);	  final    double[]    guess    =    getObservations().toArray(new    double[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  returnValues	105	None	replace
169	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()  +  1));  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()  +  1));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()  +  1));	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint()));    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
170	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  parameters);  [CE]  ')'  expected  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  parameters);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  parameters);	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint()));    	non-compiled	[CE]  ')'  expected	23	None	replace
171	[BUG]  [BUGGY]  final  double[]  parameters  =  getParameters(getObservations());  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  parameters  =  getParameters(getObservations());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  parameters  =  getParameters(getObservations());	  final    int[]    parameters    =    getParameters(getObservations());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
172	[BUG]  [BUGGY]  final  int[]  parameters  =  getParameters(getParameters());  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  parameters  =  getParameters(getParameters());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  parameters  =  getParameters(getParameters());	  final    int[]    parameters    =    getParameters(getObservations());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
173	[BUG]  [BUGGY]  final  long  initialGuess  =  getObservations().size()  -  1;  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  long  initialGuess  =  getObservations().size()  -  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  long  initialGuess  =  getObservations().size()  -  1;	  final    int    initialGuess    =    getObservations().size()    -    1;    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
174	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().length  -  1;  [CE]  incompatible  types  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().length  -  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().length  -  1;	  final    double[]    observations    =    getObservations().length;    	non-compiled	[CE]  incompatible  types	13	None	replace
175	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().length,  parameters);  [CE]  ';'  expected  [FE]                          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().length,  parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().length,  parameters);	  final    double[]    observations    =    getObservations().length;    	non-compiled	[CE]  ';'  expected	13	None	replace
176	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[1]);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[1]);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[1]);	  final    double[]    guess    =    getObservations().toArray(new    double[0]);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
177	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[2]);  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[2]);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[2]);	  final    double[]    guess    =    getObservations().toArray(new    double[0]);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
178	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(this,  new  double[0]);  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(this,  new  double[0]);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(this,  new  double[0]);	  final    double[]    guess    =    getObservations().toArray(new    double[0]);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
179	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).computeValues();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).computeValues();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments())).computeValues();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
180	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[parameters.size()  ]);  [CE]  cannot  find  symbol  parameters  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[parameters.size()  ]);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[parameters.size()  ]);	  final    double[]    guess    =    getObservations().toArray(new    double[temps.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  parameters	87	None	replace
181	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[results.size()  ]);  [CE]  cannot  find  symbol  results  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[results.size()  ]);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[results.size()  ]);	  final    double[]    guess    =    getObservations().toArray(new    double[temps.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  results	87	None	replace
182	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[this.parameters.size()  ]);  [CE]  cannot  find  symbol  parameters  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[this.parameters.size()  ]);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[this.parameters.size()  ]);	  final    double[]    guess    =    getObservations().toArray(new    double[temps.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  parameters	87	None	replace
183	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[returnPoints.size()  ]);  [CE]  cannot  find  symbol  returnPoints  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[returnPoints.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[returnPoints.size()  ]);	  double[]    observations    =    getObservations().toArray(new    double[returnValues.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  returnPoints	107	None	replace
184	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).computeValues();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).computeValues();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters())).computeValues();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
185	[BUG]  [BUGGY]  final  double[]  parameters  =  getParameters().clone();  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  parameters  =  getParameters().clone();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  parameters  =  getParameters().clone();	  final    double[]    parameters    =    getParameters();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
186	[BUG]  [BUGGY]  final  double[]  parameters  =  getParameters().toArray(new  double[parameters.size()  ]);  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  parameters  =  getParameters().toArray(new  double[parameters.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  parameters  =  getParameters().toArray(new  double[parameters.size()  ]);	  final    double[]    parameters    =    getParameters();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
187	[BUG]  [BUGGY]  final  double[]  parameters  =  getParameters().toArray(new  Double[parameters.size()  ]);  [CE]  cannot  find  symbol  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  parameters  =  getParameters().toArray(new  Double[parameters.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  parameters  =  getParameters().toArray(new  Double[parameters.size()  ]);	  final    double[]    parameters    =    getParameters();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
188	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters()));  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters()));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters()));	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
189	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).pass(0);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).pass(0);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).pass(0);	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
190	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().place(f,  null);  [CE]  cannot  find  symbol  f  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().place(f,  null);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().place(f,  null);	  final    double[]    guess    =    getObservations().place(g,    null);    	non-compiled	[CE]  cannot  find  symbol  f	3	None	replace
191	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().place(parameters,  null);  [CE]  cannot  find  symbol  parameters  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().place(parameters,  null);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().place(parameters,  null);	  final    double[]    guess    =    getObservations().place(g,    null);    	non-compiled	[CE]  cannot  find  symbol  parameters	3	None	replace
192	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().place(variant,  null);  [CE]  cannot  find  symbol  variant  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().place(variant,  null);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().place(variant,  null);	  final    double[]    guess    =    getObservations().place(g,    null);    	non-compiled	[CE]  cannot  find  symbol  variant	3	None	replace
193	[BUG]  [BUGGY]  int[]  observations  =  getObservations().length;  [CE]  incompatible  types  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  int[]  observations  =  getObservations().length;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	int[]  observations  =  getObservations().length;	  int[]    observations    =    getObservations();    	non-compiled	[CE]  incompatible  types	42	None	replace
194	[BUG]  [BUGGY]  int[]  observations  =  getObservations(),  parameters);  [CE]  ';'  expected  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  int[]  observations  =  getObservations(),  parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	int[]  observations  =  getObservations(),  parameters);	  int[]    observations    =    getObservations();    	non-compiled	[CE]  ';'  expected	42	None	replace
195	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getImmediateParameters().clone();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getImmediateParameters().clone();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getImmediateParameters().clone();	  WeightedObservedPoint[]    observations    =    getImmediateParameters();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
196	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getImmediateParams();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getImmediateParams();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getImmediateParams();	  WeightedObservedPoint[]    observations    =    getImmediateParameters();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
197	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getImmediateParameters(false);  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getImmediateParameters(false);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getImmediateParameters(false);	  WeightedObservedPoint[]    observations    =    getImmediateParameters();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
198	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getObservations().getObservations();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getObservations().getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getObservations().getObservations();	          final    WeightedObservedPoint[]    observations    =    getObservations();    final    WeightedObservedPoint[]    observations    =    getObservations().getObservations();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
199	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getObservations().getObservations();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getObservations().getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getObservations().getObservations();	          final    WeightedObservedPoint[]    observations    =    getObservations();    final    WeightedObservedPoint[]    observations    =    getObservations().getObservations();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
200	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getAllParameters();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getAllParameters();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getAllParameters();	  WeightedObservedPoint[]    observations    =    getAllObservations();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
201	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[0]);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[0]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[0]);	  WeightedObservedPoint[]    observations    =    getAllObservations();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
202	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getAllObservations().clone();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getAllObservations().clone();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getAllObservations().clone();	  WeightedObservedPoint[]    observations    =    getAllObservations();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
203	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getStandardArguments())).guess();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getStandardArguments())).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getStandardArguments())).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
204	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters()));  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters()));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters()));	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
205	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observers  =  getStandardObservations();  [CE]  cannot  find  symbol  [FE]    NotStrictlyPositiveException    [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observers  =  getStandardObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observers  =  getStandardObservations();	          final    WeightedObservedPoint[]    observations    =    getObservations();    final    WeightedObservedPoint[]    observers    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
206	[BUG]  [BUGGY]  WeightedObservedPoint[]  observers  =  getStandardObservations();  [CE]  cannot  find  symbol  [FE]      NotStrictlyPositiveException    [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observers  =  getStandardObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observers  =  getStandardObservations();	          final    WeightedObservedPoint[]    observations    =    getObservations();    final    WeightedObservedPoint[]    observers    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
207	[BUG]  [BUGGY]  final  double[]  observations  =  getReturnObservations();  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getReturnObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getReturnObservations();	  final    double[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
208	[BUG]  [BUGGY]  final  double[]  observations  =  getStandardObservations().clone();  [CE]  cannot  find  symbol  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getStandardObservations().clone();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getStandardObservations().clone();	  final    double[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
209	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount()  +  1)).guess();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount()  +  1)).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount()  +  1)).guess();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameterCount())).guess();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
210	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount()));  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount()));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount()));	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameterCount())).guess();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
211	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount()  -  1)).guess();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount()  -  1)).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount()  -  1)).guess();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameterCount())).guess();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
212	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  observations)).guess();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  observations)).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  observations)).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
213	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters));  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters));	  final    double[]    guess    =    (new    ParameterGuesser(getParameters(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
214	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations(),  parameters);  [CE]  ';'  expected  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations(),  parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations(),  parameters);	  double[]    observations    =    getObservations(),    parameters);    	non-compiled	[CE]  ';'  expected	41	None	replace
215	[BUG]  [BUGGY]  double[]  observations  =  getObservations(),  this.parameters);  [CE]  <identifier>  expected  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations(),  this.parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations(),  this.parameters);	  double[]    observations    =    getObservations(),    parameters);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
216	[BUG]  [BUGGY]  double[]  observations  =  getStandardObservations(),  parameters);  [CE]  ';'  expected  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getStandardObservations(),  parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getStandardObservations(),  parameters);	  double[]    observations    =    getObservations(),    parameters);    	non-compiled	[CE]  ';'  expected	41	None	replace
217	[BUG]  [BUGGY]  final  int[]  observations  =  getInitialGuess();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  observations  =  getInitialGuess();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  observations  =  getInitialGuess();	  final    int[]    observations    =    getReturnObservations();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
218	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  observations)).guess();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  observations)).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  observations)).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
219	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters));  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters));	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
220	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters),  true).guess();  [CE]  ')'  expected  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters),  true).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters),  true).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    parameters)).guess();    	non-compiled	[CE]  ')'  expected	38	None	replace
221	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters()));  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters()));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters()));	  final    double[]    guess    =    (new    ParameterGuesser(getParameters(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
222	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).pass(0);  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).pass(0);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).pass(0);	  final    double[]    guess    =    (new    ParameterGuesser(getParameters(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
223	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).gauss();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).gauss();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations())).gauss();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
224	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardObservations(false);  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardObservations(false);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getStandardObservations(false);	  WeightedObservedPoint[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
225	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[0]);  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[0]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[0]);	  WeightedObservedPoint[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
226	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getInitialGuess();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getInitialGuess();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getInitialGuess();	  WeightedObservedPoint[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
227	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).computeValues();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).computeValues();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations())).computeValues();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
228	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).computeValues();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).computeValues();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).computeValues();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
229	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  parameters).computeValues();  [CE]  ')'  expected  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  parameters).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  parameters).computeValues();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).computeValues();    	non-compiled	[CE]  ')'  expected	89	None	replace
230	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()).computeValues();  [CE]  ')'  expected  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()).computeValues();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).computeValues();    	non-compiled	[CE]  ')'  expected	89	None	replace
231	[BUG]  [BUGGY]  final  long[]  parameters  =  getParameters().clone();  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  long[]  parameters  =  getParameters().clone();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  long[]  parameters  =  getParameters().clone();	  final    long[]    parameters    =    getParameters();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
232	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).gauss();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).gauss();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters())).gauss();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
233	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount()  +  1)).guess();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount()  +  1)).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount()  +  1)).guess();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    getParameterCount())).guess();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
234	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount()));  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount()));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount()));	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    getParameterCount())).guess();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
235	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount())).passes();  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount())).passes();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount())).passes();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    getParameterCount())).guess();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
236	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).weight();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).weight();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).weight();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameterTypes())).guess();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
237	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).validate();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).validate();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameterTypes())).guess();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
238	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).gauss();  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).gauss();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameterTypes())).guess();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
239	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[returnValues()  -  1]);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[returnValues()  -  1]);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[returnValues()  -  1]);	  final    double[]    guess    =    getObservations().toArray(new    double[returnValues()    ]);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
240	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[returnValues()  +  1]);  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[returnValues()  +  1]);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[returnValues()  +  1]);	  final    double[]    guess    =    getObservations().toArray(new    double[returnValues()    ]);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
241	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount())).weight();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount())).weight();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount())).weight();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    getParameterCount())).guess();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
242	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount())).gauss();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount())).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount())).gauss();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    getParameterCount())).guess();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
243	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount())).validate();  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount())).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount())).validate();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    getParameterCount())).guess();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
244	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).weight();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).weight();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).weight();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
245	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).pass(0);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).pass(0);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).pass(0);	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
246	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getFields().toArray(new  WeightedObservedPoint[0]);  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getFields().toArray(new  WeightedObservedPoint[0]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getFields().toArray(new  WeightedObservedPoint[0]);	  final    WeightedObservedPoint[]    observations    =    getFields();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
247	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[0]);  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[0]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[0]);	  final    WeightedObservedPoint[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
248	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(this);  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(this);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(this);	  final    WeightedObservedPoint[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
249	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).gauss();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).gauss();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
250	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).validate();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).validate();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
251	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).weight();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).weight();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).weight();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
252	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(this,  new  WeightedObservedPoint[0]);  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(this,  new  WeightedObservedPoint[0]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(this,  new  WeightedObservedPoint[0]);	  double[]    observations    =    getObservations().toArray(this);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
253	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters),  v).guess();  [CE]  ')'  expected  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters),  v).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters),  v).guess();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    parameters)).guess();    	non-compiled	[CE]  ')'  expected	30	None	replace
254	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters)).weight();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters)).weight();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters)).weight();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
255	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters)).gauss();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters)).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters)).gauss();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
256	[BUG]  [BUGGY]  g2.setFont(getFillThroughFunctions());  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  g2.setFont(getFillThroughFunctions());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	g2.setFont(getFillThroughFunctions());	  g2.setFont(getFallThroughFunctions());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
257	[BUG]  [BUGGY]  g2.setFont(getFollowFunctions());  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  g2.setFont(getFollowFunctions());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	g2.setFont(getFollowFunctions());	  g2.setFont(getFallThroughFunctions());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
258	[BUG]  [BUGGY]  Double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ],  parameters);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  Double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ],  parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	Double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ],  parameters);	  double[]    observations    =    getObservations().toArray(new    double[getObservations().size()    ],    parameters);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
259	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.p.getObservations();  [CE]  cannot  find  symbol  p  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.p.getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  this.p.getObservations();	  final    WeightedObservedPoint[]    observations    =    this.fns.getObservations();    	non-compiled	[CE]  cannot  find  symbol  p	76	None	replace
260	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.parameters.size()  -  1]);  [CE]  cannot  find  symbol  parameters  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.parameters.size()  -  1]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[this.parameters.size()  -  1]);	  double[]    observations    =    getObservations().toArray(new    double[this.parameters.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  parameters	19	None	replace
261	[BUG]  [BUGGY]  final  int  initialGuess  =  getInitialArguments().length;  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  initialGuess  =  getInitialArguments().length;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getInitialArguments().length;	  final    int    initialGuess    =    getInitialArguments();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
262	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameterTypes())).validate();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameterTypes())).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameterTypes())).validate();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    getParameterTypes())).guess();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
263	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameterTypes())).gauss();  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameterTypes())).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameterTypes())).gauss();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    getParameterTypes())).guess();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
264	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).weight();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).weight();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).weight();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
265	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).validate();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).validate();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
266	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).gauss();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).gauss();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
267	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters())).gauss();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters())).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters())).gauss();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments())).gauss();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
268	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().values();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().values();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().values();	  final    double[]    guess    =    getObservations().assignments();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
269	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getParameterPoint())).validate();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getParameterPoint())).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getParameterPoint())).validate();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).validate();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
270	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.parameters!=  null?  new  double[0]  :  this.parameters.getObservations();  [CE]  cannot  find  symbol  parameters  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.parameters!=  null?  new  double[0]  :  this.parameters.getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  this.parameters!=  null?  new  double[0]  :  this.parameters.getObservations();	  final    WeightedObservedPoint[]    observations    =    this.parameters.getObservations();    	non-compiled	[CE]  cannot  find  symbol  parameters	93	None	replace
271	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.parameters.clone();  [CE]  cannot  find  symbol  parameters  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.parameters.clone();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  this.parameters.clone();	  final    WeightedObservedPoint[]    observations    =    this.parameters.getObservations();    	non-compiled	[CE]  cannot  find  symbol  parameters	93	None	replace
272	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  v.getObservations();  [CE]  cannot  find  symbol  v  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  v.getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  v.getObservations();	  final    WeightedObservedPoint[]    observations    =    parameters.getObservations();    	non-compiled	[CE]  cannot  find  symbol  v	24	None	replace
273	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters)).weight();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters)).weight();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters)).weight();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
274	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters)).passes();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters)).passes();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters)).passes();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
275	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  WeightedObservedPoint[0]);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  WeightedObservedPoint[0]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  WeightedObservedPoint[0]);	  double[]    observations    =    getObservations().toArray(requiredPoints);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
276	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(this.observedPoints);  [CE]  cannot  find  symbol  observedPoints  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(this.observedPoints);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(this.observedPoints);	  double[]    observations    =    getObservations().toArray(requiredPoints);    	non-compiled	[CE]  cannot  find  symbol  observedPoints	78	None	replace
277	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).weight();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).weight();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).weight();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
278	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).validate();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).validate();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
279	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().length  +  1;  [CE]  incompatible  types  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().length  +  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().length  +  1;	  final    double[]    observations    =    getObservations().length;    	non-compiled	[CE]  incompatible  types	13	None	replace
280	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[requires.size()  ]);  [CE]  cannot  find  symbol  requires  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[requires.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[requires.size()  ]);	  double[]    observations    =    getObservations().toArray(new    double[results.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  requires	111	None	replace
281	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount())).weight();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount())).weight();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount())).weight();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameterCount())).guess();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
282	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount())).gauss();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount())).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount())).gauss();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameterCount())).guess();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
283	[BUG]  [BUGGY]  final  int[]  parameters  =  getParameters().toArray(new  double[parameters.size()  ]);  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  parameters  =  getParameters().toArray(new  double[parameters.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  parameters  =  getParameters().toArray(new  double[parameters.size()  ]);	  final    int[]    parameters    =    getParameters().toArray(parameters);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
284	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).gauss();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).gauss();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters())).gauss();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
285	[BUG]  [BUGGY]  final  double[]  guess  =  getParameters().clone();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getParameters().clone();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getParameters().clone();	  final    double[]    guess    =    getParameters().guess();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
286	[BUG]  [BUGGY]  final  double[]  guess  =  getParameters().computeValues();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getParameters().computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getParameters().computeValues();	  final    double[]    guess    =    getParameters().guess();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
287	[BUG]  [BUGGY]  final  double[]  guess  =  getParameters().join();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getParameters().join();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getParameters().join();	  final    double[]    guess    =    getParameters().guess();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
288	[BUG]  [BUGGY]  final  int[]  initialGuess  =  getInitialPrimitiveValues();  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  initialGuess  =  getInitialPrimitiveValues();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  initialGuess  =  getInitialPrimitiveValues();	  final    int[]    initialGuess    =    getInitialValues();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
289	[BUG]  [BUGGY]  G2.setFont(getFunctionStandardFunctions(),  true);  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  G2.setFont(getFunctionStandardFunctions(),  true);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	G2.setFont(getFunctionStandardFunctions(),  true);	  G2.setFont(getFunctionStandardFunctions());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
290	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  -  1]);  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  -  1]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  -  1]);	  double[]    observations    =    getObservations().toArray(new    double[getObservations().size()    +    1]);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
291	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).validate();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).validate();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
292	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).weight();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).weight();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).weight();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
293	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).passes();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).passes();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).passes();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
294	[BUG]  [BUGGY]  final  int  initialGuess  =  getInitialValues()  -  1;  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  initialGuess  =  getInitialValues()  -  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getInitialValues()  -  1;	  final    int    initialGuess    =    getInitialValues();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
295	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getParameterPoint())).gauss();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getParameterPoint())).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getParameterPoint())).gauss();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).gauss();    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
296	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  v).gauss();  [CE]  ')'  expected  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  v).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  v).gauss();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).gauss();    	non-compiled	[CE]  ')'  expected	88	None	replace
297	[BUG]  [BUGGY]  Double[]  observations  =  getObservations().toArray(new  double[this.references.size()  ]);  [CE]  cannot  find  symbol  references  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  Double[]  observations  =  getObservations().toArray(new  double[this.references.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	Double[]  observations  =  getObservations().toArray(new  double[this.references.size()  ]);	  double[]    observations    =    getObservations().toArray(new    double[this.references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  references	18	None	replace
298	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[references.size()  ]);  [CE]  cannot  find  symbol  references  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[references.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[references.size()  ]);	  final    WeightedObservedPoint[]    observations    =    getAllObservations();    	non-compiled	[CE]  cannot  find  symbol  references	74	None	replace
299	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[temps.size()  ]);  [CE]  cannot  find  symbol  temps  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[temps.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[temps.size()  ]);	  final    WeightedObservedPoint[]    observations    =    getAllObservations();    	non-compiled	[CE]  cannot  find  symbol  temps	74	None	replace
300	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getParameterPoint()));  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getParameterPoint()));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getParameterPoint()));	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint()));    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
301	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getBase()));  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getBase()));  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getBase()));	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint()));    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
302	[BUG]  [BUGGY]  int[]  observations  =  getObservations().toArray(new  int[references.size()  ]);  [CE]  cannot  find  symbol  references  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  int[]  observations  =  getObservations().toArray(new  int[references.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	int[]  observations  =  getObservations().toArray(new  int[references.size()  ]);	  int[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol  references	42	None	replace
303	[BUG]  [BUGGY]  int[]  observations  =  getReturnObservations();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  int[]  observations  =  getReturnObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	int[]  observations  =  getReturnObservations();	  int[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
304	[BUG]  [BUGGY]  double[]  observations  =  getFields(),  parameters);  [CE]  ';'  expected  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getFields(),  parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getFields(),  parameters);	  double[]    observations    =    getObservations(),    parameters);    	non-compiled	[CE]  ';'  expected	41	None	replace
305	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[returnValues()  ]);  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[returnValues()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(new  double[returnValues()  ]);	  final    double[]    observations    =    getObservations().clone();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
306	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[requirements.size()  ]);  [CE]  cannot  find  symbol  requirements  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[requirements.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(new  double[requirements.size()  ]);	  final    double[]    observations    =    getObservations().clone();    	non-compiled	[CE]  cannot  find  symbol  requirements	11	None	replace
307	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.returnValues.size()  ]);  [CE]  cannot  find  symbol  returnValues  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.returnValues.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[this.returnValues.size()  ]);	  double[]    observations    =    getObservations().toArray(new    double[returnValues.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  returnValues	107	None	replace
308	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().place(last,  null);  [CE]  cannot  find  symbol  last  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().place(last,  null);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().place(last,  null);	  final    double[]    guess    =    getObservations().place(g,    null);    	non-compiled	[CE]  cannot  find  symbol  last	3	None	replace
309	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().place(this,  null);  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().place(this,  null);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().place(this,  null);	  final    double[]    guess    =    getObservations().place(g,    null);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
310	[BUG]  [BUGGY]  final  int  initialGuess  =  getInitialGuess()  *  1;  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  initialGuess  =  getInitialGuess()  *  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getInitialGuess()  *  1;	  final    int    initialGuess    =    getInitialGuess()    -    1;    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
311	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[references.size()  ]);  [CE]  cannot  find  symbol  references  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[references.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[references.size()  ]);	  WeightedObservedPoint[]    observations    =    getAllObservations();    	non-compiled	[CE]  cannot  find  symbol  references	56	None	replace
312	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[temps.size()  ]);  [CE]  cannot  find  symbol  temps  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[temps.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getAllObservations().toArray(new  WeightedObservedPoint[temps.size()  ]);	  WeightedObservedPoint[]    observations    =    getAllObservations();    	non-compiled	[CE]  cannot  find  symbol  temps	56	None	replace
313	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getFieldParameters();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getFieldParameters();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getFieldParameters();	  final    WeightedObservedPoint[]    observations    =    getStandardParameters();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
314	[BUG]  [BUGGY]  final  double  initialGuess  =  getParameters();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  initialGuess  =  getParameters();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getParameters();	  final    double    initialGuess    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
315	[BUG]  [BUGGY]  final  double[]  initialGuess  =  getInitialPrimitiveGuess();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  initialGuess  =  getInitialPrimitiveGuess();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  initialGuess  =  getInitialPrimitiveGuess();	  final    double[]    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
316	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters())).weight();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters())).weight();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters())).weight();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
317	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters())).validate();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters())).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters())).validate();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
318	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())+  parameters).guess();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())+  parameters).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())+  parameters).guess();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint()),    parameters).guess();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
319	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters).validate();  [CE]  ')'  expected  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters).validate();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint()),    parameters).guess();    	non-compiled	[CE]  ')'  expected	22	None	replace
320	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[returnZero()  ]);  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[returnZero()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(new  double[returnZero()  ]);	  final    double[]    observations    =    getObservations().toArray(new    double[returnNull()    ]);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
321	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[returnNull()  ],  parameters);  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[returnNull()  ],  parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(new  double[returnNull()  ],  parameters);	  final    double[]    observations    =    getObservations().toArray(new    double[returnNull()    ]);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
322	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getObservations().getParameters();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getObservations().getParameters();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getObservations().getParameters();	          final    WeightedObservedPoint[]    observations    =    getObservations();    final    WeightedObservedPoint[]    observations    =    getObservations().getObservations();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
323	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getParameters().getObservations();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getParameters().getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getParameters().getObservations();	          final    WeightedObservedPoint[]    observations    =    getObservations();    final    WeightedObservedPoint[]    observations    =    getObservations().getObservations();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
324	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getImmediateFields();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getImmediateFields();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getImmediateFields();	  WeightedObservedPoint[]    observations    =    getImmediateParameters();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
325	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getImmediateParameters().toArray(new  WeightedObservedPoint[0]);  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getImmediateParameters().toArray(new  WeightedObservedPoint[0]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getImmediateParameters().toArray(new  WeightedObservedPoint[0]);	  WeightedObservedPoint[]    observations    =    getImmediateParameters();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
326	[BUG]  [BUGGY]  final  int  initialGuess  =  getInitialGuess(),  parameters.length;  [CE]  ';'  expected  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  initialGuess  =  getInitialGuess(),  parameters.length;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getInitialGuess(),  parameters.length;	  final    int    initialGuess    =    getInitialGuess().length;    	non-compiled	[CE]  ';'  expected	61	None	replace
327	[BUG]  [BUGGY]  final  int[]  initialGuess  =  getInitialArguments().clone();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  initialGuess  =  getInitialArguments().clone();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  initialGuess  =  getInitialArguments().clone();	  final    int[]    initialGuess    =    getInitialArguments();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
328	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).weight();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).weight();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).weight();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
329	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).validate();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).validate();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
330	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[3]);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[3]);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[3]);	  final    double[]    guess    =    getObservations().toArray(new    double[0]);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
331	[BUG]  [BUGGY]  final  double[]  observations  =  getStandardArguments();  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getStandardArguments();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getStandardArguments();	  final    double[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
332	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).weight();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).weight();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).weight();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
333	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).validate();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).validate();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
334	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).gauss();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).gauss();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
335	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.compiler.size()  ]);  [CE]  cannot  find  symbol  compiler  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.compiler.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[this.compiler.size()  ]);	  double[]    observations    =    getObservations().toArray(new    double[compiler.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  compiler	64	None	replace
336	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[results.size()  ]);  [CE]  cannot  find  symbol  results  [FE]        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[results.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[results.size()  ]);	  WeightedObservedPoint[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol  results	53	None	replace
337	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[temps.size()  ]);  [CE]  cannot  find  symbol  temps  [FE]          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[temps.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[temps.size()  ]);	  WeightedObservedPoint[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol  temps	53	None	replace
338	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters())).computeStdValues();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters())).computeStdValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters())).computeStdValues();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters())).computeValues();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
339	[BUG]  [BUGGY]  g2.setFont(getStandardFunctions()  +  1);  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  g2.setFont(getStandardFunctions()  +  1);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	g2.setFont(getStandardFunctions()  +  1);	  g2.setFont(getStandardFunctions());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
340	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[this.temps.size()  ]);  [CE]  cannot  find  symbol  temps  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[this.temps.size()  ]);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[this.temps.size()  ]);	  final    double[]    guess    =    getObservations().toArray(new    double[temps.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  temps	87	None	replace
341	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[getReferences().size()  ]);  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[getReferences().size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(new  double[getReferences().size()  ]);	  final    double[]    observations    =    getObservations().toArray(new    double[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
342	[BUG]  [BUGGY]  final  int  initialGuess  =  getImmediateParameters()  -  1;  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  initialGuess  =  getImmediateParameters()  -  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getImmediateParameters()  -  1;	  final    int    initialGuess    =    getImmediateParameters();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
343	[BUG]  [BUGGY]  final  float[]  observations  =  getObservations();  [CE]  incompatible  types  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  float[]  observations  =  getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  float[]  observations  =  getObservations();	  final    long[]    observations    =    getObservations();    	non-compiled	[CE]  incompatible  types	58	None	replace
344	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters())).validate();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters())).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters())).validate();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
345	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters())).gauss();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters())).gauss();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters())).gauss();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
346	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).validate();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).validate();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
347	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).weight();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).weight();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).weight();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
348	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters),  v).guess();  [CE]  ')'  expected  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters),  v).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters),  v).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters(),    parameters)).guess();    	non-compiled	[CE]  ')'  expected	28	None	replace
349	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).passes();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).passes();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).passes();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
350	[BUG]  [BUGGY]  if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();  }  [CE]  observations  has  private  access  in  CurveFitter  [FE]    NotStrictlyPositiveException    [CONTEXT]      public  double[]  fit()  {      [BUGGY]  if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();  }  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();  }	          final    WeightedObservedPoint[]    observations    =    getObservations();    final    WeightedObservedPoint[]    observers    =    getObservations();    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	37	None	replace
351	[BUG]  [BUGGY]  if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  }  else  {  return  new  Double[0];  }  [CE]  observations  has  private  access  in  CurveFitter  [FE]      NotStrictlyPositiveException    [CONTEXT]      public  double[]  fit()  {      [BUGGY]  if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  }  else  {  return  new  Double[0];  }  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  }  else  {  return  new  Double[0];  }	          final    WeightedObservedPoint[]    observations    =    getObservations();    final    WeightedObservedPoint[]    observers    =    getObservations();    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	37	None	replace
352	[BUG]  [BUGGY]  if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  }  else  {  return  new  double[0];  }  [CE]  observations  has  private  access  in  CurveFitter  [FE]        NotStrictlyPositiveException    [CONTEXT]      public  double[]  fit()  {      [BUGGY]  if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  }  else  {  return  new  double[0];  }  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  }  else  {  return  new  double[0];  }	          final    WeightedObservedPoint[]    observations    =    getObservations();    final    WeightedObservedPoint[]    observers    =    getObservations();    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	37	None	replace
353	[BUG]  [BUGGY]  if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  }  [CE]  observations  has  private  access  in  CurveFitter  [FE]          NotStrictlyPositiveException    [CONTEXT]      public  double[]  fit()  {      [BUGGY]  if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  }  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  }	          final    WeightedObservedPoint[]    observations    =    getObservations();    final    WeightedObservedPoint[]    observers    =    getObservations();    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	37	None	replace
354	[BUG]  [BUGGY]  final  int[]  observations  =  getReturnPointObservations();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  observations  =  getReturnPointObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  observations  =  getReturnPointObservations();	  final    int[]    observations    =    getReturnObservations();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
355	[BUG]  [BUGGY]  final  int[]  observations  =  getObservations().toArray(new  int[returnValues.size()  ]);  [CE]  cannot  find  symbol  returnValues  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  observations  =  getObservations().toArray(new  int[returnValues.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  observations  =  getObservations().toArray(new  int[returnValues.size()  ]);	  final    int[]    observations    =    getObservations().toArray(new    int[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  returnValues	106	None	replace
356	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.parameters  ==  null?  this.parameters.getObservations()  :  new  WeightedObservedPoint[0];  [CE]  cannot  find  symbol  parameters  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.parameters  ==  null?  this.parameters.getObservations()  :  new  WeightedObservedPoint[0];  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  this.parameters  ==  null?  this.parameters.getObservations()  :  new  WeightedObservedPoint[0];	  final    WeightedObservedPoint[]    observations    =    this.parameters.getObservations();    	non-compiled	[CE]  cannot  find  symbol  parameters	93	None	replace
357	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters),  v).guess();  [CE]  ')'  expected  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters),  v).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters),  v).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments(),    parameters)).guess();    	non-compiled	[CE]  ')'  expected	4	None	replace
358	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).passes();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).passes();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).passes();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
359	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[returnValues()  ],  observations);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[returnValues()  ],  observations);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[returnValues()  ],  observations);	  final    double[]    guess    =    getObservations().toArray(new    double[returnValues()    ]);    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
360	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[returnValues(),  parameters);  [CE]  ']'  expected  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[returnValues(),  parameters);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[returnValues(),  parameters);	  final    double[]    guess    =    getObservations().toArray(new    double[returnValues()    ]);    	non-compiled	[CE]  ']'  expected	104	None	replace
361	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.references.size()  -  1]);  [CE]  cannot  find  symbol  references  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.references.size()  -  1]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[this.references.size()  -  1]);	  double[]    observations    =    getObservations().toArray(new    double[this.references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  references	18	None	replace
362	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters),  v).guess();  [CE]  ')'  expected  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters),  v).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters),  v).guess();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    parameters)).guess();    	non-compiled	[CE]  ')'  expected	21	None	replace
363	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).passes();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).passes();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).passes();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
364	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().strategy();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getObservations().strategy();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().strategy();	  final    double[]    guess    =    getObservations().assignments();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
365	[BUG]  [BUGGY]  final  double[]  initialGuess  =  getInitialPrivateGuess();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  initialGuess  =  getInitialPrivateGuess();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  initialGuess  =  getInitialPrivateGuess();	  final    double[]    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
366	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).passes();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).passes();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).passes();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
367	[BUG]  [BUGGY]  double[]  observations  =  getReturnObservations(),  parameters);  [CE]  ';'  expected  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getReturnObservations(),  parameters);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getReturnObservations(),  parameters);	  double[]    observations    =    getObservations(),    parameters);    	non-compiled	[CE]  ';'  expected	41	None	replace
368	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters),  v).guess();  [CE]  ')'  expected  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters),  v).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters),  v).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    parameters)).guess();    	non-compiled	[CE]  ')'  expected	38	None	replace
369	[BUG]  [BUGGY]  static  final  int  initialGuess  =  getObservations();  [CE]  illegal  start  of  expression  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  static  final  int  initialGuess  =  getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	static  final  int  initialGuess  =  getObservations();	  final    long    initialGuess    =    getObservations();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
370	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterTypes())).validate();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterTypes())).validate();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterTypes())).validate();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).validate();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
371	[BUG]  [BUGGY]  int[]  observations  =  getStandardObservations();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  int[]  observations  =  getStandardObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	int[]  observations  =  getStandardObservations();	  int[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
372	[BUG]  [BUGGY]  final  double[]  parameters  =  getParametersArray();  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  parameters  =  getParametersArray();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  parameters  =  getParametersArray();	  final    double[]    parameters    =    getParameters();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
373	[BUG]  [BUGGY]  final  double[]  observations  =  getFields();  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getFields();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getFields();	  final    double[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
374	[BUG]  [BUGGY]  final  double  parameters  =  getParameterValues();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  parameters  =  getParameterValues();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  parameters  =  getParameterValues();	  final    double    parameters    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
375	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[results.size()  ]);  [CE]  cannot  find  symbol  results  [FE]          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[results.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[results.size()  ]);	  final    WeightedObservedPoint[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol  results	73	None	replace
376	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[references.size()  ]);  [CE]  cannot  find  symbol  references  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[references.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[references.size()  ]);	  final    WeightedObservedPoint[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol  references	73	None	replace
377	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters())).computeValues();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters())).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters())).computeValues();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs())).computeValues();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
378	[BUG]  [BUGGY]          final    WeightedObservedPoint[]    observations    =    getObservations();    final  WeightedObservedPoint[]  observers  =  getObservations();  static  final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();  [CE]  illegal  start  of  expression  [FE]    NotStrictlyPositiveException    [CONTEXT]      public  double[]  fit()  {      [BUGGY]          final    WeightedObservedPoint[]    observations    =    getObservations();    final  WeightedObservedPoint[]  observers  =  getObservations();  static  final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	                final        WeightedObservedPoint[]        observations        =        getObservations();        final    WeightedObservedPoint[]    observers    =    getObservations();    static  final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
379	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).check();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).check();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).check();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
380	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).pass(this);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).pass(this);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).pass(this);	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
381	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.fns,  this.parameters.getObservations();  [CE]  <identifier>  expected  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.fns,  this.parameters.getObservations();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  this.fns,  this.parameters.getObservations();	  final    WeightedObservedPoint[]    observations    =    this.fns.getObservations();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
382	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(requiredPoints());  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().toArray(requiredPoints());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(requiredPoints());	  final    double[]    observations    =    getObservations().values();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
383	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount())).computeValues();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount())).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount())).computeValues();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds())).computeValues();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
384	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters())).passes();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters())).passes();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters())).passes();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
385	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParams())).guess();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParams())).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParams())).guess();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
386	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  WeightedObservedPoint[requiredPoints.size()  ]);  [CE]  cannot  find  symbol  requiredPoints  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  WeightedObservedPoint[requiredPoints.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  WeightedObservedPoint[requiredPoints.size()  ]);	  double[]    observations    =    getObservations().toArray(requiredPoints);    	non-compiled	[CE]  cannot  find  symbol  requiredPoints	78	None	replace
387	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters)).place(this,  true);  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters)).place(this,  true);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters)).place(this,  true);	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    parameters)).guess();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
388	[BUG]  [BUGGY]  final  double[]  guess  =  getParameters().place(g,  null);  [CE]  cannot  find  symbol  g  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getParameters().place(g,  null);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getParameters().place(g,  null);	  final    double[]    guess    =    getParameters().guess();    	non-compiled	[CE]  cannot  find  symbol  g	29	None	replace
389	[BUG]  [BUGGY]  final  double[]  guess  =  getParameters().place(null,  true);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  getParameters().place(null,  true);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getParameters().place(null,  true);	  final    double[]    guess    =    getParameters().guess();    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
390	[BUG]  [BUGGY]  final  int[]  parameters  =  getParameterValues();  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  parameters  =  getParameterValues();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  parameters  =  getParameterValues();	  final    int[]    parameters    =    getParameterTypes();    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
391	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getImmediateParameters().toArray(required);  [CE]  cannot  find  symbol  required  [FE]          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getImmediateParameters().toArray(required);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getImmediateParameters().toArray(required);	  WeightedObservedPoint[]    observations    =    getImmediateParameters();    	non-compiled	[CE]  cannot  find  symbol  required	54	None	replace
392	[BUG]  [BUGGY]  final  double  initialGuess  =  getInitialGuess().clone();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  initialGuess  =  getInitialGuess().clone();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getInitialGuess().clone();	  final    double    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
393	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount()  -  1)).guess();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount()  -  1)).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount()  -  1)).guess();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint(),    getParameterCount())).guess();    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
394	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getRequiredFields();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getRequiredFields();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getRequiredFields();	  final    WeightedObservedPoint[]    observations    =    getFields();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
395	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).computeValues();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).computeValues();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters())).computeValues();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
396	[BUG]  [BUGGY]  final  int  initialGuess  =  getObservations().size()  /  1;  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  initialGuess  =  getObservations().size()  /  1;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getObservations().size()  /  1;	  final    int    initialGuess    =    getObservations().size()    +    1;    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
397	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters),  v).guess();  [CE]  ')'  expected  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters),  v).guess();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters),  v).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations(),    parameters)).guess();    	non-compiled	[CE]  ')'  expected	27	None	replace
398	[BUG]  [BUGGY]  g2.setFont(getStandardFunctions().clone());  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  g2.setFont(getStandardFunctions().clone());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	g2.setFont(getStandardFunctions().clone());	  g2.setFont(getStandardFunctions());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
399	[BUG]  [BUGGY]  g2.setFont(getStandardFunctions()).setPaint(getStandardFunctions());  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  g2.setFont(getStandardFunctions()).setPaint(getStandardFunctions());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	g2.setFont(getStandardFunctions()).setPaint(getStandardFunctions());	  g2.setFont(getStandardFunctions());    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
400	[BUG]  [BUGGY]  final  int[]  parameters  =  getParameters(getReturnValues());  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  parameters  =  getParameters(getReturnValues());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  parameters  =  getParameters(getReturnValues());	  final    int[]    parameters    =    getParameters(getObservations());    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
401	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).computeValues();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).computeValues();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).computeValues();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
402	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters).weights();  [CE]  ')'  expected  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters).weights();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters).weights();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint()),    parameters).guess();    	non-compiled	[CE]  ')'  expected	22	None	replace
403	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters).returnValues();  [CE]  ')'  expected  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters).returnValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters).returnValues();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint()),    parameters).guess();    	non-compiled	[CE]  ')'  expected	22	None	replace
404	[BUG]  [BUGGY]  final  int[]  initialGuess  =  getInitialArguments().toArray(new  double[initialGuess.size()  ]);  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  initialGuess  =  getInitialArguments().toArray(new  double[initialGuess.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  initialGuess  =  getInitialArguments().toArray(new  double[initialGuess.size()  ]);	  final    int[]    initialGuess    =    getInitialArguments();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
405	[BUG]  [BUGGY]  final  int[]  initialGuess  =  getInitialArguments().toArray(new  int[initialGuess.size()  ]);  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int[]  initialGuess  =  getInitialArguments().toArray(new  int[initialGuess.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  initialGuess  =  getInitialArguments().toArray(new  int[initialGuess.size()  ]);	  final    int[]    initialGuess    =    getInitialArguments();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
406	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getReferences(),  parameters.size()  ]);  [CE]  ']'  expected  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getReferences(),  parameters.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getReferences(),  parameters.size()  ]);	  double[]    observations    =    getObservations().toArray(new    double[getReferences().size()    ]);    	non-compiled	[CE]  ']'  expected	63	None	replace
407	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[results.size()  ]);  [CE]  cannot  find  symbol  results  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[results.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(new  double[results.size()  ]);	  final    double[]    observations    =    getObservations().clone();    	non-compiled	[CE]  cannot  find  symbol  results	11	None	replace
408	[BUG]  [BUGGY]  final  int  initialGuess  =  getObservations().length  -  2;  [CE]  cannot  find  symbol  guess  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  int  initialGuess  =  getObservations().length  -  2;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getObservations().length  -  2;	  final    int    initialGuess    =    getObservations().length;    	non-compiled	[CE]  cannot  find  symbol  guess	62	None	replace
409	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).passes();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).passes();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).passes();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations(),    getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
410	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ],  metrics);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ],  metrics);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ],  metrics);	  double[]    observations    =    getObservations().toArray(new    double[getObservations().size()    ],    parameters);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
411	[BUG]  [BUGGY]  Double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ]);  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  Double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	Double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ]);	  double[]    observations    =    getObservations().toArray(new    double[getObservations().size()    +    1]);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
412	[BUG]  [BUGGY]  final  double  initialGuess  =  getBase();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double  initialGuess  =  getBase();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getBase();	  final    double    initialGuess    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
413	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getRequiredFields();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getRequiredFields();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getRequiredFields();	  WeightedObservedPoint[]    observations    =    getFields();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
414	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().size();  [CE]  cannot  find  symbol  [FE]                        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().size();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().size();	  final    double[]    observations    =    getObservations().length;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
415	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.hasParameters()?  this.parameters.getObservations()  :  null;  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.hasParameters()?  this.parameters.getObservations()  :  null;  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  this.hasParameters()?  this.parameters.getObservations()  :  null;	  final    WeightedObservedPoint[]    observations    =    parameters.getObservations();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
416	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameterTypes())).pass(0);  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameterTypes())).pass(0);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameterTypes())).pass(0);	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs(),    getParameterTypes())).guess();    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
417	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).computeValues();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).computeValues();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations())).computeValues();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
418	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).computeValues();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).computeValues();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameterTypes())).guess();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
419	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).pass(this);  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).pass(this);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).pass(this);	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameterTypes())).guess();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
420	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardParameters().toArray(new  WeightedObservedPoint[0]);  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardParameters().toArray(new  WeightedObservedPoint[0]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getStandardParameters().toArray(new  WeightedObservedPoint[0]);	  final    WeightedObservedPoint[]    observations    =    getStandardParameters();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
421	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[returnValues.size()  ]);  [CE]  cannot  find  symbol  returnValues  [FE]                    NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[returnValues.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(new  double[returnValues.size()  ]);	  final    double[]    observations    =    getObservations().toArray(new    double[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  returnValues	80	None	replace
422	[BUG]  [BUGGY]  g2.setFont(getFocusThroughFunctions());  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  g2.setFont(getFocusThroughFunctions());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	g2.setFont(getFocusThroughFunctions());	  g2.setFont(getFallThroughFunctions());    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
423	[BUG]  [BUGGY]  final  short[]  parameters  =  getParameters();  [CE]  cannot  find  symbol  [FE]                      NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  short[]  parameters  =  getParameters();  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  short[]  parameters  =  getParameters();	  final    long[]    parameters    =    getParameters();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
424	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount())).pass(this);  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount())).pass(this);  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount())).pass(this);	  final    double[]    guess    =(new    ParameterGuesser(getSeconds(),    getParameterCount())).guess();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
425	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[reportUnitMatchers.size()  ]);  [CE]  cannot  find  symbol  reportUnitMatchers  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[reportUnitMatchers.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[reportUnitMatchers.size()  ]);	  double[]    observations    =    getObservations().toArray(new    double[compiler.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  reportUnitMatchers	64	None	replace
426	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[references.size()  ]);  [CE]  cannot  find  symbol  references  [FE]        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[references.size()  ]);  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getStandardObservations().toArray(new  WeightedObservedPoint[references.size()  ]);	  WeightedObservedPoint[]    observations    =    getStandardObservations();    	non-compiled	[CE]  cannot  find  symbol  references	53	None	replace
427	[BUG]  [BUGGY]  G2.setFont(getFunctionStandardFunctions().clone());  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  G2.setFont(getFunctionStandardFunctions().clone());  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	G2.setFont(getFunctionStandardFunctions().clone());	  G2.setFont(getFunctionStandardFunctions());    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
428	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters())).computeValues();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters())).computeValues();  [BUGGY]      return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters())).computeValues();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments())).computeValues();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
429	[BUG]  [BUGGY]  if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  }  else  {  return  new  WeightedObservedPoint[0];  }  [CE]  observations  has  private  access  in  CurveFitter  [FE]        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  }  else  {  return  new  WeightedObservedPoint[0];  }  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  }  else  {  return  new  WeightedObservedPoint[0];  }	          final    WeightedObservedPoint[]    observations    =    getObservations();    final    WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	33	None	replace
430	[BUG]  [BUGGY]  if(observations!=  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  }  else  {  return  new  WeightedObservedPoint[0];  }  [CE]  observations  has  private  access  in  CurveFitter  [FE]          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  if(observations!=  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  }  else  {  return  new  WeightedObservedPoint[0];  }  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	if(observations!=  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations();  }  else  {  return  new  WeightedObservedPoint[0];  }	          final    WeightedObservedPoint[]    observations    =    getObservations();    final    WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	33	None	replace
431	[BUG]  [BUGGY]  if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations().getObservations();  }  else  {  return  new  Double[0];  }  [CE]  observations  has  private  access  in  CurveFitter  [FE]        NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations().getObservations();  }  else  {  return  new  Double[0];  }  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations().getObservations();  }  else  {  return  new  Double[0];  }	          final    WeightedObservedPoint[]    observations    =    getObservations();    final    WeightedObservedPoint[]    observations    =    getObservations().getObservations();    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	100	None	replace
432	[BUG]  [BUGGY]  if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations().getObservations();  }  else  {  return  new  double[0];  }  [CE]  observations  has  private  access  in  CurveFitter  [FE]          NotStrictlyPositiveException      [CONTEXT]      public  double[]  fit()  {      [BUGGY]  if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations().getObservations();  }  else  {  return  new  double[0];  }  [BUGGY]      final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	if(observations  ==  null)  {  final  WeightedObservedPoint[]  observations  =  getObservations().getObservations();  }  else  {  return  new  double[0];  }	          final    WeightedObservedPoint[]    observations    =    getObservations();    final    WeightedObservedPoint[]    observations    =    getObservations().getObservations();    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	100	None	replace
