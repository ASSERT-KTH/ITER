bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().gauss();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  getObservations().gauss();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().gauss();	  final    double[]    guess    =    getObservations().guess();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
2	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().assignments();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  getObservations().assignments();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().assignments();	  final    double[]    guess    =    getObservations().guess();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
3	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().place(g,  null);  [CE]  cannot  find  symbol  g  [FE]                NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  getObservations().place(g,  null);  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().place(g,  null);	  final    double[]    guess    =    getObservations().guess();    	non-compiled	[CE]  cannot  find  symbol  g	9	None	replace
4	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).guess();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  parameters)).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments())).guess();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
5	[BUG]  [BUGGY]  final  double[]  parameters  =  getParameters();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  parameters  =  getParameters();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  parameters  =  getParameters();	      final    int[]    parameters    =    getParameters();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
6	[BUG]  [BUGGY]  final  long[]  parameters  =  getParameters();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  long[]  parameters  =  getParameters();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  long[]  parameters  =  getParameters();	      final    int[]    parameters    =    getParameters();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
7	[BUG]  [BUGGY]  final  int[]  parameters  =  getParameters().length;  [CE]  cannot  find  symbol  [FE]                    NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int[]  parameters  =  getParameters().length;  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  parameters  =  getParameters().length;	      final    int[]    parameters    =    getParameters();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
8	[BUG]  [BUGGY]  final  double[]  initialGuess  =  getInitialGuess();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  initialGuess  =  getInitialGuess();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  initialGuess  =  getInitialGuess();	      final    int[]    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
9	[BUG]  [BUGGY]  final  int[]  initialGuess  =  getInitialArguments();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int[]  initialGuess  =  getInitialArguments();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  initialGuess  =  getInitialArguments();	      final    int[]    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
10	[BUG]  [BUGGY]  final  int[]  initialGuess  =  getInitialValues();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int[]  initialGuess  =  getInitialValues();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  initialGuess  =  getInitialValues();	      final    int[]    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
11	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().clone();  [CE]  incompatible  types  [FE]                NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  observations  =  getObservations().clone();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().clone();	      final    double[]    observations    =    getObservations();    	non-compiled	[CE]  incompatible  types	14	None	replace
12	[BUG]  [BUGGY]  final  double[]  observations  =  getStandardObservations();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  observations  =  getStandardObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getStandardObservations();	      final    double[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
13	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().length;  [CE]  incompatible  types  [FE]                    NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  observations  =  getObservations().length;  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().length;	      final    double[]    observations    =    getObservations();    	non-compiled	[CE]  incompatible  types	14	None	replace
14	[BUG]  [BUGGY]  final  double  initialGuess  =  getObservations();  [CE]  incompatible  types  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double  initialGuess  =  getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getObservations();	      final    int    initialGuess    =    getObservations();    	non-compiled	[CE]  incompatible  types	11	None	replace
15	[BUG]  [BUGGY]  final  long  initialGuess  =  getObservations();  [CE]  incompatible  types  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  long  initialGuess  =  getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  long  initialGuess  =  getObservations();	      final    int    initialGuess    =    getObservations();    	non-compiled	[CE]  incompatible  types	11	None	replace
16	[BUG]  [BUGGY]  final  int  initialGuess  =  getImmediateParameters();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int  initialGuess  =  getImmediateParameters();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getImmediateParameters();	      final    int    initialGuess    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
17	[BUG]  [BUGGY]  final  int  initialGuess  =  getInitialArguments();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int  initialGuess  =  getInitialArguments();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getInitialArguments();	      final    int    initialGuess    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
18	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.references.size()  ]);  [CE]  cannot  find  symbol  references  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.references.size()  ]);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[this.references.size()  ]);	      double[]    observations    =    getObservations().toArray(new    double[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  references	20	None	replace
19	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.parameters.size()  ]);  [CE]  cannot  find  symbol  parameters  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[this.parameters.size()  ]);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[this.parameters.size()  ]);	      double[]    observations    =    getObservations().toArray(new    double[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  parameters	20	None	replace
20	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[0]);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[0]);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[0]);	      double[]    observations    =    getObservations().toArray(new    double[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
21	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).guess();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  parameters)).guess();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).guess();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
22	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  parameters).guess();  [CE]  ')'  expected  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  parameters).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()),  parameters).guess();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).guess();    	non-compiled	[CE]  ')'  expected	8	None	replace
23	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()));  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()));  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint()));	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).guess();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
24	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  parameters.getObservations();  [CE]  cannot  find  symbol  parameters  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  WeightedObservedPoint[]  observations  =  parameters.getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  parameters.getObservations();	      final    WeightedObservedPoint[]    observations    =    f.getObservations();    	non-compiled	[CE]  cannot  find  symbol  parameters	5	None	replace
25	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  parameter.getObservations();  [CE]  cannot  find  symbol  parameter  [FE]                NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  WeightedObservedPoint[]  observations  =  parameter.getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  parameter.getObservations();	      final    WeightedObservedPoint[]    observations    =    f.getObservations();    	non-compiled	[CE]  cannot  find  symbol  parameter	5	None	replace
26	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  g.getObservations();  [CE]  cannot  find  symbol  g  [FE]                  NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  WeightedObservedPoint[]  observations  =  g.getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  g.getObservations();	      final    WeightedObservedPoint[]    observations    =    f.getObservations();    	non-compiled	[CE]  cannot  find  symbol  g	5	None	replace
27	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).guess();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  parameters)).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations())).guess();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
28	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).guess();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  parameters)).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
29	[BUG]  [BUGGY]  final  double[]  guess  =  getParameters().guess();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  getParameters().guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getParameters().guess();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
30	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters)).guess();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters)).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  parameters)).guess();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds())).guess();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
31	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).guess();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameters())).guess();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds())).guess();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
32	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).guess();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterTypes())).guess();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds())).guess();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
33	[BUG]  [BUGGY]      final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observations  =  getObservations();  [CE]  variable  observations  is  already  defined  in  method  fit()  [FE]    NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]      final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observations  =  getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	        final    WeightedObservedPoint[]    observations    =    getObservations();    final  WeightedObservedPoint[]  observations  =  getObservations();	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit()	1	None	add
34	[BUG]  [BUGGY]      final  WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getObservations();  [CE]  variable  observations  is  already  defined  in  method  fit()  [FE]      NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]      final  WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	        final    WeightedObservedPoint[]    observations    =    getObservations();    WeightedObservedPoint[]  observations  =  getObservations();	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit()	1	None	add
35	[BUG]  [BUGGY]      final  WeightedObservedPoint[]  observations  =  getObservations();  Final  WeightedObservedPoint[]  observations  =  getObservations();  [CE]  ';'  expected  [FE]        NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]      final  WeightedObservedPoint[]  observations  =  getObservations();  Final  WeightedObservedPoint[]  observations  =  getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	        final    WeightedObservedPoint[]    observations    =    getObservations();    Final  WeightedObservedPoint[]  observations  =  getObservations();	  	non-compiled	[CE]  ';'  expected	1	None	add
36	[BUG]  [BUGGY]  [FE]  NotStrictlyPositiveException  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]      final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	add	        final    WeightedObservedPoint[]    observations    =    getObservations();    final  WeightedObservedPoint[]  observers  =  getObservations();	  	compilable	  [FE]  NotStrictlyPositiveException  	1	1	add
37	[BUG]  [BUGGY]      final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();  [FE]  NotStrictlyPositiveException  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]      final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observers  =  getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	        final    WeightedObservedPoint[]    observations    =    getObservations();    final  WeightedObservedPoint[]  observers  =  getObservations();	  	compilable	  [FE]  NotStrictlyPositiveException  	1	1	add
38	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters)).guess();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters)).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  parameters)).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs())).guess();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
39	[BUG]  [BUGGY]  G2.setFont(getFunctionStandardFunctions());  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  G2.setFont(getFunctionStandardFunctions());  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	G2.setFont(getFunctionStandardFunctions());	      g2.setFont(getFunctionStandardFunctions());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
40	[BUG]  [BUGGY]  g2.setFont(getStandardFunctions());  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  g2.setFont(getStandardFunctions());  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	g2.setFont(getStandardFunctions());	      g2.setFont(getFunctionStandardFunctions());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
41	[BUG]  [BUGGY]  double[]  observations  =  getObservations(),  parameters);  [CE]  ';'  expected  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  double[]  observations  =  getObservations(),  parameters);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations(),  parameters);	      double[]    observations    =    getObservations();    	non-compiled	[CE]  ';'  expected	19	None	replace
42	[BUG]  [BUGGY]  int[]  observations  =  getObservations();  [CE]  incompatible  types  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  int[]  observations  =  getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	int[]  observations  =  getObservations();	      double[]    observations    =    getObservations();    	non-compiled	[CE]  incompatible  types	19	None	replace
43	[BUG]  [BUGGY]  final  double  initialGuess  =  getObservations().size();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double  initialGuess  =  getObservations().size();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getObservations().size();	      final    int    initialGuess    =    getObservations().size();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
44	[BUG]  [BUGGY]  final  int  initialGuess  =  getObservations().size()  -  1;  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int  initialGuess  =  getObservations().size()  -  1;  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getObservations().size()  -  1;	      final    int    initialGuess    =    getObservations().size();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
45	[BUG]  [BUGGY]  final  int  initialGuess  =  getObservations().size()  +  1;  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int  initialGuess  =  getObservations().size()  +  1;  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getObservations().size()  +  1;	      final    int    initialGuess    =    getObservations().size();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
46	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  +  1]);  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  +  1]);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  +  1]);	      double[]    observations    =    getObservations().toArray(new    double[getObservations().size()    ]);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
47	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().length  ]);  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().length  ]);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getObservations().length  ]);	      double[]    observations    =    getObservations().toArray(new    double[getObservations().size()    ]);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
48	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ],  parameters);  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ],  parameters);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ],  parameters);	      double[]    observations    =    getObservations().toArray(new    double[getObservations().size()    ]);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
49	[BUG]  [BUGGY]  final  double  parameters  =  getObservations();  [CE]  incompatible  types  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double  parameters  =  getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  parameters  =  getObservations();	      final    int    parameters    =    getObservations();    	non-compiled	[CE]  incompatible  types	12	None	replace
50	[BUG]  [BUGGY]  final  int  parameters  =  getParameters();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int  parameters  =  getParameters();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  parameters  =  getParameters();	      final    int    parameters    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
51	[BUG]  [BUGGY]  final  int  parameters  =  getParameterTypes();  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int  parameters  =  getParameterTypes();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  parameters  =  getParameterTypes();	      final    int    parameters    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
52	[BUG]  [BUGGY]  final  int  parameters  =  getFieldParameters();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int  parameters  =  getFieldParameters();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  parameters  =  getFieldParameters();	      final    int    parameters    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
53	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardObservations();  [CE]  cannot  find  symbol  [FE]    NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getStandardObservations();	      final    WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
54	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getImmediateParameters();  [CE]  cannot  find  symbol  [FE]      NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getImmediateParameters();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getImmediateParameters();	      final    WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
55	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getFields();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getFields();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getFields();	      final    WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
56	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getAllObservations();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getAllObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	WeightedObservedPoint[]  observations  =  getAllObservations();	      final    WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
57	[BUG]  [BUGGY]  final  int[]  observations  =  getObservations().length;  [CE]  incompatible  types  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int[]  observations  =  getObservations().length;  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  observations  =  getObservations().length;	      final    int[]    observations    =    getObservations();    	non-compiled	[CE]  incompatible  types	3	None	replace
58	[BUG]  [BUGGY]  final  long[]  observations  =  getObservations();  [CE]  incompatible  types  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  long[]  observations  =  getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  long[]  observations  =  getObservations();	      final    int[]    observations    =    getObservations();    	non-compiled	[CE]  incompatible  types	3	None	replace
59	[BUG]  [BUGGY]  final  double  initialGuess  =  getInitialGuess();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double  initialGuess  =  getInitialGuess();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double  initialGuess  =  getInitialGuess();	      final    int    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
60	[BUG]  [BUGGY]  final  long  initialGuess  =  getInitialGuess();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  long  initialGuess  =  getInitialGuess();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  long  initialGuess  =  getInitialGuess();	      final    int    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
61	[BUG]  [BUGGY]  final  int  initialGuess  =  getInitialGuess().length;  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int  initialGuess  =  getInitialGuess().length;  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getInitialGuess().length;	      final    int    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
62	[BUG]  [BUGGY]  final  int  initialGuess  =  getObservations().length;  [CE]  cannot  find  symbol  guess  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int  initialGuess  =  getObservations().length;  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getObservations().length;	      final    int    initialGuess    =    getObservations().size();    	non-compiled	[CE]  cannot  find  symbol  guess	13	None	replace
63	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getReferences().size()  ]);  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[getReferences().size()  ]);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[getReferences().size()  ]);	      double[]    observations    =    getObservations().toArray(new    double[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
64	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[compiler.size()  ]);  [CE]  cannot  find  symbol  compiler  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[compiler.size()  ]);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[compiler.size()  ]);	      double[]    observations    =    getObservations().toArray(new    double[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  compiler	20	None	replace
65	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters())).gauss();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters())).gauss();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters())).gauss();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
66	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters())).computeValues();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters())).computeValues();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters())).computeValues();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
67	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs())).gauss();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs())).gauss();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs())).gauss();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs())).guess();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
68	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs())).computeValues();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs())).computeValues();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs())).computeValues();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs())).guess();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
69	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations())).gauss();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations())).gauss();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations())).gauss();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations())).guess();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
70	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations())).computeValues();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations())).computeValues();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations())).computeValues();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations())).guess();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
71	[BUG]  [BUGGY]  final  int[]  observations  =  getReturnObservations();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int[]  observations  =  getReturnObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  observations  =  getReturnObservations();	      final    int[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
72	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getFields();  [CE]  cannot  find  symbol  [FE]    NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  WeightedObservedPoint[]  observations  =  getFields();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getFields();	      final    WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
73	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardObservations();  [CE]  cannot  find  symbol  [FE]      NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getStandardObservations();	      final    WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
74	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getAllObservations();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  WeightedObservedPoint[]  observations  =  getAllObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getAllObservations();	      final    WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
75	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardParameters();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  WeightedObservedPoint[]  observations  =  getStandardParameters();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  getStandardParameters();	      final    WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
76	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.fns.getObservations();  [CE]  cannot  find  symbol  fns  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.fns.getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  this.fns.getObservations();	      final    WeightedObservedPoint[]    observations    =    f.getObservations();    	non-compiled	[CE]  cannot  find  symbol  fns	5	None	replace
77	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(this);  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  double[]  observations  =  getObservations().toArray(this);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(this);	      double[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
78	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(requiredPoints);  [CE]  cannot  find  symbol  requiredPoints  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  double[]  observations  =  getObservations().toArray(requiredPoints);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(requiredPoints);	      double[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol  requiredPoints	19	None	replace
79	[BUG]  [BUGGY]  final  int  initialGuess  =  getInitialGuess()  -  1;  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int  initialGuess  =  getInitialGuess()  -  1;  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getInitialGuess()  -  1;	      final    int    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
80	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[references.size()  ]);  [CE]  cannot  find  symbol  references  [FE]                NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[references.size()  ]);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(new  double[references.size()  ]);	      final    double[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol  references	14	None	replace
81	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().values();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  observations  =  getObservations().values();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().values();	      final    double[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
82	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments())).computeValues();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments())).computeValues();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments())).computeValues();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments())).guess();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
83	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments())).gauss();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments())).gauss();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments())).gauss();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments())).guess();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
84	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds())).computeValues();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds())).computeValues();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds())).computeValues();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds())).guess();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
85	[BUG]  [BUGGY]  final  int  initialGuess  =  getInitialValues();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int  initialGuess  =  getInitialValues();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  initialGuess  =  getInitialValues();	      final    int    initialGuess    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
86	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[0]);  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[0]);  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[0]);	  final    double[]    guess    =    getObservations().guess();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
87	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[temps.size()  ]);  [CE]  cannot  find  symbol  temps  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[temps.size()  ]);  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[temps.size()  ]);	  final    double[]    guess    =    getObservations().guess();    	non-compiled	[CE]  cannot  find  symbol  temps	9	None	replace
88	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())).gauss();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())).gauss();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())).gauss();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).guess();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
89	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())).computeValues();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())).computeValues();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())).computeValues();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).guess();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
90	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())).validate();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())).validate();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())).validate();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).guess();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
91	[BUG]  [BUGGY]  final  int[]  parameters  =  getParameters().toArray(parameters);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int[]  parameters  =  getParameters().toArray(parameters);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  parameters  =  getParameters().toArray(parameters);	      final    int[]    parameters    =    getParameters();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
92	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).guess();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters(),  getParameters())).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getParameters())).guess();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
93	[BUG]  [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.parameters.getObservations();  [CE]  cannot  find  symbol  parameters  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  WeightedObservedPoint[]  observations  =  this.parameters.getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  WeightedObservedPoint[]  observations  =  this.parameters.getObservations();	      final    WeightedObservedPoint[]    observations    =    f.getObservations();    	non-compiled	[CE]  cannot  find  symbol  parameters	5	None	replace
94	[BUG]  [BUGGY]  final  int[]  parameters  =  getParameters(getObservations());  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int[]  parameters  =  getParameters(getObservations());  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  parameters  =  getParameters(getObservations());	      final    int[]    parameters    =    getParameters();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
95	[BUG]  [BUGGY]  final  int[]  parameters  =  getParameterTypes();  [CE]  cannot  find  symbol  [FE]                  NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int[]  parameters  =  getParameterTypes();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  parameters  =  getParameterTypes();	      final    int[]    parameters    =    getParameters();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
96	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters())).guess();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters())).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments(),  getParameters())).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArguments())).guess();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
97	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters())).guess();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters())).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameters())).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs())).guess();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
98	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameterTypes())).guess();  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameterTypes())).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs(),  getParameterTypes())).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getStandardArgs())).guess();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
99	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount())).guess();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount())).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds(),  getParameterCount())).guess();	  final    double[]    guess    =(new    ParameterGuesser(getSeconds())).guess();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
100	[BUG]  [BUGGY]      final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observations  =  getObservations().getObservations();  [CE]  variable  observations  is  already  defined  in  method  fit()  [FE]    NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]      final  WeightedObservedPoint[]  observations  =  getObservations();  final  WeightedObservedPoint[]  observations  =  getObservations().getObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	        final    WeightedObservedPoint[]    observations    =    getObservations();    final  WeightedObservedPoint[]  observations  =  getObservations().getObservations();	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit()	1	None	add
101	[BUG]  [BUGGY]  final  int  parameters  =  getParameterCount();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int  parameters  =  getParameterCount();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int  parameters  =  getParameterCount();	      final    int    parameters    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
102	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).guess();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameters())).guess();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).guess();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
103	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount())).guess();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount())).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint(),  getParameterCount())).guess();	  final    double[]    guess    =(new    ParameterGuesser(getReturnPoint())).guess();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
104	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[returnValues()  ]);  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[returnValues()  ]);  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[returnValues()  ]);	  final    double[]    guess    =    getObservations().guess();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
105	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[references.size()  ]);  [CE]  cannot  find  symbol  references  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  getObservations().toArray(new  double[references.size()  ]);  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().toArray(new  double[references.size()  ]);	  final    double[]    guess    =    getObservations().guess();    	non-compiled	[CE]  cannot  find  symbol  references	9	None	replace
106	[BUG]  [BUGGY]  final  int[]  observations  =  getObservations().toArray(new  int[references.size()  ]);  [CE]  cannot  find  symbol  references  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  int[]  observations  =  getObservations().toArray(new  int[references.size()  ]);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  int[]  observations  =  getObservations().toArray(new  int[references.size()  ]);	      final    int[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol  references	3	None	replace
107	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[returnValues.size()  ]);  [CE]  cannot  find  symbol  returnValues  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[returnValues.size()  ]);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[returnValues.size()  ]);	      double[]    observations    =    getObservations().toArray(new    double[references.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  returnValues	20	None	replace
108	[BUG]  [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[returnNull()  ]);  [CE]  cannot  find  symbol  [FE]                NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  observations  =  getObservations().toArray(new  double[returnNull()  ]);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  observations  =  getObservations().toArray(new  double[returnNull()  ]);	      final    double[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
109	[BUG]  [BUGGY]  g2.setFont(getFallThroughFunctions());  [CE]  cannot  find  symbol  [FE]              NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  g2.setFont(getFallThroughFunctions());  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	g2.setFont(getFallThroughFunctions());	      g2.setFont(getFunctionStandardFunctions());    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
110	[BUG]  [BUGGY]  double[]  observations  =  getStandardObservations();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  double[]  observations  =  getStandardObservations();  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getStandardObservations();	      double[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
111	[BUG]  [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[results.size()  ]);  [CE]  cannot  find  symbol  results  [FE]            NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  double[]  observations  =  getObservations().toArray(new  double[results.size()  ]);  [BUGGY]    final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	double[]  observations  =  getObservations().toArray(new  double[results.size()  ]);	      double[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol  results	19	None	replace
112	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).guess();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).guess();  [BUGGY]    return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations(),  getParameters())).guess();	  final    double[]    guess    =    (new    ParameterGuesser(getEvaluations())).guess();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
