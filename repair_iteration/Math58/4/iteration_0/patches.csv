bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NotStrictlyPositiveException  [FE]    NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]    final  WeightedObservedPoint[]  observations  =  getObservations();  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	add	    final  WeightedObservedPoint[]  observations  =  getObservations();		compilable	  [FE]  NotStrictlyPositiveException  	8	1	add
2	[BUG]  [BUGGY]    final  WeightedObservedPoint[]  observations  =  getObservations();  [FE]  NotStrictlyPositiveException  [FE]    NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]    final  WeightedObservedPoint[]  observations  =  getObservations();  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	    final  WeightedObservedPoint[]  observations  =  getObservations();		compilable	  [FE]  NotStrictlyPositiveException  	8	1	add
3	[BUG]  [BUGGY]    final  int[]  observations  =  getObservations();  [CE]  incompatible  types  [FE]      NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]    final  int[]  observations  =  getObservations();  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	    final  int[]  observations  =  getObservations();		non-compiled	[CE]  incompatible  types	8	None	add
4	[BUG]  [BUGGY]    final  int[]  initialGuess  =  getInitialGuess();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]    final  int[]  initialGuess  =  getInitialGuess();  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	    final  int[]  initialGuess  =  getInitialGuess();		non-compiled	[CE]  cannot  find  symbol	8	None	add
5	[BUG]  [BUGGY]    final  WeightedObservedPoint[]  observations  =  f.getObservations();  [CE]  cannot  find  symbol  f  [FE]          NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]    final  WeightedObservedPoint[]  observations  =  f.getObservations();  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	    final  WeightedObservedPoint[]  observations  =  f.getObservations();		non-compiled	[CE]  cannot  find  symbol  f	8	None	add
6	[BUG]  [BUGGY]    final  int[]  parameters  =  getParameters();  [CE]  cannot  find  symbol  [FE]            NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]    final  int[]  parameters  =  getParameters();  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	    final  int[]  parameters  =  getParameters();		non-compiled	[CE]  cannot  find  symbol	8	None	add
7	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds())).guess();  [CE]  cannot  find  symbol  [FE]    NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getSeconds())).guess();  [BUGGY]  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getSeconds())).guess();	final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
8	[BUG]  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())).guess();  [CE]  cannot  find  symbol  [FE]      NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]  final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())).guess();  [BUGGY]  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =(new  ParameterGuesser(getReturnPoint())).guess();	final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
9	[BUG]  [BUGGY]  final  double[]  guess  =  getObservations().guess();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]  final  double[]  guess  =  getObservations().guess();  [BUGGY]  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  getObservations().guess();	final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
10	[BUG]  [BUGGY]    final  int  initialGuess  =  getInitialGuess();  [CE]  cannot  find  symbol  [FE]    NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]    final  int  initialGuess  =  getInitialGuess();  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	    final  int  initialGuess  =  getInitialGuess();		non-compiled	[CE]  cannot  find  symbol	8	None	add
11	[BUG]  [BUGGY]    final  int  initialGuess  =  getObservations();  [CE]  incompatible  types  [FE]      NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]    final  int  initialGuess  =  getObservations();  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	    final  int  initialGuess  =  getObservations();		non-compiled	[CE]  incompatible  types	8	None	add
12	[BUG]  [BUGGY]    final  int  parameters  =  getObservations();  [CE]  incompatible  types  [FE]        NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]    final  int  parameters  =  getObservations();  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	    final  int  parameters  =  getObservations();		non-compiled	[CE]  incompatible  types	8	None	add
13	[BUG]  [BUGGY]    final  int  initialGuess  =  getObservations().size();  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]    final  int  initialGuess  =  getObservations().size();  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	    final  int  initialGuess  =  getObservations().size();		non-compiled	[CE]  cannot  find  symbol	8	None	add
14	[BUG]  [BUGGY]    final  double[]  observations  =  getObservations();  [CE]  incompatible  types  [FE]            NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]    final  double[]  observations  =  getObservations();  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	    final  double[]  observations  =  getObservations();		non-compiled	[CE]  incompatible  types	8	None	add
15	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters())).guess();  [CE]  cannot  find  symbol  [FE]    NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getParameters())).guess();  [BUGGY]  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getParameters())).guess();	final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
16	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations())).guess();  [CE]  cannot  find  symbol  [FE]      NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getEvaluations())).guess();  [BUGGY]  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getEvaluations())).guess();	final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
17	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs())).guess();  [CE]  cannot  find  symbol  [FE]        NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs())).guess();  [BUGGY]  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArgs())).guess();	final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
18	[BUG]  [BUGGY]    double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ]);  [CE]  cannot  find  symbol  [FE]    NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]    double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ]);  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	    double[]  observations  =  getObservations().toArray(new  double[getObservations().size()  ]);		non-compiled	[CE]  cannot  find  symbol	8	None	add
19	[BUG]  [BUGGY]    double[]  observations  =  getObservations();  [CE]  incompatible  types  [FE]      NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]    double[]  observations  =  getObservations();  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	    double[]  observations  =  getObservations();		non-compiled	[CE]  incompatible  types	8	None	add
20	[BUG]  [BUGGY]    double[]  observations  =  getObservations().toArray(new  double[references.size()  ]);  [CE]  cannot  find  symbol  references  [FE]        NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]    double[]  observations  =  getObservations().toArray(new  double[references.size()  ]);  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	    double[]  observations  =  getObservations().toArray(new  double[references.size()  ]);		non-compiled	[CE]  cannot  find  symbol  references	8	None	add
21	[BUG]  [BUGGY]    g2.setFont(getFunctionStandardFunctions());  [CE]  cannot  find  symbol  [FE]          NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]    g2.setFont(getFunctionStandardFunctions());  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	    g2.setFont(getFunctionStandardFunctions());		non-compiled	[CE]  cannot  find  symbol	8	None	add
22	[BUG]  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments())).guess();  [CE]  cannot  find  symbol  [FE]    NotStrictlyPositiveException  [CONTEXT]  public  double[]  fit()  {  [BUGGY]  final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments())).guess();  [BUGGY]  return  fit(new  Gaussian.Parametric(),  guess);  }  [CLASS]  GaussianFitter  1  ParameterGuesser  1  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  ParametricUnivariateRealFunction  f  g  boolean  WeightedObservedPoint[]  observations  double[]  guess  initialGuess  p  parameters  v  	projects/Math58/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java	0.35355339059327373	120	120	1	replace	final  double[]  guess  =  (new  ParameterGuesser(getStandardArguments())).guess();	final  double[]  guess  =  (new  ParameterGuesser(getObservations())).guess();  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
