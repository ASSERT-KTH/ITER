bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(timezoneIndicator!=  null  ||!timezoneIndicator.equals(cleaned))  {  [CE]  incomparable  types:  char  and  <null>  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator!=  null  ||!timezoneIndicator.equals(cleaned))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator!=  null  ||!timezoneIndicator.equals(cleaned))  {	  }    else    if(timezoneIndicator    ==    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	11	None	replace
2	[BUG]  [BUGGY]  }  else  if(timezoneIndicator  ==  null  ||!timezoneIndicator.equals(cleaned))  {  [CE]  incomparable  types:  char  and  <null>  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator  ==  null  ||!timezoneIndicator.equals(cleaned))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator  ==  null  ||!timezoneIndicator.equals(cleaned))  {	  }    else    if(timezoneIndicator    ==    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	11	None	replace
3	[BUG]  [BUGGY]  }  else  if(timezoneIndicator!=  null  ||  timezoneIndicator.equals(cleaned))  {  [CE]  incomparable  types:  char  and  <null>  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator!=  null  ||  timezoneIndicator.equals(cleaned))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator!=  null  ||  timezoneIndicator.equals(cleaned))  {	  }    else    if(timezoneIndicator    ==    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	11	None	replace
4	[BUG]  [BUGGY]  }  else  if(timezoneIndicator!=  null  ||  cleaned.equals(timezoneIndicator))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator!=  null  ||  cleaned.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator!=  null  ||  cleaned.equals(timezoneIndicator))  {	  }    else    if(timezoneIndicator    ==    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	11	None	replace
5	[BUG]  [BUGGY]  }  else  if(cleaned  ==  null  ||!cleaned.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  cleaned  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned  ==  null  ||!cleaned.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned  ==  null  ||!cleaned.equals(timezoneIndicator))  {	  }    else    if(cleaned    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	12	None	replace
6	[BUG]  [BUGGY]  }  else  if(cleaned  ==  null  ||  cleaned.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  cleaned  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned  ==  null  ||  cleaned.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned  ==  null  ||  cleaned.equals(timezoneIndicator))  {	  }    else    if(cleaned    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	12	None	replace
7	[BUG]  [BUGGY]  }  else  if(cleaned  ==  null  ||!cleaned.equals(timezoneIndicator+ "' "))  {  [CE]  cannot  find  symbol  cleaned  [FE]                JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned  ==  null  ||!cleaned.equals(timezoneIndicator+ "' "))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned  ==  null  ||!cleaned.equals(timezoneIndicator+ "' "))  {	  }    else    if(cleaned    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	12	None	replace
8	[BUG]  [BUGGY]  }  else  if(cleaned  ==  null  ||  timezoneIndicator.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  cleaned  [FE]                  JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned  ==  null  ||  timezoneIndicator.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned  ==  null  ||  timezoneIndicator.equals(timezoneIndicator))  {	  }    else    if(cleaned    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	12	None	replace
9	[BUG]  [BUGGY]  }  else  if(cleaned  ==  null  ||!cleaned.equals(timezoneIndicator+ "'))  {  [CE]  unclosed  string  literal  [FE]                    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned  ==  null  ||!cleaned.equals(timezoneIndicator+ "'))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned  ==  null  ||!cleaned.equals(timezoneIndicator+ "'))  {	  }    else    if(cleaned    ==    null)    {    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
10	[BUG]  [BUGGY]  }  else  if(timezoneIndicator.equals(cleaned))  {  [CE]  cannot  find  symbol  cleaned  [FE]        JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator.equals(cleaned))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator.equals(cleaned))  {	  }    else    if(cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	1	None	replace
11	[BUG]  [BUGGY]  }  else  if(tz.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  tz  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(tz.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(tz.equals(timezoneIndicator))  {	  }    else    if(cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  tz	1	None	replace
12	[BUG]  [BUGGY]  }  else  if(hash.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  hash  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hash.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(hash.equals(timezoneIndicator))  {	  }    else    if(cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  hash	1	None	replace
13	[BUG]  [BUGGY]  }  else  if(str.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  str  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(str.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(str.equals(timezoneIndicator))  {	  }    else    if(cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  str	1	None	replace
14	[BUG]  [BUGGY]  }  else  if(timezoneIndicator.contains(cleaned))  {  [CE]  cannot  find  symbol  cleaned  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator.contains(cleaned))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator.contains(cleaned))  {	  }    else    if(cleaned.contains(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	3	None	replace
15	[BUG]  [BUGGY]  }  else  if(tz.contains(timezoneIndicator))  {  [CE]  cannot  find  symbol  tz  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(tz.contains(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(tz.contains(timezoneIndicator))  {	  }    else    if(cleaned.contains(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  tz	3	None	replace
16	[BUG]  [BUGGY]  }  else  if(!cleaned.contains(timezoneIndicator))  {  [CE]  cannot  find  symbol  cleaned  [FE]                JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!cleaned.contains(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!cleaned.contains(timezoneIndicator))  {	  }    else    if(cleaned.contains(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	3	None	replace
17	[BUG]  [BUGGY]  }  else  if(calendar.contains(timezoneIndicator))  {  [CE]  cannot  find  symbol  calendar  [FE]                  JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(calendar.contains(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(calendar.contains(timezoneIndicator))  {	  }    else    if(cleaned.contains(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  calendar	3	None	replace
18	[BUG]  [BUGGY]  }  else  if(date.contains(timezoneIndicator))  {  [CE]  method  contains  in  class  String  cannot  be  applied  to  given  types;  [FE]                    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(date.contains(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(date.contains(timezoneIndicator))  {	  }    else    if(cleaned.contains(timezoneIndicator))    {    	non-compiled	[CE]  method  contains  in  class  String  cannot  be  applied  to  given  types;	3	None	replace
19	[BUG]  [BUGGY]      if(!cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CE]  cannot  find  symbol  cleaned  [FE]    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]      if(!cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	        if(!cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }	  	non-compiled	[CE]  cannot  find  symbol  cleaned	8	None	add
20	[BUG]  [BUGGY]      if(cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [CE]  cannot  find  symbol  cleaned  [FE]      JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]      if(cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	        if(cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  }	  	non-compiled	[CE]  cannot  find  symbol  cleaned	8	None	add
21	[BUG]  [BUGGY]      if(!cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator: "  +  timezoneIndicator+ "  given,  resolves  to "  +timezone.getID());  }  [CE]  cannot  find  symbol  cleaned  [FE]        JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]      if(!cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator: "  +  timezoneIndicator+ "  given,  resolves  to "  +timezone.getID());  }  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	        if(!cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator: "  +  timezoneIndicator+ "  given,  resolves  to "  +timezone.getID());  }	  	non-compiled	[CE]  cannot  find  symbol  cleaned	8	None	add
22	[BUG]  [BUGGY]      if(!cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "',  resolves  to "  +timezone.getID());  }  [CE]  cannot  find  symbol  cleaned  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]      if(!cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "',  resolves  to "  +timezone.getID());  }  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	        if(!cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "',  resolves  to "  +timezone.getID());  }	  	non-compiled	[CE]  cannot  find  symbol  cleaned	8	None	add
23	[BUG]  [BUGGY]      if(!cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "'. ");  }  [CE]  cannot  find  symbol  cleaned  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]      if(!cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "'. ");  }  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	        if(!cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "'. ");  }	  	non-compiled	[CE]  cannot  find  symbol  cleaned	8	None	add
24	[BUG]  [BUGGY]      if(cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "'. ");  }  [CE]  cannot  find  symbol  cleaned  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]      if(cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "'. ");  }  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	        if(cleaned.equals(timezoneIndicator))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "'. ");  }	  	non-compiled	[CE]  cannot  find  symbol  cleaned	8	None	add
25	[BUG]  [BUGGY]  }  else  if(timezoneIndicator.getMessage()!=  null)  {  [CE]  char  cannot  be  dereferenced  [FE]        JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator.getMessage()!=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator.getMessage()!=  null)  {	  }    else    if(e.getMessage()!=    null)    {    	non-compiled	[CE]  char  cannot  be  dereferenced	13	None	replace
26	[BUG]  [BUGGY]  }  else  if(cleaned.getMessage()!=  null)  {  [CE]  cannot  find  symbol  cleaned  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned.getMessage()!=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned.getMessage()!=  null)  {	  }    else    if(e.getMessage()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	13	None	replace
27	[BUG]  [BUGGY]  }  else  if(timezone.getMessage()!=  null)  {  [CE]  cannot  find  symbol  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezone.getMessage()!=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezone.getMessage()!=  null)  {	  }    else    if(e.getMessage()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
28	[BUG]  [BUGGY]  }  else  if(tz.getMessage()!=  null)  {  [CE]  cannot  find  symbol  tz  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(tz.getMessage()!=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(tz.getMessage()!=  null)  {	  }    else    if(e.getMessage()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  tz	13	None	replace
29	[BUG]  [BUGGY]  }  else  if(date.getMessage()!=  null)  {  [CE]  cannot  find  symbol  [FE]                JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(date.getMessage()!=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(date.getMessage()!=  null)  {	  }    else    if(e.getMessage()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
30	[BUG]  [BUGGY]  }  else  if(timezoneIndicator.getMessage()  ==  null)  {  [CE]  char  cannot  be  dereferenced  [FE]                  JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator.getMessage()  ==  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator.getMessage()  ==  null)  {	  }    else    if(e.getMessage()!=    null)    {    	non-compiled	[CE]  char  cannot  be  dereferenced	13	None	replace
31	[BUG]  [BUGGY]  }  else  if(!cleaned.equals(timezoneIndicator+ "'   "))  {  [CE]  cannot  find  symbol  cleaned  [FE]                  JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!cleaned.equals(timezoneIndicator+ "'   "))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!cleaned.equals(timezoneIndicator+ "'   "))  {	  }    else    if(cleaned.equals(timezoneIndicator+   "'   "))    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	6	None	replace
32	[BUG]  [BUGGY]  }  else  if(cleaned.equals(timezoneIndicator+ "'))  {  [CE]  unclosed  string  literal  [FE]                    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned.equals(timezoneIndicator+ "'))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned.equals(timezoneIndicator+ "'))  {	  }    else    if(cleaned.equals(timezoneIndicator+   "'   "))    {    	non-compiled	[CE]  unclosed  string  literal	6	None	replace
33	[BUG]  [BUGGY]  }  else  if(cleaned.equals(date))  {  [CE]  cannot  find  symbol  cleaned  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned.equals(date))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned.equals(date))  {	  }    else    if(cleaned.equals(timezoneId))    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	4	None	replace
34	[BUG]  [BUGGY]  }  else  if(cleaned.equals(timezoneOffset))  {  [CE]  cannot  find  symbol  timezoneOffset  [FE]                JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned.equals(timezoneOffset))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned.equals(timezoneOffset))  {	  }    else    if(cleaned.equals(timezoneId))    {    	non-compiled	[CE]  cannot  find  symbol  timezoneOffset	4	None	replace
35	[BUG]  [BUGGY]  }  else  if(cleaned.equals(timezoneOutdicator))  {  [CE]  cannot  find  symbol  timezoneOutdicator  [FE]                  JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned.equals(timezoneOutdicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned.equals(timezoneOutdicator))  {	  }    else    if(cleaned.equals(timezoneId))    {    	non-compiled	[CE]  cannot  find  symbol  timezoneOutdicator	4	None	replace
36	[BUG]  [BUGGY]  }  else  if(cleaned.equals(TimeZone.UTC))  {  [CE]  cannot  find  symbol  UTC  [FE]                    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned.equals(TimeZone.UTC))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned.equals(TimeZone.UTC))  {	  }    else    if(cleaned.equals(timezoneId))    {    	non-compiled	[CE]  cannot  find  symbol  UTC	4	None	replace
37	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hasT)  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+   "' ");  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	add	}    else    if(hasT)    {    throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+   "' ");	  	compilable	  [FE]  JsonSyntaxException  	14	1	add
38	[BUG]  [BUGGY]  }  else  if(hasT)  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+   "' ");  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hasT)  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+   "' ");  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}    else    if(hasT)    {    throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+   "' ");	  	compilable	  [FE]  JsonSyntaxException  	14	1	add
39	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]      JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hasT)  {  if(hasT)  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+   "' ");  }  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	add	}    else    if(hasT)    {    if(hasT)  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+   "' ");  }	  	compilable	  [FE]  JsonSyntaxException  	14	1	add
40	[BUG]  [BUGGY]  }  else  if(hasT)  {  if(hasT)  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+   "' ");  }  [FE]  JsonSyntaxException  [FE]      JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hasT)  {  if(hasT)  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+   "' ");  }  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}    else    if(hasT)    {    if(hasT)  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+   "' ");  }	  	compilable	  [FE]  JsonSyntaxException  	14	1	add
41	[BUG]  [BUGGY]  }  else  if(timezoneIndicator!=  null  ||!cleaned.equals(timezoneIndicator))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator!=  null  ||!cleaned.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator!=  null  ||!cleaned.equals(timezoneIndicator))  {	  }    else    if(timezoneIndicator!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	5	None	replace
42	[BUG]  [BUGGY]  }  else  if(!cleaned.equals(date))  {  [CE]  cannot  find  symbol  cleaned  [FE]                    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!cleaned.equals(date))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!cleaned.equals(date))  {	  }    else    if(!cleaned.equals(timezoneId))    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	7	None	replace
43	[BUG]  [BUGGY]  }  else  if(!cleaned.equals(timezoneOffset))  {  [CE]  cannot  find  symbol  timezoneOffset  [FE]                      JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!cleaned.equals(timezoneOffset))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!cleaned.equals(timezoneOffset))  {	  }    else    if(!cleaned.equals(timezoneId))    {    	non-compiled	[CE]  cannot  find  symbol  timezoneOffset	7	None	replace
44	[BUG]  [BUGGY]  }  else  if(!cleaned.equals(timezoneOutdicator))  {  [CE]  cannot  find  symbol  timezoneOutdicator  [FE]                        JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!cleaned.equals(timezoneOutdicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!cleaned.equals(timezoneOutdicator))  {	  }    else    if(!cleaned.equals(timezoneId))    {    	non-compiled	[CE]  cannot  find  symbol  timezoneOutdicator	7	None	replace
45	[BUG]  [BUGGY]  }  else  if(!cleaned.equals(timezone))  {  [CE]  cannot  find  symbol  cleaned  [FE]                          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!cleaned.equals(timezone))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!cleaned.equals(timezone))  {	  }    else    if(!cleaned.equals(timezoneId))    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	7	None	replace
46	[BUG]  [BUGGY]  }  else  if(!timezoneIndicator.equals(cleaned))  {  [CE]  cannot  find  symbol  cleaned  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!timezoneIndicator.equals(cleaned))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!timezoneIndicator.equals(cleaned))  {	  }    else    if(!cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	2	None	replace
47	[BUG]  [BUGGY]  }  else  if(!utc.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  utc  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!utc.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!utc.equals(timezoneIndicator))  {	  }    else    if(!cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  utc	2	None	replace
48	[BUG]  [BUGGY]  }  else  if(!hashCode.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  hashCode  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!hashCode.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!hashCode.equals(timezoneIndicator))  {	  }    else    if(!cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  hashCode	2	None	replace
49	[BUG]  [BUGGY]  }  else  if(!hash.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  hash  [FE]                JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!hash.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!hash.equals(timezoneIndicator))  {	  }    else    if(!cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  hash	2	None	replace
50	[BUG]  [BUGGY]  }  else  if(!utf8.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  utf8  [FE]                  JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!utf8.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!utf8.equals(timezoneIndicator))  {	  }    else    if(!cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  utf8	2	None	replace
51	[BUG]  [BUGGY]  }  else  if(!str.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  str  [FE]                    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!str.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!str.equals(timezoneIndicator))  {	  }    else    if(!cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  str	2	None	replace
52	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hasT  ||  hasT)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	add	}  else  if(hasT  ||  hasT)  {	  }    else    if(hasT)    {    	compilable	  [FE]  JsonSyntaxException  	15	1	replace
53	[BUG]  [BUGGY]  }  else  if(hasT  ||  hasT)  {  [FE]  JsonSyntaxException  [FE]    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hasT  ||  hasT)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(hasT  ||  hasT)  {	  }    else    if(hasT)    {    	compilable	  [FE]  JsonSyntaxException  	15	1	replace
54	[BUG]  [BUGGY]  [FE]  JsonSyntaxException  [FE]      JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!hasT)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	add	}  else  if(!hasT)  {	  }    else    if(hasT)    {    	compilable	  [FE]  JsonSyntaxException  	15	1	replace
55	[BUG]  [BUGGY]  }  else  if(!hasT)  {  [FE]  JsonSyntaxException  [FE]      JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!hasT)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!hasT)  {	  }    else    if(hasT)    {    	compilable	  [FE]  JsonSyntaxException  	15	1	replace
56	[BUG]  [BUGGY]  }  else  if(hasT  &&  timezoneIndicator!=  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]        JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hasT  &&  timezoneIndicator!=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(hasT  &&  timezoneIndicator!=  null)  {	  }    else    if(hasT)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	15	None	replace
57	[BUG]  [BUGGY]  }  else  if(hasT  ||  timezoneIndicator!=  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hasT  ||  timezoneIndicator!=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(hasT  ||  timezoneIndicator!=  null)  {	  }    else    if(hasT)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	15	None	replace
58	[BUG]  [BUGGY]  }  else  if(hasT  ||  timezoneIndicator  ==  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hasT  ||  timezoneIndicator  ==  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(hasT  ||  timezoneIndicator  ==  null)  {	  }    else    if(hasT)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	15	None	replace
59	[BUG]  [BUGGY]  }  else  if(hasT  ||  hasCleaned)  {  [CE]  cannot  find  symbol  hasCleaned  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hasT  ||  hasCleaned)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(hasT  ||  hasCleaned)  {	  }    else    if(hasT)    {    	non-compiled	[CE]  cannot  find  symbol  hasCleaned	15	None	replace
60	[BUG]  [BUGGY]  }  else  if(cleaned  >=  null)  {  [CE]  cannot  find  symbol  cleaned  [FE]        JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned  >=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned  >=  null)  {	  }    else    if(cleaned!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	10	None	replace
61	[BUG]  [BUGGY]  }  else  if(priority!=  null)  {  [CE]  cannot  find  symbol  priority  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(priority!=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(priority!=  null)  {	  }    else    if(cleaned!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  priority	10	None	replace
62	[BUG]  [BUGGY]  }  else  if(calendar!=  null)  {  [CE]  cannot  find  symbol  calendar  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(calendar!=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(calendar!=  null)  {	  }    else    if(cleaned!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  calendar	10	None	replace
63	[BUG]  [BUGGY]  }  else  if(tz!=  null)  {  [CE]  cannot  find  symbol  tz  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(tz!=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(tz!=  null)  {	  }    else    if(cleaned!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  tz	10	None	replace
64	[BUG]  [BUGGY]  }  else  if(!cleaned.equals(TimeZone.UTC))  {  [CE]  cannot  find  symbol  UTC  [FE]                    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!cleaned.equals(TimeZone.UTC))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!cleaned.equals(TimeZone.UTC))  {	  }    else    if(!cleaned.equals(timezoneId))    {    	non-compiled	[CE]  cannot  find  symbol  UTC	7	None	replace
65	[BUG]  [BUGGY]  }  else  if(!cleaned.equals(timezoneIndex))  {  [CE]  cannot  find  symbol  timezoneIndex  [FE]                      JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!cleaned.equals(timezoneIndex))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!cleaned.equals(timezoneIndex))  {	  }    else    if(!cleaned.equals(timezoneId))    {    	non-compiled	[CE]  cannot  find  symbol  timezoneIndex	7	None	replace
66	[BUG]  [BUGGY]  }  else  if(!uTC_ID.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  uTC_ID  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!uTC_ID.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!uTC_ID.equals(timezoneIndicator))  {	  }    else    if(!cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  uTC_ID	2	None	replace
67	[BUG]  [BUGGY]  }  else  if(!hashZone.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  hashZone  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!hashZone.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!hashZone.equals(timezoneIndicator))  {	  }    else    if(!cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  hashZone	2	None	replace
68	[BUG]  [BUGGY]  }  else  if(!tz.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  tz  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!tz.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!tz.equals(timezoneIndicator))  {	  }    else    if(!cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  tz	2	None	replace
69	[BUG]  [BUGGY]  }  else  if(tz  ==  null)  {  [CE]  cannot  find  symbol  tz  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(tz  ==  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(tz  ==  null)  {	  }    else    if(cleaned    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  tz	12	None	replace
70	[BUG]  [BUGGY]  }  else  if(priority  ==  null)  {  [CE]  cannot  find  symbol  priority  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(priority  ==  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(priority  ==  null)  {	  }    else    if(cleaned    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  priority	12	None	replace
71	[BUG]  [BUGGY]  }  else  if(lattice  ==  null)  {  [CE]  cannot  find  symbol  lattice  [FE]                JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(lattice  ==  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(lattice  ==  null)  {	  }    else    if(cleaned    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  lattice	12	None	replace
72	[BUG]  [BUGGY]  }  else  if(hash  ==  null)  {  [CE]  cannot  find  symbol  hash  [FE]                  JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hash  ==  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(hash  ==  null)  {	  }    else    if(cleaned    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  hash	12	None	replace
73	[BUG]  [BUGGY]  }  else  if(cleaned.equals(timezoneIndex))  {  [CE]  cannot  find  symbol  timezoneIndex  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned.equals(timezoneIndex))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned.equals(timezoneIndex))  {	  }    else    if(cleaned.equals(timezoneId))    {    	non-compiled	[CE]  cannot  find  symbol  timezoneIndex	4	None	replace
74	[BUG]  [BUGGY]      JsonSyntaxException  e  =  new  JsonSyntaxException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  [CE]  cannot  find  symbol  [FE]    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]      JsonSyntaxException  e  =  new  JsonSyntaxException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	        JsonSyntaxException  e  =  new  JsonSyntaxException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "' ");	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
75	[BUG]  [BUGGY]      JsonSyntaxException  e  =  new  JsonSyntaxException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "'. ");  [CE]  cannot  find  symbol  [FE]      JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]      JsonSyntaxException  e  =  new  JsonSyntaxException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "'. ");  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	        JsonSyntaxException  e  =  new  JsonSyntaxException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+ "'. ");	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
76	[BUG]  [BUGGY]      if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  i++)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.set(Calendar.DATE,  calendar.get(i),  calendar.get(i));  }  [CE]  'catch'  without  'try'  [FE]        JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]      if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  i++)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.set(Calendar.DATE,  calendar.get(i),  calendar.get(i));  }  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	        if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  i++)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.set(Calendar.DATE,  calendar.get(i),  calendar.get(i));  }	  	non-compiled	[CE]  'catch'  without  'try'	8	None	add
77	[BUG]  [BUGGY]      if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  i++)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.remove(calendar.get(i),  calendar.get(i));  }  [CE]  'catch'  without  'try'  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]      if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  i++)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.remove(calendar.get(i),  calendar.get(i));  }  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	        if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  i++)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.remove(calendar.get(i),  calendar.get(i));  }	  	non-compiled	[CE]  'catch'  without  'try'	8	None	add
78	[BUG]  [BUGGY]      if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  i++)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.set(calendar,  calendar.get(i),  calendar.get(i));  }  [CE]  'catch'  without  'try'  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]      if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  i++)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.set(calendar,  calendar.get(i),  calendar.get(i));  }  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	        if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  i++)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.set(calendar,  calendar.get(i),  calendar.get(i));  }	  	non-compiled	[CE]  'catch'  without  'try'	8	None	add
79	[BUG]  [BUGGY]      if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  i++)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.set(calendar,  calendar.get(i),  calendar.get(i).getTime());  }  [CE]  'catch'  without  'try'  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]      if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  i++)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.set(calendar,  calendar.get(i),  calendar.get(i).getTime());  }  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	        if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  i++)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.set(calendar,  calendar.get(i),  calendar.get(i).getTime());  }	  	non-compiled	[CE]  'catch'  without  'try'	8	None	add
80	[BUG]  [BUGGY]      if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  ++i)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.set(calendar,  calendar.get(i),  calendar.get(i).getTime());  }  [CE]  'catch'  without  'try'  [FE]                JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]      if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  ++i)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.set(calendar,  calendar.get(i),  calendar.get(i).getTime());  }  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	        if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  ++i)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.set(calendar,  calendar.get(i),  calendar.get(i).getTime());  }	  	non-compiled	[CE]  'catch'  without  'try'	8	None	add
81	[BUG]  [BUGGY]      if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  ++i)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.setTime(calendar.get(i),  calendar.get(i).getTime());  }  [CE]  'catch'  without  'try'  [FE]                  JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]      if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  ++i)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.setTime(calendar.get(i),  calendar.get(i).getTime());  }  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	        if(timezoneIndicator!=  null)  {  for(int  i  =  0;  i  <  timezoneIndicator.size();  ++i)  {  Calendar  calendar  =  Calendar.getInstance(i);  calendar.setTime(calendar.get(i),  calendar.get(i).getTime());  }	  	non-compiled	[CE]  'catch'  without  'try'	8	None	add
82	[BUG]  [BUGGY]  }  else  if(timezoneIndicator!=  null  ||!timezoneIndicator.equals(timezoneIndicator))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator!=  null  ||!timezoneIndicator.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator!=  null  ||!timezoneIndicator.equals(timezoneIndicator))  {	  }    else    if(timezoneIndicator!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	5	None	replace
83	[BUG]  [BUGGY]  }  else  if(timezoneIndicator!=  null  ||  timezoneIndicator.equals(timezoneIndicator))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                  JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator!=  null  ||  timezoneIndicator.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator!=  null  ||  timezoneIndicator.equals(timezoneIndicator))  {	  }    else    if(timezoneIndicator!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	5	None	replace
84	[BUG]  [BUGGY]  }  else  if(hasT  &&!timezoneIndicator.equals(cleaned))  {  [CE]  cannot  find  symbol  cleaned  [FE]    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hasT  &&!timezoneIndicator.equals(cleaned))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(hasT  &&!timezoneIndicator.equals(cleaned))  {	  }    else    if(hasT)    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	15	None	replace
85	[BUG]  [BUGGY]  }  else  if(hasT  ||  isInvalidTimezone(timezoneIndicator))  {  [CE]  cannot  find  symbol  [FE]      JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hasT  ||  isInvalidTimezone(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(hasT  ||  isInvalidTimezone(timezoneIndicator))  {	  }    else    if(hasT)    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
86	[BUG]  [BUGGY]  }  else  if(seen.contains(timezoneIndicator))  {  [CE]  cannot  find  symbol  seen  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(seen.contains(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(seen.contains(timezoneIndicator))  {	  }    else    if(cleaned.contains(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  seen	3	None	replace
87	[BUG]  [BUGGY]  }  else  if(failed.getMessage()!=  null)  {  [CE]  cannot  find  symbol  failed  [FE]        JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(failed.getMessage()!=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(failed.getMessage()!=  null)  {	  }    else    if(e.getMessage()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  failed	13	None	replace
88	[BUG]  [BUGGY]  }  else  if(hasT)  {  JsonSyntaxException  e  =  new  JsonSyntaxException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+   "' ");  [CE]  cannot  find  symbol  [FE]    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hasT)  {  JsonSyntaxException  e  =  new  JsonSyntaxException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+   "' ");  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}    else    if(hasT)    {    JsonSyntaxException  e  =  new  JsonSyntaxException( "Invalid  time  zone  indicator  ' "  +  timezoneIndicator+   "' ");	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
89	[BUG]  [BUGGY]  }  else  if(hashZone!=  null)  {  [CE]  cannot  find  symbol  hashZone  [FE]        JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hashZone!=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(hashZone!=  null)  {	  }    else    if(cleaned!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  hashZone	10	None	replace
90	[BUG]  [BUGGY]  }  else  if(lattice!=  null)  {  [CE]  cannot  find  symbol  lattice  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(lattice!=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(lattice!=  null)  {	  }    else    if(cleaned!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  lattice	10	None	replace
91	[BUG]  [BUGGY]  }  else  if(timezoneIndicator.equals(timezoneIndicator+ "'   "))  {  [CE]  char  cannot  be  dereferenced  [FE]                  JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator.equals(timezoneIndicator+ "'   "))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator.equals(timezoneIndicator+ "'   "))  {	  }    else    if(cleaned.equals(timezoneIndicator+   "'   "))    {    	non-compiled	[CE]  char  cannot  be  dereferenced	6	None	replace
92	[BUG]  [BUGGY]  }  else  if(e.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  e  [FE]        JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(e.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(e.equals(timezoneIndicator))  {	  }    else    if(cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  e	1	None	replace
93	[BUG]  [BUGGY]  }  else  if(false.equals(timezoneIndicator))  {  [CE]  boolean  cannot  be  dereferenced  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(false.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(false.equals(timezoneIndicator))  {	  }    else    if(cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	1	None	replace
94	[BUG]  [BUGGY]  }  else  if(timezoneIndicator  ==  null  ||!timezoneIndicator.equals(timezoneIndicator))  {  [CE]  incomparable  types:  char  and  <null>  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator  ==  null  ||!timezoneIndicator.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator  ==  null  ||!timezoneIndicator.equals(timezoneIndicator))  {	  }    else    if(timezoneIndicator    ==    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	11	None	replace
95	[BUG]  [BUGGY]  }  else  if(cleaned.equals(timezoneIndicator)&&!cleaned.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  cleaned  [FE]        JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned.equals(timezoneIndicator)&&!cleaned.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned.equals(timezoneIndicator)&&!cleaned.equals(timezoneIndicator))  {	  }    else    if(cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	1	None	replace
96	[BUG]  [BUGGY]  }  else  if(cleaned.equals(timezoneIndicator)&&!removed.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  cleaned  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned.equals(timezoneIndicator)&&!removed.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned.equals(timezoneIndicator)&&!removed.equals(timezoneIndicator))  {	  }    else    if(cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	1	None	replace
97	[BUG]  [BUGGY]  }  else  if(cleaned.equals(timezoneIndicator)&&!tz.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  cleaned  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned.equals(timezoneIndicator)&&!tz.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned.equals(timezoneIndicator)&&!tz.equals(timezoneIndicator))  {	  }    else    if(cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  cleaned	1	None	replace
98	[BUG]  [BUGGY]  }  else  if(!cleaned.equals(timezoneSecond))  {  [CE]  cannot  find  symbol  timezoneSecond  [FE]                    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!cleaned.equals(timezoneSecond))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!cleaned.equals(timezoneSecond))  {	  }    else    if(!cleaned.equals(timezoneId))    {    	non-compiled	[CE]  cannot  find  symbol  timezoneSecond	7	None	replace
99	[BUG]  [BUGGY]  }  else  if(hasT  &&  timezoneIndicator  ==  null)  {  [CE]  incomparable  types:  char  and  <null>  [FE]    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hasT  &&  timezoneIndicator  ==  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(hasT  &&  timezoneIndicator  ==  null)  {	  }    else    if(hasT)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	15	None	replace
100	[BUG]  [BUGGY]  }  else  if(hasT  &&  timezoneIndicator  >=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(hasT  &&  timezoneIndicator  >=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(hasT  &&  timezoneIndicator  >=  null)  {	  }    else    if(hasT)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	15	None	replace
101	[BUG]  [BUGGY]  if(!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator: "+timezoneIndicator+ "  given,  resolves  to "  +timezone.getID());  }  [CE]  cannot  find  symbol  timezoneId  [FE]    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  if(!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator: "+timezoneIndicator+ "  given,  resolves  to "  +timezone.getID());  }  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	if(!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException( "Invalid  time  zone  indicator: "+timezoneIndicator+ "  given,  resolves  to "  +timezone.getID());  }	      	non-compiled	[CE]  cannot  find  symbol  timezoneId	9	None	replace
102	[BUG]  [BUGGY]  }  else  if(cleaned.equals(timezoneSecond))  {  [CE]  cannot  find  symbol  timezoneSecond  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(cleaned.equals(timezoneSecond))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(cleaned.equals(timezoneSecond))  {	  }    else    if(cleaned.equals(timezoneId))    {    	non-compiled	[CE]  cannot  find  symbol  timezoneSecond	4	None	replace
103	[BUG]  [BUGGY]  }  else  if(calendar  ==  null)  {  [CE]  cannot  find  symbol  calendar  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(calendar  ==  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(calendar  ==  null)  {	  }    else    if(cleaned    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  calendar	12	None	replace
104	[BUG]  [BUGGY]  }  else  if(timezoneIndicator!=  null  &&  timezoneIndicator.equals(timezoneIndicator))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator!=  null  &&  timezoneIndicator.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator!=  null  &&  timezoneIndicator.equals(timezoneIndicator))  {	  }    else    if(timezoneIndicator!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	5	None	replace
105	[BUG]  [BUGGY]  }  else  if(timezoneIndicator!=  null  &&  timezoneIndicator.equals(cleaned))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                  JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator!=  null  &&  timezoneIndicator.equals(cleaned))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator!=  null  &&  timezoneIndicator.equals(cleaned))  {	  }    else    if(timezoneIndicator!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	5	None	replace
106	[BUG]  [BUGGY]  }  else  if(timezoneIndicator!=  null  &&  cleaned.equals(timezoneIndicator))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                    JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator!=  null  &&  cleaned.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator!=  null  &&  cleaned.equals(timezoneIndicator))  {	  }    else    if(timezoneIndicator!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	5	None	replace
107	[BUG]  [BUGGY]  }  else  if(timezoneIndicator!=  null  &&  timezoneIndicator.equals( " "))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                      JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator!=  null  &&  timezoneIndicator.equals( " "))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator!=  null  &&  timezoneIndicator.equals( " "))  {	  }    else    if(timezoneIndicator!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	5	None	replace
108	[BUG]  [BUGGY]  }  else  if(timezoneIndicator!=  null  &&!timezoneIndicator.equals(cleaned))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                        JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator!=  null  &&!timezoneIndicator.equals(cleaned))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator!=  null  &&!timezoneIndicator.equals(cleaned))  {	  }    else    if(timezoneIndicator!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	5	None	replace
109	[BUG]  [BUGGY]  }  else  if(timezoneIndicator!=  null  &&  TimeZone.isInstance(timezoneIndicator))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator!=  null  &&  TimeZone.isInstance(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator!=  null  &&  TimeZone.isInstance(timezoneIndicator))  {	  }    else    if(timezoneIndicator!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	5	None	replace
110	[BUG]  [BUGGY]  }  else  if(timezoneIndicator!=  null  &&  timezoneIndicator.length()  >  0)  {  [CE]  incomparable  types:  char  and  <null>  [FE]                            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator!=  null  &&  timezoneIndicator.length()  >  0)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator!=  null  &&  timezoneIndicator.length()  >  0)  {	  }    else    if(timezoneIndicator!=    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	5	None	replace
111	[BUG]  [BUGGY]  }  else  if(!indicator.equals(timezoneIndicator))  {  [CE]  cannot  find  symbol  indicator  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(!indicator.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(!indicator.equals(timezoneIndicator))  {	  }    else    if(!cleaned.equals(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  indicator	2	None	replace
112	[BUG]  [BUGGY]  }  else  if(color.contains(timezoneIndicator))  {  [CE]  cannot  find  symbol  color  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(color.contains(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(color.contains(timezoneIndicator))  {	  }    else    if(cleaned.contains(timezoneIndicator))    {    	non-compiled	[CE]  cannot  find  symbol  color	3	None	replace
113	[BUG]  [BUGGY]  }  else  if(false.contains(timezoneIndicator))  {  [CE]  boolean  cannot  be  dereferenced  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(false.contains(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(false.contains(timezoneIndicator))  {	  }    else    if(cleaned.contains(timezoneIndicator))    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	3	None	replace
114	[BUG]  [BUGGY]  }  else  if(timezoneIndicator  ==  null  ||  cleaned.equals(timezoneIndicator))  {  [CE]  incomparable  types:  char  and  <null>  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator  ==  null  ||  cleaned.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator  ==  null  ||  cleaned.equals(timezoneIndicator))  {	  }    else    if(timezoneIndicator    ==    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	11	None	replace
115	[BUG]  [BUGGY]  }  else  if(timezoneIndicator  ==  null  ||  timezoneIndicator.equals(cleaned))  {  [CE]  incomparable  types:  char  and  <null>  [FE]            JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator  ==  null  ||  timezoneIndicator.equals(cleaned))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator  ==  null  ||  timezoneIndicator.equals(cleaned))  {	  }    else    if(timezoneIndicator    ==    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	11	None	replace
116	[BUG]  [BUGGY]  }  else  if(timezoneIndicator  ==  null  &&  timezoneIndicator.equals(timezoneIndicator))  {  [CE]  incomparable  types:  char  and  <null>  [FE]              JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator  ==  null  &&  timezoneIndicator.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator  ==  null  &&  timezoneIndicator.equals(timezoneIndicator))  {	  }    else    if(timezoneIndicator    ==    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	11	None	replace
117	[BUG]  [BUGGY]  }  else  if(timezoneIndicator  ==  null  ||!cleaned.equals(timezoneIndicator))  {  [CE]  incomparable  types:  char  and  <null>  [FE]                JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(timezoneIndicator  ==  null  ||!cleaned.equals(timezoneIndicator))  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(timezoneIndicator  ==  null  ||!cleaned.equals(timezoneIndicator))  {	  }    else    if(timezoneIndicator    ==    null)    {    	non-compiled	[CE]  incomparable  types:  char  and  <null>	11	None	replace
118	[BUG]  [BUGGY]  }  else  if(stubbed.getMessage()!=  null)  {  [CE]  cannot  find  symbol  stubbed  [FE]        JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(stubbed.getMessage()!=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(stubbed.getMessage()!=  null)  {	  }    else    if(e.getMessage()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  stubbed	13	None	replace
119	[BUG]  [BUGGY]  }  else  if(calendar.getMessage()!=  null)  {  [CE]  cannot  find  symbol  calendar  [FE]          JsonSyntaxException    [CONTEXT]        String  cleaned  =  act.replace(   ":   ",     "   ");  if  (!cleaned.equals(timezoneId))  {  throw  new  IndexOutOfBoundsException(   "Mismatching  time  zone  indicator:     "+timezoneId+   "  given,  resolves  to     "  +timezone.getID());  }  }  }    [BUGGY]  }  else  if(calendar.getMessage()!=  null)  {  [BUGGY]    throw  new  IndexOutOfBoundsException(   "Invalid  time  zone  indicator  '   "  +  timezoneIndicator+   "'   ");  }  [CLASS]  ISO8601Utils  [METHOD]  parse  [RETURN_TYPE]  Date  String  date  ParsePosition  pos  [VARIABLES]  TimeZone  TIMEZONE_UTC  timezone  tz  boolean  hasT  IndexOutOfBoundsException  e  Calendar  calendar  char  c  timezoneIndicator  NumberFormatException  e  String  UTC_ID  act  cleaned  date  input  msg  timezoneId  timezoneOffset  ParseException  ex  Exception  fail  int  day  endOffset  fraction  hour  milliseconds  minutes  month  offset  parseEndOffset  seconds  year  IllegalArgumentException  e  ParsePosition  pos  	projects/Gson5/gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java	1.0	243	243	1	replace	}  else  if(calendar.getMessage()!=  null)  {	  }    else    if(e.getMessage()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  calendar	13	None	replace
