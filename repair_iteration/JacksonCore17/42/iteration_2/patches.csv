bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_VALUE)    {    if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
2	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_VALUE)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
3	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  if(status  >=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  if(status  >=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_VALUE)    {    if(status  >=  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
4	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  if(status  >>  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  if(status  >>  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_VALUE)    {    if(status  >>  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
5	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	2	2	replace
6	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	2	2	replace
7	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
8	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
9	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
10	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
11	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FOR)  {  [CE]  cannot  find  symbol  STATUS_FOR  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FOR)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_FOR)  {	  if(status    ==    JsonWriteContext.STATUS_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_FOR	13	None	replace
12	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	37	2	replace
13	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	37	2	replace
14	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	37	1	replace
15	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	37	1	replace
16	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	37	2	replace
17	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [FE]  JsonGenerationException  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	37	2	replace
18	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
19	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
20	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
21	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
22	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]            JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
23	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  int  typeMsg  =  _writeContext.getTypeMsg();  }  [CE]  illegal  start  of  type  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  int  typeMsg  =  _writeContext.getTypeMsg();  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  int  typeMsg  =  _writeContext.getTypeMsg();  }	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
24	[BUG]  [BUGGY]  Integer  typeMsg  =  _writeContext.getTypeMsg();  [CE]  illegal  start  of  type  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  Integer  typeMsg  =  _writeContext.getTypeMsg();  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	Integer  typeMsg  =  _writeContext.getTypeMsg();	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
25	[BUG]  [BUGGY]  char  typeMsg  =  _writeContext.getTypeMsg();  [CE]  illegal  start  of  type  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  char  typeMsg  =  _writeContext.getTypeMsg();  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	char  typeMsg  =  _writeContext.getTypeMsg();	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
26	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK)  {  if(status  ==  JsonWriteContext.STATUS_OK)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK)  {  if(status  ==  JsonWriteContext.STATUS_OK)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK)    {    if(status  ==  JsonWriteContext.STATUS_OK)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
27	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK)  {  if(status!=  JsonWriteContext.STATUS_OK)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK)  {  if(status!=  JsonWriteContext.STATUS_OK)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK)    {    if(status!=  JsonWriteContext.STATUS_OK)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
28	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK)  {  if(status  >=  JsonWriteContext.STATUS_OK)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK)  {  if(status  >=  JsonWriteContext.STATUS_OK)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK)    {    if(status  >=  JsonWriteContext.STATUS_OK)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
29	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	46	2	replace
30	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	46	2	replace
31	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	46	1	replace
32	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	46	1	replace
33	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	46	2	replace
34	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [FE]  JsonGenerationException  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	46	2	replace
35	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
36	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	9	None	add
37	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  [CE]  illegal  start  of  type  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
38	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: "  +  status);  [CE]  illegal  start  of  type  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: "  +  status);  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: "  +  status);	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	55	1	replace
40	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	55	1	replace
41	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	55	2	replace
42	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	55	2	replace
43	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	55	2	replace
44	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [FE]  JsonGenerationException  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	55	2	replace
45	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
46	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >>  _outputEnd)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >>  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >>  _outputEnd)  {  _flushBuffer();  }	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
47	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
48	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail!=  _outputEnd)  {  _flushBuffer();  }	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
49	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
50	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
51	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
52	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
53	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	21	1	replace
54	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [FE]  JsonGenerationException  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	21	1	replace
55	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	21	2	replace
56	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [FE]  JsonGenerationException  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	21	2	replace
57	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.FIELD_NAME)  {  [CE]  cannot  find  symbol  FIELD_NAME  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.FIELD_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.FIELD_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAME	24	None	replace
58	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_WARNING)  {  [CE]  cannot  find  symbol  STATUS_WARNING  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_WARNING)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_WARNING)  {	  if(status    ==    JsonWriteContext.STATUS_WARNING    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_WARNING	40	None	replace
59	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [CE]  illegal  start  of  expression  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
60	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  break;  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(_outputTail    >=    _outputEnd)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
61	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPR_RESULT)  {  if(_outputTail  >=  _outputEnd)  {  break;  }  [CE]  cannot  find  symbol  STATUS_EXPR_RESULT  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPR_RESULT)  {  if(_outputTail  >=  _outputEnd)  {  break;  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPR_RESULT)  {  if(_outputTail  >=  _outputEnd)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(_outputTail    >=    _outputEnd)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  STATUS_EXPR_RESULT	50	None	replace
62	[BUG]  [BUGGY]  _outputTail  =  _outputEnd;  [CE]  illegal  start  of  type  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  _outputTail  =  _outputEnd;  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	_outputTail  =  _outputEnd;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(_outputTail    >=    _outputEnd)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
63	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK  ||  status  ==  JsonWriteContext.STATUS_OK)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK  ||  status  ==  JsonWriteContext.STATUS_OK)  {	  if(status    ==    JsonWriteContext.STATUS_OK)    {    	compilable	  [FE]  JsonGenerationException  	28	2	replace
64	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK  ||  status  ==  JsonWriteContext.STATUS_OK)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK  ||  status  ==  JsonWriteContext.STATUS_OK)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK  ||  status  ==  JsonWriteContext.STATUS_OK)  {	  if(status    ==    JsonWriteContext.STATUS_OK)    {    	compilable	  [FE]  JsonGenerationException  	28	2	replace
65	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK  ||  status!=  JsonWriteContext.STATUS_OK)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK  ||  status!=  JsonWriteContext.STATUS_OK)  {	  if(status    ==    JsonWriteContext.STATUS_OK)    {    	compilable	  [FE]  JsonGenerationException  	28	2	replace
66	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK  ||  status!=  JsonWriteContext.STATUS_OK)  {  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK  ||  status!=  JsonWriteContext.STATUS_OK)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK  ||  status!=  JsonWriteContext.STATUS_OK)  {	  if(status    ==    JsonWriteContext.STATUS_OK)    {    	compilable	  [FE]  JsonGenerationException  	28	2	replace
67	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_CANCEL  ||  status  ==  JsonWriteContext.STATUS_OK)  {  [CE]  cannot  find  symbol  STATUS_CANCEL  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_CANCEL  ||  status  ==  JsonWriteContext.STATUS_OK)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_CANCEL  ||  status  ==  JsonWriteContext.STATUS_OK)  {	  if(status    ==    JsonWriteContext.STATUS_OK)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_CANCEL	28	None	replace
68	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FIELD_NAME)  {  [CE]  cannot  find  symbol  STATUS_FIELD_NAME  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FIELD_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_FIELD_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_RESULT)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_FIELD_NAME	14	None	replace
69	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    If(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
70	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
71	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
72	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_UNKNOWN)  {  [CE]  cannot  find  symbol  STATUS_UNKNOWN  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_UNKNOWN)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_UNKNOWN)  {	  if(status    ==    JsonWriteContext.STATUS_UNKNOWN    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_UNKNOWN	30	None	replace
73	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
74	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
75	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [CE]  illegal  start  of  type  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
76	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  [CE]  illegal  start  of  expression  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
77	[BUG]  [BUGGY]  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    If(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
78	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	41	1	replace
79	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [FE]  JsonGenerationException  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	41	1	replace
80	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	41	2	replace
81	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [FE]  JsonGenerationException  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	41	2	replace
82	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COM  [CE]  ')'  expected  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COM  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COM	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  ')'  expected	41	None	replace
83	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  int  typeMsg  =  _writeContext.getTypeMsg();  }  [CE]  illegal  start  of  type  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  int  typeMsg  =  _writeContext.getTypeMsg();  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  int  typeMsg  =  _writeContext.getTypeMsg();  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
84	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  int  typeMsg  =  _writeContext.getTypeMsg();  }  [CE]  illegal  start  of  type  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  int  typeMsg  =  _writeContext.getTypeMsg();  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  int  typeMsg  =  _writeContext.getTypeMsg();  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
85	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  int  typeMsg  =  _writeContext.getTypeMsg();  [CE]  variable  typeMsg  is  already  defined  in  method  _verifyValueWrite(String)  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  int  typeMsg  =  _writeContext.getTypeMsg();  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  int  typeMsg  =  _writeContext.getTypeMsg();	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  variable  typeMsg  is  already  defined  in  method  _verifyValueWrite(String)	43	None	replace
86	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
87	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  JsonGenerationException  	12	2	replace
88	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  JsonGenerationException  	12	2	replace
89	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  STATUS_ERROR  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_ERROR)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  STATUS_ERROR	12	None	replace
90	[BUG]  [BUGGY]  b  =  BYTE_BACKSLASH;  break;  [CE]  illegal  start  of  type  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  b  =  BYTE_BACKSLASH;  break;  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	b  =  BYTE_BACKSLASH;  break;	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_BACKSLASH;    break;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
91	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COLON;  break;  }  [CE]  illegal  start  of  type  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COLON;  break;  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COLON;  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_BACKSLASH;    break;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
92	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
93	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
94	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
95	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
96	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]            JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
97	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
98	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
99	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
100	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
101	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  illegal  start  of  expression  [FE]            JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
102	[BUG]  [BUGGY]  int  typeMsg  =  _writeContext.getTypeMsg(status);  [CE]  illegal  start  of  type  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  int  typeMsg  =  _writeContext.getTypeMsg(status);  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	int  typeMsg  =  _writeContext.getTypeMsg(status);	  int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
103	[BUG]  [BUGGY]  int  typeMsg  =  status.getTypeMsg();  [CE]  illegal  start  of  type  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  int  typeMsg  =  status.getTypeMsg();  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	int  typeMsg  =  status.getTypeMsg();	  int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
104	[BUG]  [BUGGY]  int  typeMsg  =  _writeContext.getTypeMsg()  +  1;  [CE]  illegal  start  of  type  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  int  typeMsg  =  _writeContext.getTypeMsg()  +  1;  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	int  typeMsg  =  _writeContext.getTypeMsg()  +  1;	  int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
105	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >>  _outputEnd)  {  _flushBuffer();  }  [CE]  incompatible  types  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >>  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >>  _outputEnd)  {  _flushBuffer();  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	non-compiled	[CE]  incompatible  types	52	None	replace
106	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	compilable	  [FE]  JsonGenerationException  	4	1	replace
107	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	compilable	  [FE]  JsonGenerationException  	4	1	replace
108	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	compilable	  [FE]  JsonGenerationException  	4	2	replace
109	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	compilable	  [FE]  JsonGenerationException  	4	2	replace
110	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
111	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  JsonGenerationException  	10	1	replace
112	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  JsonGenerationException  	10	1	replace
113	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  STATUS_ERROR  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_ERROR)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  STATUS_ERROR	10	None	replace
114	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPR_FIELD_NAME)  {  [CE]  cannot  find  symbol  STATUS_EXPR_FIELD_NAME  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPR_FIELD_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPR_FIELD_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_EXPR_RESULT)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_EXPR_FIELD_NAME	39	None	replace
115	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
116	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
117	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
118	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  ';'  expected  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
119	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_UNKNOWN    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	49	1	replace
120	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [FE]  JsonGenerationException  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_UNKNOWN    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	49	1	replace
121	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_UNKNOWN)  {  [CE]  cannot  find  symbol  STATUS_UNKNOWN  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_UNKNOWN)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_UNKNOWN)  {	  if(status    ==    JsonWriteContext.STATUS_UNKNOWN    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_UNKNOWN	49	None	replace
122	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_UNKNOWN    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	49	2	replace
123	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [FE]  JsonGenerationException  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_UNKNOWN    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	49	2	replace
124	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
125	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
126	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
127	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
128	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [CE]  cannot  find  symbol  STATUS_ERROR  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_ERROR  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_ERROR	35	None	replace
129	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_ERROR)  {  [CE]  cannot  find  symbol  STATUS_ERROR  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_ERROR)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status!=  JsonWriteContext.STATUS_ERROR)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_ERROR	35	None	replace
130	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_WARNING  ||  status  ==  JsonWriteContext.STATUS_ERROR)  {  [CE]  cannot  find  symbol  STATUS_WARNING  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_WARNING  ||  status  ==  JsonWriteContext.STATUS_ERROR)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_WARNING  ||  status  ==  JsonWriteContext.STATUS_ERROR)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_WARNING	35	None	replace
131	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_UNKNOWN  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  cannot  find  symbol  STATUS_UNKNOWN  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_UNKNOWN  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_UNKNOWN  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_UNKNOWN    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_UNKNOWN	30	None	replace
132	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
133	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
134	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }  [CE]  illegal  start  of  type  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
135	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " "));  }	  	non-compiled	[CE]  	9	None	add
136	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_MESSAGE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  cannot  find  symbol  STATUS_MESSAGE  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_MESSAGE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_MESSAGE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_MESSAGE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_MESSAGE	56	None	replace
137	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_WARNING  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [CE]  cannot  find  symbol  STATUS_WARNING  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_WARNING  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_WARNING  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_WARNING	35	None	replace
138	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_REASON)  {  [CE]  cannot  find  symbol  STATUS_REASON  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_REASON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_REASON)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_REASON	35	None	replace
139	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.EXPR_RESULT)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.EXPR_RESULT)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.EXPR_RESULT)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
140	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COM  [CE]  ')'  expected  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COM  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COM	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
141	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
142	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }  [CE]  illegal  start  of  type  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
143	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_UNKNOWN  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  cannot  find  symbol  STATUS_UNKNOWN  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_UNKNOWN  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_UNKNOWN  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_UNKNOWN    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_UNKNOWN	49	None	replace
144	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  cannot  find  symbol  STATUS_ERROR  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_ERROR  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_ERROR	13	None	replace
145	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(_outputTail  >=  _outputEnd)  {  break;  }  [CE]  break  outside  switch  or  loop  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(_outputTail  >=  _outputEnd)  {  break;  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(_outputTail  >=  _outputEnd)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(_outputTail    >=    _outputEnd)    {    break;    }    	non-compiled	[CE]  break  outside  switch  or  loop	50	None	replace
146	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >>  _outputEnd)  {  break;  }  [CE]  incompatible  types  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >>  _outputEnd)  {  break;  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >>  _outputEnd)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(_outputTail    >=    _outputEnd)    {    break;    }    	non-compiled	[CE]  incompatible  types	50	None	replace
147	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_ERROR)  {  [CE]  cannot  find  symbol  STATUS_ERROR  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_ERROR)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_ERROR)  {	  if(status!=    JsonWriteContext.STATUS_EXPECT_VALUE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_ERROR	34	None	replace
148	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(status  ==  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(status  ==  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    if(status  ==  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
149	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputEnd  >=  _outputMaxContiguous)  {  _flushBuffer();  }  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputEnd  >=  _outputMaxContiguous)  {  _flushBuffer();  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(_outputEnd  >=  _outputMaxContiguous)  {  _flushBuffer();  }	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
150	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  JsonGenerationException  	12	1	replace
151	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  JsonGenerationException  	12	1	replace
152	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPR_RESULT)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  STATUS_EXPR_RESULT  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPR_RESULT)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPR_RESULT)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  STATUS_EXPR_RESULT	12	None	replace
153	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
154	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
155	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
156	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
157	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	54	None	add
158	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JSONWriteContext.STATUS_EXPECT_NAME)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JSONWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JSONWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
159	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
160	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JSONWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JSONWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status!=  JSONWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
161	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	compilable	  [FE]  JsonGenerationException  	52	1	replace
162	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(_outputTail  >=  _outputEnd)  {  _flushBuffer();  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(_outputTail    >=    _outputEnd)    {    _flushBuffer();    }    	compilable	  [FE]  JsonGenerationException  	52	1	replace
163	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  int  typeMsg  =  _writeContext.getTypeMsg();  [CE]  variable  typeMsg  is  already  defined  in  method  _verifyValueWrite(String)  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  int  typeMsg  =  _writeContext.getTypeMsg();  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  int  typeMsg  =  _writeContext.getTypeMsg();	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  variable  typeMsg  is  already  defined  in  method  _verifyValueWrite(String)	38	None	replace
164	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  int  typeMsg  =  _writeContext.getTypeMsg();  }  [CE]  illegal  start  of  type  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  int  typeMsg  =  _writeContext.getTypeMsg();  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  int  typeMsg  =  _writeContext.getTypeMsg();  }	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
165	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
166	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  int  typeMsg  =  _writeContext.getTypeMsg();  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  int  typeMsg  =  _writeContext.getTypeMsg();  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    int  typeMsg  =  _writeContext.getTypeMsg();	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
167	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  int  typeMsg  =  _writeContext.getTypeMsg();  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  int  typeMsg  =  _writeContext.getTypeMsg();  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_VALUE)    {    int  typeMsg  =  _writeContext.getTypeMsg();	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
168	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  String  typeMsg  =  _writeContext.getTypeMsg();  }  [CE]  illegal  start  of  type  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  String  typeMsg  =  _writeContext.getTypeMsg();  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  String  typeMsg  =  _writeContext.getTypeMsg();  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
169	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    if(status    >=    JsonWriteContext.STATUS_EXPECT_VALUE)    {    	compilable	  [FE]  JsonGenerationException  	26	1	replace
170	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [FE]  JsonGenerationException  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    if(status    >=    JsonWriteContext.STATUS_EXPECT_VALUE)    {    	compilable	  [FE]  JsonGenerationException  	26	1	replace
171	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK)  {  int  typeMsg  =  _writeContext.getTypeMsg();  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK)  {  int  typeMsg  =  _writeContext.getTypeMsg();  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK)    {    int  typeMsg  =  _writeContext.getTypeMsg();	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
172	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK)  {  If(status  ==  JsonWriteContext.STATUS_OK)  {  [CE]  ';'  expected  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK)  {  If(status  ==  JsonWriteContext.STATUS_OK)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK)    {    If(status  ==  JsonWriteContext.STATUS_OK)  {	  	non-compiled	[CE]  ';'  expected	27	None	add
173	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPR_RESULT)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  STATUS_EXPR_RESULT  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPR_RESULT)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPR_RESULT)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  STATUS_EXPR_RESULT	10	None	replace
174	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name, ");  [CE]  illegal  start  of  type  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name, ");  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name, ");	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
175	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
176	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  cannot  find  symbol  STATUS_ERROR  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_ERROR  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_ERROR	4	None	replace
177	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
178	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
179	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
180	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_WARNING)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  STATUS_WARNING  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_WARNING)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_WARNING)  {  if(typeMsg  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  STATUS_WARNING	12	None	replace
181	[BUG]  [BUGGY]  int  typeMsg  =  _writeContext.getTypeMsg(type);  [CE]  illegal  start  of  type  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  int  typeMsg  =  _writeContext.getTypeMsg(type);  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	int  typeMsg  =  _writeContext.getTypeMsg(type);	  int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
182	[BUG]  [BUGGY]  int  typeMsg  =  _outputStream.getTypeMsg();  [CE]  illegal  start  of  type  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  int  typeMsg  =  _outputStream.getTypeMsg();  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	int  typeMsg  =  _outputStream.getTypeMsg();	  int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
183	[BUG]  [BUGGY]  int  typeMsg  =  _writeContext.getTypeMsg(0);  [CE]  illegal  start  of  type  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  int  typeMsg  =  _writeContext.getTypeMsg(0);  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	int  typeMsg  =  _writeContext.getTypeMsg(0);	  int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
184	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	31	None	replace
185	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FALSE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  cannot  find  symbol  STATUS_FALSE  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FALSE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_FALSE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_FALSE	15	None	replace
186	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FALSE  ||  status  ==  JsonWriteContext.STATUS_WARNING)  {  [CE]  cannot  find  symbol  STATUS_FALSE  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FALSE  ||  status  ==  JsonWriteContext.STATUS_WARNING)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_FALSE  ||  status  ==  JsonWriteContext.STATUS_WARNING)  {	  if(status    ==    JsonWriteContext.STATUS_FALSE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_FALSE	15	None	replace
187	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COM)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COM)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	21	1	replace
188	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COM)  {  [FE]  JsonGenerationException  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COM)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COM)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	21	1	replace
189	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_MISSING)  {  [CE]  cannot  find  symbol  STATUS_MISSING  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_MISSING)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_MISSING)  {	  if(status    ==    JsonWriteContext.STATUS_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_MISSING	13	None	replace
190	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FOR_AS_NULL  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  cannot  find  symbol  STATUS_FOR_AS_NULL  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FOR_AS_NULL  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_FOR_AS_NULL  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_FOR_AS_NULL)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_FOR_AS_NULL	29	None	replace
191	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FOR_AS_NULL  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  cannot  find  symbol  STATUS_FOR_AS_NULL  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_FOR_AS_NULL  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_FOR_AS_NULL  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_FOR_AS_NULL)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_FOR_AS_NULL	29	None	replace
192	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPR_RESULT  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  cannot  find  symbol  STATUS_EXPR_RESULT  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPR_RESULT  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPR_RESULT  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPR_RESULT)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_EXPR_RESULT	39	None	replace
193	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPR_VALUE)  {  [CE]  cannot  find  symbol  STATUS_EXPR_VALUE  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPR_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPR_VALUE)  {	  if(status    ==    JsonWriteContext.STATUS_EXPR_RESULT)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_EXPR_VALUE	39	None	replace
194	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_LBRACKET;  break;  }  [CE]  illegal  start  of  type  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_LBRACKET;  break;  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_LBRACKET;  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b    =    BYTE_BACKSLASH;    break;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
195	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECTED)  {  [CE]  cannot  find  symbol  STATUS_EXPECTED  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECTED)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECTED)  {	  if(status    ==    JsonWriteContext.STATUS_MESSAGE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_EXPECTED	56	None	replace
196	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    If(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    	compilable	  [FE]  JsonGenerationException  	53	1	replace
197	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [FE]  JsonGenerationException  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    If(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    	compilable	  [FE]  JsonGenerationException  	53	1	replace
198	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT)  {  [CE]  cannot  find  symbol  STATUS_EXPECT  [FE]                JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT)  {	  if(status    ==    JsonWriteContext.STATUS_RESULT)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_EXPECT	14	None	replace
199	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_CANCEL)  {  [CE]  cannot  find  symbol  STATUS_CANCEL  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_CANCEL)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_CANCEL)  {	  if(status    ==    JsonWriteContext.STATUS_RESULT)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_CANCEL	14	None	replace
200	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	55	1	replace
201	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	55	1	replace
202	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK  &&  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK  &&  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_OK)    {    	compilable	  [FE]  JsonGenerationException  	28	1	replace
203	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK  &&  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK  &&  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK  &&  status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_OK)    {    	compilable	  [FE]  JsonGenerationException  	28	1	replace
204	[BUG]  [BUGGY]  If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  ';'  expected  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    If(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    	non-compiled	[CE]  ';'  expected	57	None	replace
205	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  int  typeMsg  =  _writeContext.getTypeMsg();  }  else  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name  [CE]  unclosed  string  literal  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  int  typeMsg  =  _writeContext.getTypeMsg();  }  else  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  int  typeMsg  =  _writeContext.getTypeMsg();  }  else  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    int    typeMsg    =    _writeContext.getTypeMsg();    	non-compiled	[CE]  unclosed  string  literal	38	None	replace
206	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status!=    JsonWriteContext.STATUS_EXPECT_VALUE)    {    	compilable	  [FE]  JsonGenerationException  	34	1	replace
207	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status!=    JsonWriteContext.STATUS_EXPECT_VALUE)    {    	compilable	  [FE]  JsonGenerationException  	34	1	replace
208	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	compilable	  [FE]  JsonGenerationException  	4	1	replace
209	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  &&  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	compilable	  [FE]  JsonGenerationException  	4	1	replace
210	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	6	1	replace
211	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=  JsonWriteContext.STATUS_EXPECT_NAME  &&  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status!=    JsonWriteContext.STATUS_EXPECT_NAME    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	6	1	replace
212	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA    ||    status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  ==  JsonWriteContext.STATUS_OK_ATER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
213	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_UNKNOWN    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	49	1	replace
214	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [FE]  JsonGenerationException  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_UNKNOWN    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	compilable	  [FE]  JsonGenerationException  	49	1	replace
215	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_WARNING)  {  [CE]  cannot  find  symbol  STATUS_WARNING  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_WARNING)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_WARNING)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_WARNING	35	None	replace
216	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_FOR)  {  [CE]  cannot  find  symbol  STATUS_FOR  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_FOR)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_FOR)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE    ||    status    ==    JsonWriteContext.STATUS_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_FOR	35	None	replace
217	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_NOT_IMPLEMENTED)  {  [CE]  cannot  find  symbol  STATUS_NOT_IMPLEMENTED  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_NOT_IMPLEMENTED)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_NOT_IMPLEMENTED)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_NOT_IMPLEMENTED	48	None	replace
218	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	48	1	replace
219	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	48	1	replace
220	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_WARNING)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  STATUS_WARNING  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_WARNING)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_WARNING)  {  if(typeMsg!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(typeMsg!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  STATUS_WARNING	10	None	replace
221	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  If(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [CE]  ';'  expected  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  If(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_VALUE)    {    If(status!=  JsonWriteContext.STATUS_EXPECT_VALUE)  {	  	non-compiled	[CE]  ';'  expected	33	None	add
222	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [CE]  illegal  start  of  type  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_EXPECT_VALUE)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_VALUE)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
223	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_READ)  {  if(_outputTail  >=  _outputEnd)  {  break;  }  [CE]  cannot  find  symbol  STATUS_EXPECT_READ  [FE]                  JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_READ)  {  if(_outputTail  >=  _outputEnd)  {  break;  }  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_READ)  {  if(_outputTail  >=  _outputEnd)  {  break;  }	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(_outputTail    >=    _outputEnd)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  STATUS_EXPECT_READ	50	None	replace
224	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_NOT_IMPLEMENT)  {  [CE]  cannot  find  symbol  STATUS_NOT_IMPLEMENT  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_NOT_IMPLEMENT)  {  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_NOT_IMPLEMENT)  {	  if(status    ==    JsonWriteContext.STATUS_UNKNOWN    ||    status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_NOT_IMPLEMENT	30	None	replace
225	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  field  name ");  [CE]  illegal  start  of  type  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  field  name ");  [BUGGY]      _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	927	927	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  field  name ");	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
