bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
2	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]            JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
3	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]              JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status!=  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
4	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	add	switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	2	1	replace
5	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_EXPECT_NAME)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	2	1	replace
6	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_AFTER_COMMA)  {  [CE]  cannot  find  symbol  STATUS_AFTER_COMMA  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_AFTER_COMMA)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_AFTER_COMMA	2	None	replace
7	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter.getTypeDesc(),  status)  {  [CE]  ')'  expected  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(_cfgPrettyPrinter.getTypeDesc(),  status)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter.getTypeDesc(),  status)  {	  switch(_cfgPrettyPrinter.getTypeDesc())    {    	non-compiled	[CE]  ')'  expected	8	None	replace
8	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter,  status.getTypeDesc())  {  [CE]  ')'  expected  [FE]            JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(_cfgPrettyPrinter,  status.getTypeDesc())  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter,  status.getTypeDesc())  {	  switch(_cfgPrettyPrinter.getTypeDesc())    {    	non-compiled	[CE]  ')'  expected	8	None	replace
9	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter,  b.getTypeDesc())  {  [CE]  ')'  expected  [FE]              JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(_cfgPrettyPrinter,  b.getTypeDesc())  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter,  b.getTypeDesc())  {	  switch(_cfgPrettyPrinter.getTypeDesc())    {    	non-compiled	[CE]  ')'  expected	8	None	replace
10	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  case,  default,  or  '}'  expected  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
11	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  Switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  case,  default,  or  '}'  expected  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  Switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    Switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
12	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  ||(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  [CE]  case,  default,  or  '}'  expected  [FE]        JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  ||(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    ||(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA))  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
13	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [CE]  case,  default,  or  '}'  expected  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
14	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  [CE]  case,  default,  or  '}'  expected  [FE]            JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
15	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [CE]  orphaned  case  [FE]              JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }	      	non-compiled	[CE]  orphaned  case	6	None	replace
16	[BUG]  [BUGGY]  b  =  _cfgPrettyPrinter.asUnquotedUTF8();  break;  [CE]  orphaned  case  [FE]                JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  b  =  _cfgPrettyPrinter.asUnquotedUTF8();  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	b  =  _cfgPrettyPrinter.asUnquotedUTF8();  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
17	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_0;  break;  }  [CE]  orphaned  case  [FE]                  JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_0;  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_0;  break;  }	      	non-compiled	[CE]  orphaned  case	6	None	replace
18	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {  [CE]  cannot  find  symbol  STATUS_OPTIONAL_AFTER_COMMA  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OPTIONAL_AFTER_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_OPTIONAL_AFTER_COMMA	5	None	replace
19	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	add	switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	compilable	  [FE]  JsonGenerationException  	5	1	replace
20	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  [FE]  JsonGenerationException  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OK_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	compilable	  [FE]  JsonGenerationException  	5	1	replace
21	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  orphaned  case  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
22	[BUG]  [BUGGY]  if(b  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]            JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  if(b  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(b  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
23	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  orphaned  case  [FE]        JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
24	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  orphaned  case  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    	non-compiled	[CE]  orphaned  case	9	None	replace
25	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter,  status)  {  [CE]  ')'  expected  [FE]        JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(_cfgPrettyPrinter,  status)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter,  status)  {	  switch(_cfgPrettyPrinter)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
26	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter.types)  {  [CE]  cannot  find  symbol  types  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(_cfgPrettyPrinter.types)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter.types)  {	  switch(_cfgPrettyPrinter)    {    	non-compiled	[CE]  cannot  find  symbol  types	7	None	replace
27	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter.type)  {  [CE]  cannot  find  symbol  type  [FE]            JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(_cfgPrettyPrinter.type)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter.type)  {	  switch(_cfgPrettyPrinter)    {    	non-compiled	[CE]  cannot  find  symbol  type	7	None	replace
28	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  case,  default,  or  '}'  expected  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
29	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  Switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  case,  default,  or  '}'  expected  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  Switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    Switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
30	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  ||(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE))  {  [CE]  case,  default,  or  '}'  expected  [FE]        JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  ||(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE))  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    ||(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE))  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
31	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_PARAM)  {  [CE]  case,  default,  or  '}'  expected  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_PARAM)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    switch(status  &  JsonWriteContext.STATUS_OK_AFTER_PARAM)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
32	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  ||(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  ==  0)  {  [CE]  case,  default,  or  '}'  expected  [FE]            JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  ||(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  ==  0)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    ||(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  ==  0)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
33	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_BACKSLASH;  break;  }  [CE]  orphaned  case  [FE]              JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_BACKSLASH;  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_BACKSLASH;  break;  }	      	non-compiled	[CE]  orphaned  case	6	None	replace
34	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_BACKSLASH)  {  [CE]  cannot  find  symbol  STATUS_BACKSLASH  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_BACKSLASH)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_BACKSLASH)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_BACKSLASH	2	None	replace
35	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OBJECT_VALUE)  {  [CE]  cannot  find  symbol  STATUS_OBJECT_VALUE  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OBJECT_VALUE)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OBJECT_VALUE)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_OBJECT_VALUE	2	None	replace
36	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  [CE]  case,  default,  or  '}'  expected  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  b  =  BYTE_COMMA;  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    b  =  BYTE_COMMA;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
37	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
38	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  int  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  case,  default,  or  '}'  expected  [FE]        JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  int  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    int  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
39	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  ||  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  case,  default,  or  '}'  expected  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  ||  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    ||  status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
40	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_UNKNOWN)  {  [CE]  orphaned  case  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_UNKNOWN)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_UNKNOWN)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
41	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_COMMA)  {  [CE]  cannot  find  symbol  STATUS_COMMA  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_COMMA)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_COMMA)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_COMMA	5	None	replace
42	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OPTIONAL_NAME)  {  [CE]  cannot  find  symbol  STATUS_OPTIONAL_NAME  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OPTIONAL_NAME)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OPTIONAL_NAME)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_OPTIONAL_NAME	5	None	replace
43	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  [CE]  case,  default,  or  '}'  expected  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b  =  BYTE_COMMA;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
44	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  case,  default,  or  '}'  expected  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
45	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  [CE]  case,  default,  or  '}'  expected  [FE]        JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
46	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_SPACE;  break;  [CE]  case,  default,  or  '}'  expected  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_SPACE;  break;  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    b  =  BYTE_SPACE;  break;	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
47	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OPTIONAL_SYNTHETIC)  {  [CE]  cannot  find  symbol  STATUS_OPTIONAL_SYNTHETIC  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OPTIONAL_SYNTHETIC)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status  &  JsonWriteContext.STATUS_OPTIONAL_SYNTHETIC)  {	  switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_OPTIONAL_SYNTHETIC	5	None	replace
48	[BUG]  [BUGGY]  switch(_cfgPrettyPrinter,  _outputStream.getTypeDesc())  {  [CE]  ')'  expected  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(_cfgPrettyPrinter,  _outputStream.getTypeDesc())  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(_cfgPrettyPrinter,  _outputStream.getTypeDesc())  {	  switch(_cfgPrettyPrinter.getTypeDesc())    {    	non-compiled	[CE]  ')'  expected	8	None	replace
49	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_COMMA;  break;  }  [CE]  orphaned  case  [FE]              JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_COMMA;  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_COMMA;  break;  }	      	non-compiled	[CE]  orphaned  case	6	None	replace
50	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_QUOTE;  break;  }  [CE]  orphaned  case  [FE]                JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_QUOTE;  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  b  =  BYTE_QUOTE;  break;  }	      	non-compiled	[CE]  orphaned  case	6	None	replace
51	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  case,  default,  or  '}'  expected  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
52	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  }  [CE]  case,  default,  or  '}'  expected  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
53	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]        JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status  &  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  b  =  BYTE_COMMA;  break;  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	4	None	add
54	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  case,  default,  or  '}'  expected  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
55	[BUG]  [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [CE]  case,  default,  or  '}'  expected  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }  if  (_cfgPrettyPrinter  ==  null)  {  byte  b;    [BUGGY]  switch(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }  [BUGGY]    case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  byte[]  raw  =  _rootValueSeparator.asUnquotedUTF8();  if  (raw.length  >  0)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	932	932	1	replace	switch(status    &    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  &  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  break;  }	  	non-compiled	[CE]  case,  default,  or  '}'  expected	1	None	add
