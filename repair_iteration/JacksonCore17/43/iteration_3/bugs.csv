bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  cannot  find  symbol  STATUS_ERROR  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_ERROR  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_ERROR)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_ERROR	4	None	replace
2	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: "  +  status);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: "  +  status);  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name: "  +  status);	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
3	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
4	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
5	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
6	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  >>  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	34	None	add
7	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OBJECT_NAME)  {  [CE]  cannot  find  symbol  STATUS_OBJECT_NAME  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OBJECT_NAME)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_OBJECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OBJECT_VALUE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_OBJECT_NAME	11	None	replace
8	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OBJECT_FIELD_NAME)  {  [CE]  cannot  find  symbol  STATUS_OBJECT_FIELD_NAME  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OBJECT_FIELD_NAME)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_OBJECT_FIELD_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OBJECT_VALUE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_OBJECT_FIELD_NAME	11	None	replace
9	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_BACKSLASH  ||  status  ==  JsonWriteContext.STATUS_BACKSLASH)  {  [CE]  cannot  find  symbol  STATUS_BACKSLASH  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_BACKSLASH  ||  status  ==  JsonWriteContext.STATUS_BACKSLASH)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_BACKSLASH  ||  status  ==  JsonWriteContext.STATUS_BACKSLASH)  {	  if(status    ==    JsonWriteContext.STATUS_BACKSLASH)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_BACKSLASH	3	None	replace
10	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_BACKSLASH  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  cannot  find  symbol  STATUS_BACKSLASH  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_BACKSLASH  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_BACKSLASH  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  if(status    ==    JsonWriteContext.STATUS_BACKSLASH)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_BACKSLASH	3	None	replace
11	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_RBRACKET)  {  [CE]  cannot  find  symbol  STATUS_RBRACKET  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_RBRACKET)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_RBRACKET)  {	  if(status    ==    JsonWriteContext.STATUS_BACKSLASH)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_RBRACKET	3	None	replace
12	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [CE]  illegal  start  of  type  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OBJECT  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  cannot  find  symbol  STATUS_OBJECT  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OBJECT  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_OBJECT  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OBJECT)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_OBJECT	37	None	replace
14	[BUG]  [BUGGY]  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
15	[BUG]  [BUGGY]  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
16	[BUG]  [BUGGY]  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
17	[BUG]  [BUGGY]  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    >=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
18	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name.   ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name.   ");  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name.   ");	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name.   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	40	None	replace
19	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }  [CE]  illegal  start  of  type  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name.   ");    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
20	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	add	if(status!=  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_QUOTE)    {    if(status!=    JsonWriteContext.STATUS_OK_AFTER_QUOTE)    {    	compilable	  [FE]  JsonGenerationException  	19	1	replace
21	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [FE]  JsonGenerationException  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_QUOTE)    {    if(status!=    JsonWriteContext.STATUS_OK_AFTER_QUOTE)    {    	compilable	  [FE]  JsonGenerationException  	19	1	replace
22	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_QUOTE)    {    If(status    ==    JsonWriteContext.STATUS_OK_AFTER_QUOTE)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
23	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  illegal  start  of  expression  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    If(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
24	[BUG]  [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	||  status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    If(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
25	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
26	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
27	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    if(status  >=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
28	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
29	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
30	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
31	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  >>  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  >>  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status  >>  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
32	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OBJECT)  {  [CE]  cannot  find  symbol  STATUS_OBJECT  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status!=  JsonWriteContext.STATUS_OBJECT)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=  JsonWriteContext.STATUS_OBJECT)  {	  if(status!=    JsonWriteContext.STATUS_BACKSLASH)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_OBJECT	36	None	replace
33	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	add	if(status  ==  JsonWriteContext.STATUS_OK_AFTER)  {	  if(status!=    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	compilable	  [FE]  JsonGenerationException  	13	1	replace
34	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_OK_AFTER)  {	  if(status!=    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	compilable	  [FE]  JsonGenerationException  	13	1	replace
35	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ABSTRACT  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  cannot  find  symbol  STATUS_ABSTRACT  [FE]          JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ABSTRACT  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_ABSTRACT  ||  status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_ABSTRACT)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_ABSTRACT	38	None	replace
36	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  value ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                      JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  value ");  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  value ");	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
37	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  field  name ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  field  name ");  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name,  expecting  field  name ");	  _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
38	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OBJECT_FIELD_NAMES)  {  [CE]  cannot  find  symbol  STATUS_OBJECT_FIELD_NAMES  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OBJECT_FIELD_NAMES)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_OBJECT_FIELD_NAMES)  {	  if(status    ==    JsonWriteContext.STATUS_OBJECT_VALUE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_OBJECT_FIELD_NAMES	11	None	replace
39	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	add	if(status  ==  JsonWriteContext.STATUS_OK)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    If(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	compilable	  [FE]  JsonGenerationException  	29	1	replace
40	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK)  {  [FE]  JsonGenerationException  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_OK)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    If(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	compilable	  [FE]  JsonGenerationException  	29	1	replace
41	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [CE]  ';'  expected  [FE]    JsonGenerationException    [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    If(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
42	[BUG]  [BUGGY]  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [CE]  ';'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	If(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_QUOTE)    {    If(status    ==    JsonWriteContext.STATUS_OK_AFTER_QUOTE)    {    	non-compiled	[CE]  ';'  expected	21	None	replace
43	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(_outputTail  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	add	if(_outputTail  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(_cfgPrettyPrinter!=    null)    {    if(_cfgPrettyPrinter    >=    null)    {    	compilable	  [FE]  JsonGenerationException  	24	1	replace
44	[BUG]  [BUGGY]  if(_outputTail  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [FE]  JsonGenerationException  [FE]            JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(_outputTail  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(_outputTail  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(_cfgPrettyPrinter!=    null)    {    if(_cfgPrettyPrinter    >=    null)    {    	compilable	  [FE]  JsonGenerationException  	24	1	replace
45	[BUG]  [BUGGY]  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  ';'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    If(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
46	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name, ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                    JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name, ");  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name, ");	  if(status    ==    JsonWriteContext.STATUS_EXPECT_NAME)    {    _reportError(   "Can    not       "+typeMsg+   ",    expecting    field    name   ");    }    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
47	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OBJECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  cannot  find  symbol  STATUS_OBJECT_VALUE  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OBJECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_OBJECT_VALUE  ||  status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  if(status    ==    JsonWriteContext.STATUS_OBJECT_VALUE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_OBJECT_VALUE	11	None	replace
48	[BUG]  [BUGGY]  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  ';'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	If(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    If(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  ';'  expected	29	None	replace
49	[BUG]  [BUGGY]  If(_cfgPrettyPrinter!=  null)  {  [CE]  ';'  expected  [FE]        JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  If(_cfgPrettyPrinter!=  null)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	If(_cfgPrettyPrinter!=  null)  {	  if(_cfgPrettyPrinter!=    null)    {    If(_cfgPrettyPrinter!=    null)    {    	non-compiled	[CE]  ';'  expected	39	None	replace
50	[BUG]  [BUGGY]  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  ';'  expected  [FE]              JsonGenerationException      [CONTEXT]      {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(     "Can  not       "+typeMsg+     ",  expecting  field  name     ");  }      [BUGGY]  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]      byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    If(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	non-compiled	[CE]  ';'  expected	17	None	replace
