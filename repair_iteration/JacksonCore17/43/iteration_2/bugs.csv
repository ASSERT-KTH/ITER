bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	add	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	compilable	  [FE]  JsonGenerationException  	2	1	replace
2	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	compilable	  [FE]  JsonGenerationException  	2	1	replace
3	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_BACKSLASH)  {  [CE]  cannot  find  symbol  STATUS_BACKSLASH  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_BACKSLASH)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_BACKSLASH)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_BACKSLASH	2	None	replace
4	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR)  {  [CE]  cannot  find  symbol  STATUS_ERROR  [FE]        JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ERROR)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_ERROR)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_ERROR	2	None	replace
5	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
6	[BUG]  [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  [CE]  invalid  method  declaration;  return  type  required  [FE]                  JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	_reportError( "Can  not   "+typeMsg+ ",  expecting  field  name ");	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
7	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
8	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
9	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
10	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  >>  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
11	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OBJECT_VALUE)  {  [CE]  cannot  find  symbol  STATUS_OBJECT_VALUE  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OBJECT_VALUE)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_OBJECT_VALUE)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_OBJECT_VALUE	6	None	replace
12	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	add	if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	13	1	replace
13	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	13	1	replace
14	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
15	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
16	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
17	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [CE]  ';'  expected  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COLON)    {    If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COLON)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
18	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_QUOTE)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
19	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_QUOTE)    {    if(status!=  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
20	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_QUOTE)    {    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
21	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [CE]  ';'  expected  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_QUOTE)    {    If(status  ==  JsonWriteContext.STATUS_OK_AFTER_QUOTE)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
22	[BUG]  [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(_cfgPrettyPrinter!=  null)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(_cfgPrettyPrinter!=  null)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(_cfgPrettyPrinter!=    null)    {    if(_cfgPrettyPrinter!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
23	[BUG]  [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(_cfgPrettyPrinter  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(_cfgPrettyPrinter  ==  null)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(_cfgPrettyPrinter!=    null)    {    if(_cfgPrettyPrinter  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
24	[BUG]  [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(_cfgPrettyPrinter  >=  null)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(_cfgPrettyPrinter  >=  null)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(_cfgPrettyPrinter!=    null)    {    if(_cfgPrettyPrinter  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
25	[BUG]  [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(_cfgPrettyPrinter  >>  null)  {  [CE]  illegal  start  of  expression  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  if(_cfgPrettyPrinter  >>  null)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(_cfgPrettyPrinter!=    null)    {    if(_cfgPrettyPrinter  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
26	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
27	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status!=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
28	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
29	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [CE]  ';'  expected  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    If(status  ==  JsonWriteContext.STATUS_OK_AFTER_SPACE)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
30	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
31	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status!=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
32	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  illegal  start  of  expression  [FE]        JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
33	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [CE]  ';'  expected  [FE]          JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status    ==    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    If(status  ==  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
34	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	add	if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	13	1	replace
35	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=  JsonWriteContext.STATUS_EXPECT_NAME)  {	  if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	compilable	  [FE]  JsonGenerationException  	13	1	replace
36	[BUG]  [BUGGY]  if(status!=  JsonWriteContext.STATUS_BACKSLASH)  {  [CE]  cannot  find  symbol  STATUS_BACKSLASH  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status!=  JsonWriteContext.STATUS_BACKSLASH)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status!=  JsonWriteContext.STATUS_BACKSLASH)  {	  if(status!=    JsonWriteContext.STATUS_OK_AFTER_COMMA)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_BACKSLASH	13	None	replace
37	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OBJECT)  {  [CE]  cannot  find  symbol  STATUS_OBJECT  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_OBJECT)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_OBJECT)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_OBJECT	2	None	replace
38	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ABSTRACT)  {  [CE]  cannot  find  symbol  STATUS_ABSTRACT  [FE]      JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_ABSTRACT)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_ABSTRACT)  {	  if(status    ==    JsonWriteContext.STATUS_OK_AFTER_SPACE)    {    	non-compiled	[CE]  cannot  find  symbol  STATUS_ABSTRACT	2	None	replace
39	[BUG]  [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  If(_cfgPrettyPrinter!=  null)  {  [CE]  ';'  expected  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(_cfgPrettyPrinter!=  null)  {  If(_cfgPrettyPrinter!=  null)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(_cfgPrettyPrinter!=    null)    {    If(_cfgPrettyPrinter!=  null)  {	  	non-compiled	[CE]  ';'  expected	10	None	add
40	[BUG]  [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }  [CE]  invalid  method  declaration;  return  type  required  [FE]                JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError( "Can  not   "+typeMsg+ ",  expecting  field  name. ");  }	      	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	replace
41	[BUG]  [BUGGY]  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	add	if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(_cfgPrettyPrinter!=    null)    {    	compilable	  [FE]  JsonGenerationException  	11	1	replace
42	[BUG]  [BUGGY]  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [FE]  JsonGenerationException  [FE]    JsonGenerationException    [CONTEXT]    {  int  status  =  _writeContext.writeValue();  if  (status  ==  JsonWriteContext.STATUS_EXPECT_NAME)  {  _reportError(   "Can  not     "+typeMsg+   ",  expecting  field  name   ");  }    [BUGGY]  if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {  [BUGGY]    byte  b;  switch  (status)  {  case  JsonWriteContext.STATUS_OK_AFTER_COMMA:  b  =  BYTE_COMMA;  break;  case  JsonWriteContext.STATUS_OK_AFTER_COLON:  b  =  BYTE_COLON;  break;  case  JsonWriteContext.STATUS_OK_AFTER_SPACE:  //  root-value  separator  if  (_rootValueSeparator  !=  null)  {  [CLASS]  UTF8JsonGenerator  [METHOD]  _verifyValueWrite  [RETURN_TYPE]  void  String  typeMsg  [VARIABLES]  byte[]  FALSE_BYTES  HEX_CHARS  NULL_BYTES  TRUE_BYTES  _entityBuffer  _outputBuffer  bbuf  data  encodingBuffer  keyword  outputBuffer  raw  text  boolean  _bufferRecyclable  addQuotes  bufferRecyclable  state  byte  BYTE_0  BYTE_BACKSLASH  BYTE_COLON  BYTE_COMMA  BYTE_LBRACKET  BYTE_LCURLY  BYTE_QUOTE  BYTE_RBRACKET  BYTE_RCURLY  BYTE_u  b  OutputStream  _outputStream  out  String  typeMsg  int  MAX_BYTES_TO_BUFFER  _charBufferLength  _outputEnd  _outputMaxContiguous  _outputTail  bytes  ch  dataLength  end  features  i  inputEnd  len  len2  len3  length  missing  offset  outputOffset  status  char[]  _charBuffer  buf  cbuf  text  	projects/JacksonCore17/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java	0.7071067811865475	930	930	1	replace	if(status  >=  JsonWriteContext.STATUS_OK_AFTER_COMMA)  {	  if(_cfgPrettyPrinter!=    null)    {    	compilable	  [FE]  JsonGenerationException  	11	1	replace
