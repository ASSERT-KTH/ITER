bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] addValue((Comparable<?>) v); [FE] ClassCastException testAddNonComparable [CONTEXT] public void addValue(Object v) { [BUGGY] addValue((Comparable<?>) v); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Object v [VARIABLES] Object v boolean TreeMap freqTable long serialVersionUID  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	110	110	1	replace	
2	[BUG] [BUGGY] [FE] ClassCastException testAddNonComparable [CONTEXT] public void addValue(Object v) { [BUGGY] [BUGGY] addValue((Comparable<?>) v); } [CLASS] Frequency NaturalComparator [METHOD] addValue [RETURN_TYPE] void  Object v [VARIABLES] Object v boolean TreeMap freqTable long serialVersionUID  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.7071067811865475	110	110	1	add	
3	[BUG] [BUGGY] public Frequency() { [FE] ClassCastException testAddNonComparable [CONTEXT] [BUGGY] public Frequency() { [BUGGY] freqTable = new TreeMap(); } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	57	57	1	replace	
4	[BUG] [BUGGY] [FE] ClassCastException testAddNonComparable [CONTEXT] [BUGGY] [BUGGY] public Frequency() { freqTable = new TreeMap(); } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	57	57	1	add	
5	[BUG] [BUGGY] freqTable = new TreeMap(); [FE] ClassCastException testAddNonComparable [CONTEXT] public Frequency() { [BUGGY] freqTable = new TreeMap(); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	58	58	1	replace	
6	[BUG] [BUGGY] [FE] ClassCastException testAddNonComparable [CONTEXT] public Frequency() { [BUGGY] [BUGGY] freqTable = new TreeMap(); } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	58	58	1	add	
7	[BUG] [BUGGY] } [FE] ClassCastException testAddNonComparable [CONTEXT] public Frequency() { freqTable = new TreeMap(); [BUGGY] } [BUGGY]  [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	59	59	1	replace	
8	[BUG] [BUGGY] [FE] ClassCastException testAddNonComparable [CONTEXT] public Frequency() { freqTable = new TreeMap(); [BUGGY] [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Frequency()  [VARIABLES] TreeMap freqTable long serialVersionUID boolean  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.3779644730092272	59	59	1	add	
9	[BUG] [BUGGY] public Frequency(Comparator comparator) { [FE] ClassCastException testAddNonComparable [CONTEXT] [BUGGY] public Frequency(Comparator comparator) { [BUGGY] freqTable = new TreeMap(comparator); } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Comparator)  Comparator comparator [VARIABLES] boolean TreeMap freqTable long serialVersionUID Comparator comparator  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.0	66	66	1	replace	
10	[BUG] [BUGGY] [FE] ClassCastException testAddNonComparable [CONTEXT] [BUGGY] [BUGGY] public Frequency(Comparator comparator) { freqTable = new TreeMap(comparator); } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Comparator)  Comparator comparator [VARIABLES] boolean TreeMap freqTable long serialVersionUID Comparator comparator  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.0	66	66	1	add	
11	[BUG] [BUGGY] freqTable = new TreeMap(comparator); [FE] ClassCastException testAddNonComparable [CONTEXT] public Frequency(Comparator comparator) { [BUGGY] freqTable = new TreeMap(comparator); [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Comparator)  Comparator comparator [VARIABLES] boolean TreeMap freqTable long serialVersionUID Comparator comparator  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.0	67	67	1	replace	
12	[BUG] [BUGGY] [FE] ClassCastException testAddNonComparable [CONTEXT] public Frequency(Comparator comparator) { [BUGGY] [BUGGY] freqTable = new TreeMap(comparator); } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Comparator)  Comparator comparator [VARIABLES] boolean TreeMap freqTable long serialVersionUID Comparator comparator  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.0	67	67	1	add	
13	[BUG] [BUGGY] } [FE] ClassCastException testAddNonComparable [CONTEXT] public Frequency(Comparator comparator) { freqTable = new TreeMap(comparator); [BUGGY] } [BUGGY]  [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Comparator)  Comparator comparator [VARIABLES] boolean TreeMap freqTable long serialVersionUID Comparator comparator  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.0	68	68	1	replace	
14	[BUG] [BUGGY] [FE] ClassCastException testAddNonComparable [CONTEXT] public Frequency(Comparator comparator) { freqTable = new TreeMap(comparator); [BUGGY] [BUGGY] } [CLASS] Frequency NaturalComparator [METHOD] <init> [RETURN_TYPE] Comparator)  Comparator comparator [VARIABLES] boolean TreeMap freqTable long serialVersionUID Comparator comparator  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.0	68	68	1	add	
15	[BUG] [BUGGY] NumberFormat nf = NumberFormat.getPercentInstance(); [FE] ClassCastException testAddNonComparable [CONTEXT] public String toString() { [BUGGY] NumberFormat nf = NumberFormat.getPercentInstance(); [BUGGY] StringBuffer outBuffer = new StringBuffer(); outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n"); Iterator iter = freqTable.keySet().iterator(); while (iter.hasNext()) { Object value = iter.next(); outBuffer.append(value); outBuffer.append('\t'); outBuffer.append(getCount(value)); outBuffer.append('\t'); outBuffer.append(nf.format(getPct(value))); [CLASS] Frequency NaturalComparator [METHOD] toString [RETURN_TYPE] String  [VARIABLES] StringBuffer outBuffer boolean Iterator iter Object value TreeMap freqTable long serialVersionUID NumberFormat nf  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.0	78	78	1	replace	
16	[BUG] [BUGGY] [FE] ClassCastException testAddNonComparable [CONTEXT] public String toString() { [BUGGY] [BUGGY] NumberFormat nf = NumberFormat.getPercentInstance(); StringBuffer outBuffer = new StringBuffer(); outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n"); Iterator iter = freqTable.keySet().iterator(); while (iter.hasNext()) { Object value = iter.next(); outBuffer.append(value); outBuffer.append('\t'); outBuffer.append(getCount(value)); outBuffer.append('\t'); outBuffer.append(nf.format(getPct(value))); [CLASS] Frequency NaturalComparator [METHOD] toString [RETURN_TYPE] String  [VARIABLES] StringBuffer outBuffer boolean Iterator iter Object value TreeMap freqTable long serialVersionUID NumberFormat nf  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.0	78	78	1	add	
17	[BUG] [BUGGY] StringBuffer outBuffer = new StringBuffer(); [FE] ClassCastException testAddNonComparable [CONTEXT] public String toString() { NumberFormat nf = NumberFormat.getPercentInstance(); [BUGGY] StringBuffer outBuffer = new StringBuffer(); [BUGGY] outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n"); Iterator iter = freqTable.keySet().iterator(); while (iter.hasNext()) { Object value = iter.next(); outBuffer.append(value); outBuffer.append('\t'); outBuffer.append(getCount(value)); outBuffer.append('\t'); outBuffer.append(nf.format(getPct(value))); outBuffer.append('\t'); [CLASS] Frequency NaturalComparator [METHOD] toString [RETURN_TYPE] String  [VARIABLES] StringBuffer outBuffer boolean Iterator iter Object value TreeMap freqTable long serialVersionUID NumberFormat nf  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.0	79	79	1	replace	
18	[BUG] [BUGGY] [FE] ClassCastException testAddNonComparable [CONTEXT] public String toString() { NumberFormat nf = NumberFormat.getPercentInstance(); [BUGGY] [BUGGY] StringBuffer outBuffer = new StringBuffer(); outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n"); Iterator iter = freqTable.keySet().iterator(); while (iter.hasNext()) { Object value = iter.next(); outBuffer.append(value); outBuffer.append('\t'); outBuffer.append(getCount(value)); outBuffer.append('\t'); outBuffer.append(nf.format(getPct(value))); outBuffer.append('\t'); [CLASS] Frequency NaturalComparator [METHOD] toString [RETURN_TYPE] String  [VARIABLES] StringBuffer outBuffer boolean Iterator iter Object value TreeMap freqTable long serialVersionUID NumberFormat nf  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.0	79	79	1	add	
19	[BUG] [BUGGY] outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n"); [FE] ClassCastException testAddNonComparable [CONTEXT] public String toString() { NumberFormat nf = NumberFormat.getPercentInstance(); StringBuffer outBuffer = new StringBuffer(); [BUGGY] outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n"); [BUGGY] Iterator iter = freqTable.keySet().iterator(); while (iter.hasNext()) { Object value = iter.next(); outBuffer.append(value); outBuffer.append('\t'); outBuffer.append(getCount(value)); outBuffer.append('\t'); outBuffer.append(nf.format(getPct(value))); outBuffer.append('\t'); outBuffer.append(nf.format(getCumPct(value))); [CLASS] Frequency NaturalComparator [METHOD] toString [RETURN_TYPE] String  [VARIABLES] StringBuffer outBuffer boolean Iterator iter Object value TreeMap freqTable long serialVersionUID NumberFormat nf  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.0	80	80	1	replace	
20	[BUG] [BUGGY] [FE] ClassCastException testAddNonComparable [CONTEXT] public String toString() { NumberFormat nf = NumberFormat.getPercentInstance(); StringBuffer outBuffer = new StringBuffer(); [BUGGY] [BUGGY] outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n"); Iterator iter = freqTable.keySet().iterator(); while (iter.hasNext()) { Object value = iter.next(); outBuffer.append(value); outBuffer.append('\t'); outBuffer.append(getCount(value)); outBuffer.append('\t'); outBuffer.append(nf.format(getPct(value))); outBuffer.append('\t'); outBuffer.append(nf.format(getCumPct(value))); [CLASS] Frequency NaturalComparator [METHOD] toString [RETURN_TYPE] String  [VARIABLES] StringBuffer outBuffer boolean Iterator iter Object value TreeMap freqTable long serialVersionUID NumberFormat nf  	projects/Math89/src/java/org/apache/commons/math/stat/Frequency.java	0.0	80	80	1	add	
