bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newLinkedList(forAnnotations);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newLinkedList(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newLinkedList(forAnnotations);	  List    <    String>    propertyNames    =    Sets.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
2	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOw    	non-compiled	[CE]  <identifier>  expected	45	None	replace
3	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOw    	non-compiled	[CE]  <identifier>  expected	45	None	replace
4	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOw    	non-compiled	[CE]  <identifier>  expected	45	None	replace
5	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOw    	non-compiled	[CE]  <identifier>  expected	45	None	replace
6	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOw    	non-compiled	[CE]  <identifier>  expected	45	None	replace
7	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOw    	non-compiled	[CE]  <identifier>  expected	45	None	replace
8	[BUG]  [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(forAnnotations);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(forAnnotations);	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
9	[BUG]  [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(0);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(0);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(0);	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
10	[BUG]  [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallbackForAnnotations();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallbackForAnnotations();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallbackForAnnotations();	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
11	[BUG]  [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(false);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(false);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(false);	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
12	[BUG]  [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  }	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.add(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
13	[BUG]  [BUGGY]  PropertyType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  PropertyType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	PropertyType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.add(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
14	[BUG]  [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback,  forAnnotations);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback,  forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback,  forAnnotations);	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.add(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
15	[BUG]  [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  }  else  {  forAnnotations  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  }  else  {  forAnnotations  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  }  else  {  forAnnotations	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.add(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
16	[BUG]  [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.add(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
17	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newHashSet(properties);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newHashSet(properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newHashSet(properties);	  List    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
18	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newHashSet(propertyNames);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newHashSet(propertyNames);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newHashSet(propertyNames);	  List    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
19	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  properties);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  properties);	  List    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
20	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).properties();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).properties();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).properties();	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations).keySet();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
21	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).values();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).values();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).values();	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations).keySet();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
22	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).properties;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).properties;  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).properties;	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations).keySet();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
23	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).keySet();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).keySet();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).keySet();	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations).keySet();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
24	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).propertyNames();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).propertyNames();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).propertyNames();	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations).keySet();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
25	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(properties).keySet();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(properties).keySet();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(properties).keySet();	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations).keySet();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
26	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newArrayList(forAnnotations);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newArrayList(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Sets.newArrayList(forAnnotations);	  ArrayList    <    String>    propertyNames    =    Sets.newArrayList();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
27	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Lists.newArrayList();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Lists.newArrayList();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Lists.newArrayList();	  ArrayList    <    String>    propertyNames    =    Sets.newArrayList();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
28	[BUG]  [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  }	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());    	non-compiled	[CE]  <identifier>  expected	36	None	replace
29	[BUG]  [BUGGY]  PropertyType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  PropertyType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	PropertyType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());    	non-compiled	[CE]  <identifier>  expected	36	None	replace
30	[BUG]  [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getNativePropertyNames());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getNativePropertyNames());  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getNativePropertyNames());	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());    	non-compiled	[CE]  <identifier>  expected	36	None	replace
31	[BUG]  [BUGGY]  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());    	non-compiled	[CE]  <identifier>  expected	36	None	replace
32	[BUG]  [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getInferredPropertyNames());  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getInferredPropertyNames());  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getInferredPropertyNames());	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());    	non-compiled	[CE]  <identifier>  expected	36	None	replace
33	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newTreeSet(properties);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newTreeSet(properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Sets.newTreeSet(properties);	  ArrayList    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
34	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newTreeSet(propertyNames);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newTreeSet(propertyNames);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Sets.newTreeSet(propertyNames);	  ArrayList    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
35	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newTreeSet(this.properties);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newTreeSet(this.properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Sets.newTreeSet(this.properties);	  ArrayList    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
36	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    >    MAX_PRETTY_PRINTED_PROPERTIES)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
37	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype()  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype()  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype()	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    >    MAX_PRETTY_PRINTED_PROPERTIES)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
38	[BUG]  [BUGGY]  For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    >    MAX_PRETTY_PRINTED_PROPERTIES)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
39	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    >    MAX_PRETTY_PRINTED_PROPERTIES)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
40	[BUG]  [BUGGY]  For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype()  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype()  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype()	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    >    MAX_PRETTY_PRINTED_PROPERTIES)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
41	[BUG]  [BUGGY]  For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitProto  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitProto  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitProto	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    >    MAX_PRETTY_PRINTED_PROPERTIES)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
42	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newHashSet(properties);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newHashSet(properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Sets.newHashSet(properties);	  ArrayList    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
43	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newHashSet(propertyNames);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newHashSet(propertyNames);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Sets.newHashSet(propertyNames);	  ArrayList    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
44	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  properties);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  properties);	  ArrayList    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
45	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Lists.newArrayList(forAnnotations);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Lists.newArrayList(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Lists.newArrayList(forAnnotations);	  ArrayList    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
46	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
47	[BUG]  [BUGGY]  For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
48	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);  }	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
49	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES);	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
50	[BUG]  [BUGGY]  forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);  }	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
51	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newTreeSet(properties);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newTreeSet(properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newTreeSet(properties);	  List    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
52	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newArrayList(forAnnotations);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newArrayList(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newArrayList(forAnnotations);	  List    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
53	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newTreeSet(propertyNames);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newTreeSet(propertyNames);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newTreeSet(propertyNames);	  List    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
54	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(propertyName,  forAnnotations);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(propertyName,  forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Sets.newHashSet(propertyName,  forAnnotations);	  Collection    <    String>    propertyNames    =    Sets.newHashSet(propertyName);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
55	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(propertyName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(propertyName);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(propertyName);	  Collection    <    String>    propertyNames    =    Sets.newHashSet(propertyName);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
56	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newLinkedHashSet(forAnnotations);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newLinkedHashSet(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Sets.newLinkedHashSet(forAnnotations);	  Collection    <    String>    propertyNames    =    Sets.newLinkedHashSet();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
57	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(propertyNames,  forAnnotations);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(propertyNames,  forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(propertyNames,  forAnnotations);	  Set    <    String>    propertyNames    =    Sets.newHashSet(propertyNames);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
58	[BUG]  [BUGGY]  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames!=  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames!=  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames!=  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }	  if(forAnnotations)    {    forAnnotations    =    getImplicitPrototypeFallback();    if(propertyNames!=    null)    {    propertyNames    =    new    HashMap    <    String,ObjectType>();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
59	[BUG]  [BUGGY]  propertyNames  =  new  HashMap  <  String,ObjectType>();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  propertyNames  =  new  HashMap  <  String,ObjectType>();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	propertyNames  =  new  HashMap  <  String,ObjectType>();	  if(forAnnotations)    {    forAnnotations    =    getImplicitPrototypeFallback();    if(propertyNames!=    null)    {    propertyNames    =    new    HashMap    <    String,ObjectType>();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
60	[BUG]  [BUGGY]  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames  ==  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames  ==  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames  ==  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }	  if(forAnnotations)    {    forAnnotations    =    getImplicitPrototypeFallback();    if(propertyNames!=    null)    {    propertyNames    =    new    HashMap    <    String,ObjectType>();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
61	[BUG]  [BUGGY]  if(forAnnotations)  {  forAnnotations  =  getImplicitPrototypeFallback();  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  forAnnotations  =  getImplicitPrototypeFallback();  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  forAnnotations  =  getImplicitPrototypeFallback();  propertyNames  =  new  HashMap  <  String,ObjectType>();  }	  if(forAnnotations)    {    forAnnotations    =    getImplicitPrototypeFallback();    if(propertyNames!=    null)    {    propertyNames    =    new    HashMap    <    String,ObjectType>();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
62	[BUG]  [BUGGY]  if(forAnnotations)  {  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames!=  null)  {  properties  =  new  HashMap  <  String,ObjectType>();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames!=  null)  {  properties  =  new  HashMap  <  String,ObjectType>();  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames!=  null)  {  properties  =  new  HashMap  <  String,ObjectType>();  }	  if(forAnnotations)    {    forAnnotations    =    getImplicitPrototypeFallback();    if(propertyNames!=    null)    {    propertyNames    =    new    HashMap    <    String,ObjectType>();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
63	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  properties);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  properties);	  Collection    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
64	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred);	  Collection    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
65	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(this.properties);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(this.properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Sets.newHashSet(this.properties);	  Collection    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
66	[BUG]  [BUGGY]  String  propertyNames  =  Sets.newHashSet(forAnnotations);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  Sets.newHashSet(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  Sets.newHashSet(forAnnotations);	  String    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
67	[BUG]  [BUGGY]  String  propertyNames  =  Collections.newHashSet();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  Collections.newHashSet();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  Collections.newHashSet();	  String    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
68	[BUG]  [BUGGY]  String  propertyNames  =  Sets.newHashSet(properties);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  Sets.newHashSet(properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  Sets.newHashSet(properties);	  String    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
69	[BUG]  [BUGGY]  String  propertyNames  =  Sets.newHashSet(propertyNames);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  Sets.newHashSet(propertyNames);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  Sets.newHashSet(propertyNames);	  String    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
70	[BUG]  [BUGGY]  String  propertyNames  =  Sets.newHashSetWithProperties(forAnnotations);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  Sets.newHashSetWithProperties(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  Sets.newHashSetWithProperties(forAnnotations);	  String    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
71	[BUG]  [BUGGY]  String  propertyNames  =  Sets.newHashSetWithPropertyNames(forAnnotations);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  Sets.newHashSetWithPropertyNames(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  Sets.newHashSetWithPropertyNames(forAnnotations);	  String    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
72	[BUG]  [BUGGY]  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    it.hasNext();)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
73	[BUG]  [BUGGY]  For(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  For(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	For(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    it.hasNext();)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
74	[BUG]  [BUGGY]  For(ObjectType  current  =  forAnnotations;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  For(ObjectType  current  =  forAnnotations;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	For(ObjectType  current  =  forAnnotations;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    it.hasNext();)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
75	[BUG]  [BUGGY]  propertyNames.add(current.getImplicitPrototype());  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  propertyNames.add(current.getImplicitPrototype());  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	propertyNames.add(current.getImplicitPrototype());	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    it.hasNext();)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
76	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    it.hasNext();)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
77	[BUG]  [BUGGY]  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  properties.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  properties.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  properties.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    it.hasNext();)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
78	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newLinkedHashSet(forAnnotations);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newLinkedHashSet(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newLinkedHashSet(forAnnotations);	  List    <    String>    propertyNames    =    Sets.newLinkedHashSet();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
79	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(properties,  forAnnotations);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(properties,  forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newTreeSet(properties,  forAnnotations);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations,    properties);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
80	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  properties);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  properties);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations,    properties);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
81	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  properties);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  properties);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations,    properties);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
82	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  forAnnotations);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  forAnnotations);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations,    properties);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
83	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(properties,  forAnnotations);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(properties,  forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(properties,  forAnnotations);	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations,    properties);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
84	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(properties,  FOR_ANNOTATIONS);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(properties,  FOR_ANNOTATIONS);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(properties,  FOR_ANNOTATIONS);	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations,    properties);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
85	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  forAnnotations);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  forAnnotations);	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations,    properties);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
86	[BUG]  [BUGGY]  for(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
87	[BUG]  [BUGGY]  For(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  For(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	For(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
88	[BUG]  [BUGGY]  For(ObjectType  current  =  this;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  For(ObjectType  current  =  this;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	For(ObjectType  current  =  this;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
89	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
90	[BUG]  [BUGGY]  For(ObjectType  current  =  forAnnotations;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  For(ObjectType  current  =  forAnnotations;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	For(ObjectType  current  =  forAnnotations;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
91	[BUG]  [BUGGY]  for(ObjectType  current  =  implicitPrototypeFallback;  current  ==  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  implicitPrototypeFallback;  current  ==  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  implicitPrototypeFallback;  current  ==  null;)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
92	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newLinkedHashSet(forAnnotations);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newLinkedHashSet(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Sets.newLinkedHashSet(forAnnotations);	  Set    <    String>    propertyNames    =    Sets.newLinkedHashSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
93	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newLinkedHashSet(properties);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newLinkedHashSet(properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newLinkedHashSet(properties);	  Set    <    String>    propertyNames    =    Sets.newLinkedHashSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
94	[BUG]  [BUGGY]  HashSet  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  HashSet  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	HashSet  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations);	  HashSet    <    String>    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
95	[BUG]  [BUGGY]  HashSet  <  String>  propertyNames  =  Sets.newHashSet(properties);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  HashSet  <  String>  propertyNames  =  Sets.newHashSet(properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	HashSet  <  String>  propertyNames  =  Sets.newHashSet(properties);	  HashSet    <    String>    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
96	[BUG]  [BUGGY]  HashSet  <  String>  propertyNames  =  Sets.newHashSetIfNull(forAnnotations);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  HashSet  <  String>  propertyNames  =  Sets.newHashSetIfNull(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	HashSet  <  String>  propertyNames  =  Sets.newHashSetIfNull(forAnnotations);	  HashSet    <    String>    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
97	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  nativeType);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  nativeType);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  nativeType);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
98	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred,  nativeType);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred,  nativeType);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred,  nativeType);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
99	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
100	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred,  implicitPrototypeFallback);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred,  implicitPrototypeFallback);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred,  implicitPrototypeFallback);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
101	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
102	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred  +  1);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred  +  1);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred  +  1);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
103	[BUG]  [BUGGY]  if(forAnnotations)  {  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames  ==  null)  {  properties  =  new  HashMap  <  String,ObjectType>();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames  ==  null)  {  properties  =  new  HashMap  <  String,ObjectType>();  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames  ==  null)  {  properties  =  new  HashMap  <  String,ObjectType>();  }	  if(forAnnotations)    {    forAnnotations    =    getImplicitPrototypeFallback();    if(propertyNames    ==    null)    {    propertyNames    =    new    HashMap    <    String,ObjectType>();    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
104	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(this.properties);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(this.properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(this.properties);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(this.properties);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
105	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(this.properties,  forAnnotations);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(this.properties,  forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newTreeSet(this.properties,  forAnnotations);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(this.properties);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
106	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newTreeSet(this.properties);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newTreeSet(this.properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newTreeSet(this.properties);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(this.properties);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
107	[BUG]  [BUGGY]  String  propertyNames  =  getPropertyNames(propertyName);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  getPropertyNames(propertyName);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  getPropertyNames(propertyName);	  String    propertyNames    =    getPropertyNames();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
108	[BUG]  [BUGGY]  String  propertyNames  =  getPropertyNames(forAnnotations);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  getPropertyNames(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  getPropertyNames(forAnnotations);	  String    propertyNames    =    getPropertyNames();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
109	[BUG]  [BUGGY]  String  propertyNames  =  getPropertyName(propertyName);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  getPropertyName(propertyName);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  getPropertyName(propertyName);	  String    propertyNames    =    getPropertyNames();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
110	[BUG]  [BUGGY]  String  propertyNames  =  getPropertyNames(property);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  getPropertyNames(property);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  getPropertyNames(property);	  String    propertyNames    =    getPropertyNames();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
111	[BUG]  [BUGGY]  String  propertyNames  =  getPropertyNames(properties);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  getPropertyNames(properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  getPropertyNames(properties);	  String    propertyNames    =    getPropertyNames();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
112	[BUG]  [BUGGY]  String  propertyNames  =  getPropertyNames().toString();  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  getPropertyNames().toString();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  getPropertyNames().toString();	  String    propertyNames    =    getPropertyNames();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
113	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add(current.get  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add(current.get  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add(current.get	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.add(current.getOwnPro    	non-compiled	[CE]  <identifier>  expected	49	None	replace
114	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add(current.get  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add(current.get  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add(current.get	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.add(current.getOwnPro    	non-compiled	[CE]  <identifier>  expected	49	None	replace
115	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add(current.  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add(current.  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add(current.	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.add(current.getOwnPro    	non-compiled	[CE]  <identifier>  expected	49	None	replace
116	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
117	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
118	[BUG]  [BUGGY]  For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
119	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
120	[BUG]  [BUGGY]  for(ObjectType  current  =  null;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  null;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  null;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
121	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
122	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  }	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
123	[BUG]  [BUGGY]  For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	For(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
124	[BUG]  [BUGGY]  for(ObjectType  current  =  null;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  null;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  null;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
125	[BUG]  [BUGGY]  for(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    getImplicitPrototype();    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
126	[BUG]  [BUGGY]  For(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  For(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	For(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    getImplicitPrototype();    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
127	[BUG]  [BUGGY]  PropertyType  current  =  getImplicitPrototype();  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  PropertyType  current  =  getImplicitPrototype();  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	PropertyType  current  =  getImplicitPrototype();  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    getImplicitPrototype();    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
128	[BUG]  [BUGGY]  For(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  properties.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  For(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  properties.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	For(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  properties.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    getImplicitPrototype();    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
129	[BUG]  [BUGGY]  for(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  properties.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  properties.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  properties.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    getImplicitPrototype();    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
130	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newArrayList(forAnnotations);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newArrayList(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Sets.newArrayList(forAnnotations);	  Collection    <    String>    propertyNames    =    Sets.newArrayList();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
131	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred);	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
132	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred,  nativeType);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred,  nativeType);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred,  nativeType);	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
133	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred);	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
134	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred  +  1);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred  +  1);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred  +  1);	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
135	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(properties,  inferred);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(properties,  inferred);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(properties,  inferred);	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
136	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  0);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  0);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  0);	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
137	[BUG]  [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  }	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
138	[BUG]  [BUGGY]  PropertyType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  PropertyType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	PropertyType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
139	[BUG]  [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback,  forAnnotations);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback,  forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback,  forAnnotations);	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
140	[BUG]  [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(forAnnotations);  propertyNames.addAll(implicitPrototypeFallback);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(forAnnotations);  propertyNames.addAll(implicitPrototypeFallback);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(forAnnotations);  propertyNames.addAll(implicitPrototypeFallback);	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
141	[BUG]  [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  }  else  {  for(ObjectType  implicitPrototypeFallback  =  implicitPrototypeF  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  }  else  {  for(ObjectType  implicitPrototypeFallback  =  implicitPrototypeF  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  }  else  {  for(ObjectType  implicitPrototypeFallback  =  implicitPrototypeF	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
142	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Lists.newArrayList(forAnnotations);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Lists.newArrayList(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Lists.newArrayList(forAnnotations);	  Collection    <    String>    propertyNames    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
143	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Lists.newHashSet();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Lists.newHashSet();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Lists.newHashSet();	  Collection    <    String>    propertyNames    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
144	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Lists.newArrayList();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Lists.newArrayList();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Lists.newArrayList();	  Collection    <    String>    propertyNames    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
145	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Lists.newLinkedList();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Lists.newLinkedList();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Lists.newLinkedList();	  Collection    <    String>    propertyNames    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
146	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Lists.newArrayList(properties);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Lists.newArrayList(properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Lists.newArrayList(properties);	  Collection    <    String>    propertyNames    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
147	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Lists.newArrayList(0);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Lists.newArrayList(0);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Lists.newArrayList(0);	  Collection    <    String>    propertyNames    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
148	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newHashMap();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newHashMap();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newHashMap();	  List    <    String>    propertyNames    =    Sets.newTreeList();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
149	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newTreeList();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newTreeList();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Sets.newTreeList();	  List    <    String>    propertyNames    =    Sets.newTreeList();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
150	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(properties,  forAnnotations);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(properties,  forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Sets.newHashSet(properties,  forAnnotations);	  Collection    <    String>    propertyNames    =    Sets.newHashSet(properties);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
151	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(propertyNames,  forAnnotations);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(propertyNames,  forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Sets.newHashSet(propertyNames,  forAnnotations);	  Collection    <    String>    propertyNames    =    Sets.newHashSet(propertyNames);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
152	[BUG]  [BUGGY]  if(!forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(!forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(!forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  }	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.add(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
153	[BUG]  [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback,  nativeType);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback,  nativeType);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback,  nativeType);	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.add(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
154	[BUG]  [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback,  inferred);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback,  inferred);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback,  inferred);	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.add(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
155	[BUG]  [BUGGY]  ForAnnotations  {  for(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ForAnnotations  {  for(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ForAnnotations  {  for(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
156	[BUG]  [BUGGY]  for(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  properties.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  properties.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  properties.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
157	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  properties.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  properties.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  properties.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
158	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  >=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  >=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  >=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOwnPro    	non-compiled	[CE]  <identifier>  expected	47	None	replace
159	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOwnPro    	non-compiled	[CE]  <identifier>  expected	47	None	replace
160	[BUG]  [BUGGY]  if(!inferred)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(!inferred)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(!inferred)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOwnPro    	non-compiled	[CE]  <identifier>  expected	47	None	replace
161	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOwnPro    	non-compiled	[CE]  <identifier>  expected	47	None	replace
162	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  ==  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  ==  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  ==  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOwnPro    	non-compiled	[CE]  <identifier>  expected	47	None	replace
163	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  Arrays.asList(properties));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  Arrays.asList(properties));  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  Arrays.asList(properties));	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations,    properties);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
164	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(this.propertyName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(this.propertyName);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Sets.newHashSet(this.propertyName);	  Collection    <    String>    propertyNames    =    Sets.newHashSet(propertyName);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
165	[BUG]  [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(propertyNames);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(propertyNames);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(propertyNames);	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
166	[BUG]  [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(nativeType);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(nativeType);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(nativeType);	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
167	[BUG]  [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(inferred);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(inferred);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback(inferred);	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
168	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newLinkedHashMap();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newLinkedHashMap();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newLinkedHashMap();	  List    <    String>    propertyNames    =    Sets.newLinkedHashSet();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
169	[BUG]  [BUGGY]  AnnotatedType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  AnnotatedType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	AnnotatedType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
170	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);  }	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
171	[BUG]  [BUGGY]  for(ObjectType  current  =  null;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  null;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  null;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES);	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
172	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashMap();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashMap();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Sets.newHashMap();	  Collection    <    String>    propertyNames    =    Sets.newArrayList();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
173	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  properties.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  properties.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  properties.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    getImplicitPrototype();    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
174	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  getImplicitPrototype();  current  >=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  getImplicitPrototype();  current  >=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  getImplicitPrototype();  current  >=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    getImplicitPrototype();    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
175	[BUG]  [BUGGY]  if(!inferred)  {  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames!=  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(!inferred)  {  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames!=  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(!inferred)  {  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames!=  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }	  if(forAnnotations)    {    forAnnotations    =    getImplicitPrototypeFallback();    if(propertyNames!=    null)    {    propertyNames    =    new    HashMap    <    String,ObjectType>();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
176	[BUG]  [BUGGY]  if(forAnnotations)  {  propertyNames  =  getImplicitPrototypeFallback();  if(propertyNames!=  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  propertyNames  =  getImplicitPrototypeFallback();  if(propertyNames!=  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  propertyNames  =  getImplicitPrototypeFallback();  if(propertyNames!=  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }	  if(forAnnotations)    {    forAnnotations    =    getImplicitPrototypeFallback();    if(propertyNames!=    null)    {    propertyNames    =    new    HashMap    <    String,ObjectType>();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
177	[BUG]  [BUGGY]  PropertyType  ownerFunction  =  getImplicitPrototypeFallback();  if(propertyNames!=  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  PropertyType  ownerFunction  =  getImplicitPrototypeFallback();  if(propertyNames!=  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	PropertyType  ownerFunction  =  getImplicitPrototypeFallback();  if(propertyNames!=  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }	  if(forAnnotations)    {    forAnnotations    =    getImplicitPrototypeFallback();    if(propertyNames!=    null)    {    propertyNames    =    new    HashMap    <    String,ObjectType>();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
178	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  properties.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  properties.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  properties.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    it.hasNext();)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
179	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.remove(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.remove(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.remove(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    it.hasNext();)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
180	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newHashSet(this.properties);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newHashSet(this.properties);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newHashSet(this.properties);	  List    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
181	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(propertyNames,  forAnnotations);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(propertyNames,  forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newTreeSet(propertyNames,  forAnnotations);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(propertyNames);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
182	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newLinkedHashSet(forAnnotations,  inferred);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newLinkedHashSet(forAnnotations,  inferred);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newLinkedHashSet(forAnnotations,  inferred);	  Set    <    String>    propertyNames    =    Sets.newLinkedHashSet(forAnnotations);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
183	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newLinkedList(forAnnotations);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newLinkedList(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Sets.newLinkedList(forAnnotations);	  ArrayList    <    String>    propertyNames    =    Sets.newLinkedList();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
184	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOw    	non-compiled	[CE]  <identifier>  expected	45	None	replace
185	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitProto  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitProto  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitProto	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    >    MAX_PRETTY_PRINTED_PROPERTIES)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
186	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPro  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPro  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPro	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    >    MAX_PRETTY_PRINTED_PROPERTIES)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
187	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.get  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.get  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.get	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    >    MAX_PRETTY_PRINTED_PROPERTIES)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
188	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    >    MAX_PRETTY_PRINTED_PROPERTIES)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
189	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype()  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype()  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype()	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    >    MAX_PRETTY_PRINTED_PROPERTIES)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
190	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  }	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
191	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativePrototype()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativePrototype()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativePrototype()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
192	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
193	[BUG]  [BUGGY]  String  propertyNames  =  Sets.newLinkedHashSet();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  Sets.newLinkedHashSet();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  Sets.newLinkedHashSet();	  String    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
194	[BUG]  [BUGGY]  String  propertyNames  =  getImplicitPrototypeNames();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  getImplicitPrototypeNames();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  getImplicitPrototypeNames();	  String    propertyNames    =    getPropertyNames();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
195	[BUG]  [BUGGY]  String  propertyNames  =  getReferenceNames();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  getReferenceNames();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  getReferenceNames();	  String    propertyNames    =    getPropertyNames();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
196	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newArrayListWithCapacity(forAnnotations);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newArrayListWithCapacity(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newArrayListWithCapacity(forAnnotations);	  List    <    String>    propertyNames    =    Sets.newArrayList();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
197	[BUG]  [BUGGY]  HashSet  <  String>  propertyNames  =  Sets.newHashSetWithProperties(forAnnotations);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  HashSet  <  String>  propertyNames  =  Sets.newHashSetWithProperties(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	HashSet  <  String>  propertyNames  =  Sets.newHashSetWithProperties(forAnnotations);	  HashSet    <    String>    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
198	[BUG]  [BUGGY]  HashSet  <  String>  propertyNames  =  Sets.newHashSetWithPropertyNames();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  HashSet  <  String>  propertyNames  =  Sets.newHashSetWithPropertyNames();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	HashSet  <  String>  propertyNames  =  Sets.newHashSetWithPropertyNames();	  HashSet    <    String>    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
199	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Lists.newArrayListWithCapacity(forAnnotations);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Lists.newArrayListWithCapacity(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Lists.newArrayListWithCapacity(forAnnotations);	  Collection    <    String>    propertyNames    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
200	[BUG]  [BUGGY]  if(!forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(!forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(!forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  }	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());    	non-compiled	[CE]  <identifier>  expected	36	None	replace
201	[BUG]  [BUGGY]  AnnotatedType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  AnnotatedType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	AnnotatedType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());    	non-compiled	[CE]  <identifier>  expected	36	None	replace
202	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
203	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativePrototype()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativePrototype()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativePrototype()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype());	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
204	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newHashMap();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newHashMap();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Sets.newHashMap();	  ArrayList    <    String>    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
205	[BUG]  [BUGGY]  List  <  String>  propertyNames  =  Sets.newTreeList(forAnnotations);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  List  <  String>  propertyNames  =  Sets.newTreeList(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	List  <  String>  propertyNames  =  Sets.newTreeList(forAnnotations);	  List    <    String>    propertyNames    =    Sets.newTreeList();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
206	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(inferred,  forAnnotations);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(inferred,  forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newTreeSet(inferred,  forAnnotations);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
207	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(properties,  inferred);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(properties,  inferred);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newTreeSet(properties,  inferred);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
208	[BUG]  [BUGGY]  if(!inferred)  {  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames  ==  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(!inferred)  {  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames  ==  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(!inferred)  {  forAnnotations  =  getImplicitPrototypeFallback();  if(propertyNames  ==  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }	  if(forAnnotations)    {    forAnnotations    =    getImplicitPrototypeFallback();    if(propertyNames    ==    null)    {    propertyNames    =    new    HashMap    <    String,ObjectType>();    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
209	[BUG]  [BUGGY]  if(forAnnotations)  {  propertyNames  =  getImplicitPrototypeFallback();  if(propertyNames  ==  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  propertyNames  =  getImplicitPrototypeFallback();  if(propertyNames  ==  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  propertyNames  =  getImplicitPrototypeFallback();  if(propertyNames  ==  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }	  if(forAnnotations)    {    forAnnotations    =    getImplicitPrototypeFallback();    if(propertyNames    ==    null)    {    propertyNames    =    new    HashMap    <    String,ObjectType>();    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
210	[BUG]  [BUGGY]  PropertyType  ownerFunction  =  getImplicitPrototypeFallback();  if(propertyNames  ==  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  PropertyType  ownerFunction  =  getImplicitPrototypeFallback();  if(propertyNames  ==  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	PropertyType  ownerFunction  =  getImplicitPrototypeFallback();  if(propertyNames  ==  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }	  if(forAnnotations)    {    forAnnotations    =    getImplicitPrototypeFallback();    if(propertyNames    ==    null)    {    propertyNames    =    new    HashMap    <    String,ObjectType>();    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
211	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(this.propertyNames);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(this.propertyNames);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Sets.newHashSet(this.propertyNames);	  Collection    <    String>    propertyNames    =    Sets.newHashSet(propertyNames);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
212	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  implicitPrototypeFallback);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  implicitPrototypeFallback);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  implicitPrototypeFallback);	  Set    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations,    properties);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
213	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  nativeType);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  nativeType);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  nativeType);	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
214	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred).keySet();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred).keySet();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations,  inferred).keySet();	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
215	[BUG]  [BUGGY]  if(forAnnotations)  {  forAnnotations  =  getImplicitReferenceName();  if(propertyNames  ==  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  forAnnotations  =  getImplicitReferenceName();  if(propertyNames  ==  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  forAnnotations  =  getImplicitReferenceName();  if(propertyNames  ==  null)  {  propertyNames  =  new  HashMap  <  String,ObjectType>();  }	  if(forAnnotations)    {    forAnnotations    =    getImplicitPrototypeFallback();    if(propertyNames    ==    null)    {    propertyNames    =    new    HashMap    <    String,ObjectType>();    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
216	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add(current.get  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add(current.get  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add(current.get	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.add(current.getOwnPro    	non-compiled	[CE]  <identifier>  expected	49	None	replace
217	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add(current.getOw  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add(current.getOw  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.add(current.getOw	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.add(current.getOwnPro    	non-compiled	[CE]  <identifier>  expected	49	None	replace
218	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(inferred,  forAnnotations);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(inferred,  forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(inferred,  forAnnotations);	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
219	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOwnPro    	non-compiled	[CE]  <identifier>  expected	47	None	replace
220	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOwnPro    	non-compiled	[CE]  <identifier>  expected	47	None	replace
221	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.get  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.get  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.get	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOwnPro    	non-compiled	[CE]  <identifier>  expected	47	None	replace
222	[BUG]  [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOw  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOw  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOw	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <=    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    {    propertyNames.addAll(current.getOwnPro    	non-compiled	[CE]  <identifier>  expected	47	None	replace
223	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).propers();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).propers();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newHashSet(forAnnotations).propers();	  Set    <    String>    propertyNames    =    Sets.newHashSet(forAnnotations).keySet();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
224	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativePrototype()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativePrototype()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativePrototype()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    >    MAX_PRETTY_PRINTED_PROPERTIES)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
225	[BUG]  [BUGGY]  if(!forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(!forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(!forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  }	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
226	[BUG]  [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  }  else  {  for(  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  }  else  {  for(  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback);  }  else  {  for(	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
227	[BUG]  [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newArrayListWithCapacity(forAnnotations);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ArrayList  <  String>  propertyNames  =  Sets.newArrayListWithCapacity(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ArrayList  <  String>  propertyNames  =  Sets.newArrayListWithCapacity(forAnnotations);	  ArrayList    <    String>    propertyNames    =    Sets.newArrayList();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
228	[BUG]  [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  }  else  {  properties.add(implicitPrototypeFallback);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  }  else  {  properties.add(implicitPrototypeFallback);  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.add(implicitPrototypeFallback);  }  else  {  properties.add(implicitPrototypeFallback);  }	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.add(implicitPrototypeFallback);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
229	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(property);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Sets.newHashSet(property);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Sets.newHashSet(property);	  Collection    <    String>    propertyNames    =    Sets.newHashSet(propertyName);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
230	[BUG]  [BUGGY]  String  propertyNames  =  getPropertyNamesForAnnotations();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  getPropertyNamesForAnnotations();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  getPropertyNamesForAnnotations();	  String    propertyNames    =    getPropertyNames();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
231	[BUG]  [BUGGY]  String  propertyNames  =  getPropertyNames().toArray(property);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  getPropertyNames().toArray(property);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  getPropertyNames().toArray(property);	  String    propertyNames    =    getPropertyNames();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
232	[BUG]  [BUGGY]  if(getImplicitPrototypeFallback()!=  null)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(getImplicitPrototypeFallback()!=  null)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(getImplicitPrototypeFallback()!=  null)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  }	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());    	non-compiled	[CE]  <identifier>  expected	36	None	replace
233	[BUG]  [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  }  else  {  for(  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  }  else  {  for(  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	if(forAnnotations)  {  ObjectType  implicitPrototypeFallback  =  getImplicitPrototypeFallback();  propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());  }  else  {  for(	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    propertyNames.addAll(implicitPrototypeFallback.getOwnPropertyNames());    	non-compiled	[CE]  <identifier>  expected	36	None	replace
234	[BUG]  [BUGGY]  Collection  <  String>  propertyNames  =  Lists.newArrayListIfNull(forAnnotations);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Collection  <  String>  propertyNames  =  Lists.newArrayListIfNull(forAnnotations);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Collection  <  String>  propertyNames  =  Lists.newArrayListIfNull(forAnnotations);	  Collection    <    String>    propertyNames    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
235	[BUG]  [BUGGY]  HashSet  <  String>  propertyNames  =  Sets.newHashSet(propertyNames);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  HashSet  <  String>  propertyNames  =  Sets.newHashSet(propertyNames);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	HashSet  <  String>  propertyNames  =  Sets.newHashSet(propertyNames);	  HashSet    <    String>    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
236	[BUG]  [BUGGY]  HashSet  <  String>  propertyNames  =  Sets.newHashSet(propertyName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  HashSet  <  String>  propertyNames  =  Sets.newHashSet(propertyName);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	HashSet  <  String>  propertyNames  =  Sets.newHashSet(propertyName);	  HashSet    <    String>    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
237	[BUG]  [BUGGY]  try  {  for(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  try  {  for(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	try  {  for(ObjectType  current  =  getImplicitPrototype();  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    getImplicitPrototype();    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
238	[BUG]  [BUGGY]  Annotations  <  ObjectType>  forAnnotations  =  getImplicitPrototype();  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Annotations  <  ObjectType>  forAnnotations  =  getImplicitPrototype();  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Annotations  <  ObjectType>  forAnnotations  =  getImplicitPrototype();  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    getImplicitPrototype();    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
239	[BUG]  [BUGGY]  propertyNames.add(current.getOwnPropertyNames());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  propertyNames.add(current.getOwnPropertyNames());  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	propertyNames.add(current.getOwnPropertyNames());	  if(forAnnotations)    {    for(ObjectType    current    =    getImplicitPrototype();    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
240	[BUG]  [BUGGY]  Annotations  <  ObjectType>  forAnnotations  =  getImplicitPrototype();  forAnnotations  ==  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Annotations  <  ObjectType>  forAnnotations  =  getImplicitPrototype();  forAnnotations  ==  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Annotations  <  ObjectType>  forAnnotations  =  getImplicitPrototype();  forAnnotations  ==  null;)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    getImplicitPrototype();    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
241	[BUG]  [BUGGY]  ObjectType  implicitPrototypeFallback  =  createImplicitPrototypeFallback();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  ObjectType  implicitPrototypeFallback  =  createImplicitPrototypeFallback();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	ObjectType  implicitPrototypeFallback  =  createImplicitPrototypeFallback();	  ObjectType    implicitPrototypeFallback    =    getImplicitPrototypeFallback();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
242	[BUG]  [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	for(ObjectType  current  =  this;  current!=  null  &&!current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {	  if(forAnnotations)    {    for(ObjectType    current    =    this;    current!=    null    &&!current.isNativeObjectType()    &&    propertyNames.size()    <    MAX_PRETTY_PRINTED_PROPERTIES;    current    =    current.getImplicitPrototype())    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
243	[BUG]  [BUGGY]  try  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  try  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	try  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    it.hasNext();)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
244	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,ObjectType  ==  propertyNames)  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Iterator  <  Map.Entry  <  String,ObjectType  ==  propertyNames)  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Iterator  <  Map.Entry  <  String,ObjectType  ==  propertyNames)  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    it.hasNext();)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
245	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,ObjectType  ==  propertyNames)  {  if(forAnnotations)  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Iterator  <  Map.Entry  <  String,ObjectType  ==  propertyNames)  {  if(forAnnotations)  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Iterator  <  Map.Entry  <  String,ObjectType  ==  propertyNames)  {  if(forAnnotations)  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    it.hasNext();)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
246	[BUG]  [BUGGY]  Iterator  <  Map.Entry  <  String,ObjectType!=  propertyNames)  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Iterator  <  Map.Entry  <  String,ObjectType!=  propertyNames)  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Iterator  <  Map.Entry  <  String,ObjectType!=  propertyNames)  {  for(ObjectType  current  =  implicitPrototypeFallback;  it.hasNext();)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    it.hasNext();)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
247	[BUG]  [BUGGY]  String  propertyNames  =  Sets.newHashSet(propertyName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  String  propertyNames  =  Sets.newHashSet(propertyName);  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	String  propertyNames  =  Sets.newHashSet(propertyName);	  String    propertyNames    =    Sets.newHashSet();    	non-compiled	[CE]  <identifier>  expected	28	None	replace
248	[BUG]  [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred).keySet();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred).keySet();  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	Set  <  String>  propertyNames  =  Sets.newTreeSet(forAnnotations,  inferred).keySet();	  Set    <    String>    propertyNames    =    Sets.newTreeSet(forAnnotations,    inferred);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
249	[BUG]  [BUGGY]  try  {  for(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      String  toStringHelper(boolean  forAnnotations)  {  if  (hasReferenceName())  {  return  getReferenceName();  }  else  if  (prettyPrint)  {  prettyPrint  =  false;        [BUGGY]  try  {  for(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }  [BUGGY]      for  (ObjectType  current  =  this;  current  !=  null  &&  !current.isNativeObjectType()  &&  propertyNames.size()  <=  MAX_PRETTY_PRINTED_PROPERTIES;  current  =  current.getImplicitPrototype())  {  propertyNames.addAll(current.getOwnPropertyNames());  }  StringBuilder  sb  =  new  StringBuilder();  sb.append(     "{     ");  [CLASS]  PrototypeObjectType  [METHOD]  toStringHelper  [RETURN_TYPE]  String  boolean  forAnnotations  [VARIABLES]  ObjectType  current  implicitPrototype  implicitPrototypeFallback  interfaceType  nativeType  boolean  forAnnotations  inferred  nativeType  prettyPrint  Set  propertyNames  StringBuilder  sb  FunctionType  ownerFunction  String  className  name  prop  property  propertyName  Map  properties  long  serialVersionUID  int  MAX_PRETTY_PRINTED_PROPERTIES  i  localCount  	projects/Closure33/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java	0.2886751345948129	361	361	1	replace	try  {  for(ObjectType  current  =  implicitPrototypeFallback;  current!=  null;)  {  propertyNames.add(current.getImplicitPrototype());  }	  if(forAnnotations)    {    for(ObjectType    current    =    implicitPrototypeFallback;    current!=    null;)    {    propertyNames.add(current.getImplicitPrototype());    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
