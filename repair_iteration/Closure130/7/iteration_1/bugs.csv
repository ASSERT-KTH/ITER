bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  timeout  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]  int  size  =  aliasRefs.references.size()  -  1;  [BUGGY]  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	add	int  size  =  aliasRefs.references.size()  -  1;	int  size  =  aliasRefs.references.size();  	compilable	timeout	13	1	replace
2	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  -  1;  timeout  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]  int  size  =  aliasRefs.references.size()  -  1;  [BUGGY]  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	int  size  =  aliasRefs.references.size()  -  1;	int  size  =  aliasRefs.references.size();  	compilable	timeout	13	1	replace
3	[BUG]  [BUGGY]  timeout  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]  int  size  =  aliasRefs.references.size()  +  1;  [BUGGY]  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	add	int  size  =  aliasRefs.references.size()  +  1;	int  size  =  aliasRefs.references.size();  	compilable	timeout	13	1	replace
4	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  +  1;  timeout  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]  int  size  =  aliasRefs.references.size()  +  1;  [BUGGY]  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	int  size  =  aliasRefs.references.size()  +  1;	int  size  =  aliasRefs.references.size();  	compilable	timeout	13	1	replace
5	[BUG]  [BUGGY]  int  size  =  aliasRefs.firstReferenceIsAssigningDeclaration();  [CE]  incompatible  types  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]  int  size  =  aliasRefs.firstReferenceIsAssigningDeclaration();  [BUGGY]  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	int  size  =  aliasRefs.firstReferenceIsAssigningDeclaration();	int  size  =  aliasRefs.references.size();  	non-compiled	[CE]  incompatible  types	13	None	replace
6	[BUG]  [BUGGY]  timeout  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]  int  size  =  aliasRefs.references.size()  -  2;  [BUGGY]  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	add	int  size  =  aliasRefs.references.size()  -  2;	int  size  =  aliasRefs.references.size();  	compilable	timeout	13	1	replace
7	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  -  2;  timeout  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]  int  size  =  aliasRefs.references.size()  -  2;  [BUGGY]  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	int  size  =  aliasRefs.references.size()  -  2;	int  size  =  aliasRefs.references.size();  	compilable	timeout	13	1	replace
8	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  size  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]    [BUGGY]  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	  	int  size  =  aliasRefs.references.size();  	non-compiled	[CE]  cannot  find  symbol  size	13	None	replace
9	[BUG]  [BUGGY]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {		non-compiled	[CE]  illegal  start  of  expression	14	None	add
10	[BUG]  [BUGGY]    if  (!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]    if  (!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	    if  (!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {		non-compiled	[CE]  illegal  start  of  expression	14	None	add
11	[BUG]  [BUGGY]    if  (aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]    if  (aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	    if  (aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {		non-compiled	[CE]  illegal  start  of  expression	14	None	add
12	[BUG]  [BUGGY]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssignedDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssignedDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssignedDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {		non-compiled	[CE]  illegal  start  of  expression	14	None	add
13	[BUG]  [BUGGY]  int  size  =  aliasRefs.getSize();  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]  int  size  =  aliasRefs.getSize();  [BUGGY]  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	int  size  =  aliasRefs.getSize();	int  size  =  aliasRefs.references.size();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
14	[BUG]  [BUGGY]  int  size  =  aliasRefs.firstReferenceIsWellDefined();  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]  int  size  =  aliasRefs.firstReferenceIsWellDefined();  [BUGGY]  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	int  size  =  aliasRefs.firstReferenceIsWellDefined();	int  size  =  aliasRefs.references.size();  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
15	[BUG]  [BUGGY]    aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]    aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	    aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {		non-compiled	[CE]  not  a  statement	14	None	add
16	[BUG]  [BUGGY]  timeout  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]    Preconditions.checkState(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	add	    Preconditions.checkState(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());		compilable	timeout	14	1	add
17	[BUG]  [BUGGY]    Preconditions.checkState(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  timeout  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]    Preconditions.checkState(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	    Preconditions.checkState(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());		compilable	timeout	14	1	add
18	[BUG]  [BUGGY]    aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime()  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]    aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime()  [BUGGY]  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	    aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime()		non-compiled	[CE]  not  a  statement	14	None	add
19	[BUG]  [BUGGY]    aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]    aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	    aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());		non-compiled	[CE]  not  a  statement	14	None	add
20	[BUG]  [BUGGY]  timeout  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]    Preconditions.checkState(aliasRefs.isWellDefined(),  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	add	    Preconditions.checkState(aliasRefs.isWellDefined(),  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());		compilable	timeout	14	1	add
21	[BUG]  [BUGGY]    Preconditions.checkState(aliasRefs.isWellDefined(),  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  timeout  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]    Preconditions.checkState(aliasRefs.isWellDefined(),  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	    Preconditions.checkState(aliasRefs.isWellDefined(),  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());		compilable	timeout	14	1	add
22	[BUG]  [BUGGY]    aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.hasAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {    [BUGGY]    aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.hasAssignedOnceInLifetime())  {  [BUGGY]  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	    aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.hasAssignedOnceInLifetime())  {		non-compiled	[CE]  not  a  statement	14	None	add
