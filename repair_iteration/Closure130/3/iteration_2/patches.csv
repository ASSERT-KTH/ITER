bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  alias.node.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  alias.node.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	alias.node.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  alias.node.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
2	[BUG]  [BUGGY]  alias.node.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  alias.node.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	alias.node.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  alias.node.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
3	[BUG]  [BUGGY]  alias.node.cloneTree()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  alias.node.cloneTree()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	alias.node.cloneTree()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  alias.node.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
4	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  newNode  =  alias.node.getFirstChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    IllegalArgumentException    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  newNode  =  alias.node.getFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node    newNode    =    alias.node.getFirstChild();    Node  newNode  =  alias.node.getFirstChild();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	18	None	add
5	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  newNode  =  alias.node.getLastChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      IllegalArgumentException    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  newNode  =  alias.node.getLastChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node    newNode    =    alias.node.getFirstChild();    Node  newNode  =  alias.node.getLastChild();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	18	None	add
6	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  alias.node  =  alias.getFirstChild();  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  alias.node  =  alias.getFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node    newNode    =    alias.node.getFirstChild();    Node  alias.node  =  alias.getFirstChild();	  	non-compiled	[CE]  ';'  expected	18	None	add
7	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  oldNode  =  alias.node.getFirstChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          IllegalArgumentException    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  oldNode  =  alias.node.getFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node    newNode    =    alias.node.getFirstChild();    Node  oldNode  =  alias.node.getFirstChild();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	18	None	add
8	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  node  =  alias.node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]            IllegalArgumentException    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  node  =  alias.node.getFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node    newNode    =    alias.node.getFirstChild();    node  =  alias.node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  node	18	None	add
9	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references.get(i  +  1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references.get(i  +  1);	  Node    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	9	None	replace
10	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  newNodes);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references.get(i,  newNodes);	  Node    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	9	None	replace
11	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i++);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references.get(i++);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references.get(i++);	  Node    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	9	None	replace
12	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  namespace);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  namespace);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references.get(i,  namespace);	  Node    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	9	None	replace
13	[BUG]  [BUGGY]  Node  aliasRef  =  alias.references.get(i  +  1);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRef  =  alias.references.get(i  +  1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRef  =  alias.references.get(i  +  1);	  Node    aliasRef    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	36	None	replace
14	[BUG]  [BUGGY]  Node  aliasRef  =  alias.references.get(i,  newNodes);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRef  =  alias.references.get(i,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRef  =  alias.references.get(i,  newNodes);	  Node    aliasRef    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	36	None	replace
15	[BUG]  [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
16	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  cannot  find  symbol  newNode  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol  newNode	97	None	replace
17	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  cannot  find  symbol  newNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol  newNode	97	None	replace
18	[BUG]  [BUGGY]  if(aliasRef.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
19	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	73	None	replace
20	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(0);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references.get(0);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references.get(0);	  Node    aliasRefs    =    alias.references.get();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	98	None	replace
21	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references.get(1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references.get(1);	  Node    aliasRefs    =    alias.references.get();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	98	None	replace
22	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.references.get();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.node.references.get();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.node.references.get();	  Node    aliasRefs    =    alias.references.get();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	98	None	replace
23	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.references.cloneTree();  [CE]  cannot  find  symbol  references  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.references.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.references.cloneTree();	  Node    newNode    =    aliasRef.node.references.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  references	77	None	replace
24	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.cloneTree();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRefs.references.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRefs.references.cloneTree();	  Node    newNode    =    aliasRef.node.references.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
25	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.node.references.cloneTree();  [CE]  cannot  find  symbol  node  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRefs.node.references.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRefs.node.references.cloneTree();	  Node    newNode    =    aliasRef.node.references.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  node	77	None	replace
26	[BUG]  [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
27	[BUG]  [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(i);  }  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(i);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(i);  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
28	[BUG]  [BUGGY]  if(alias.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(alias.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(alias.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
29	[BUG]  [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(var);  }  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(var);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(var);  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
30	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.getParent();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	add	Node  newNode  =  aliasRef.getParent();	  Node    newNode    =    aliasRef.node.getParent();    	compilable	  [FE]  IllegalArgumentException  	26	10	replace
31	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.getParent();  [FE]  IllegalArgumentException  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.getParent();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.getParent();	  Node    newNode    =    aliasRef.node.getParent();    	compilable	  [FE]  IllegalArgumentException  	26	10	replace
32	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(aliasRef,  i);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.getParent().removeChild(aliasRef,  i);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.getParent().removeChild(aliasRef,  i);	  aliasRefs.getParent().removeChild(aliasRef,    i);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	90	None	replace
33	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce())    {    	non-compiled	[CE]  not  a  statement	102	None	replace
34	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce())    {    	non-compiled	[CE]  not  a  statement	102	None	replace
35	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce())    {    	non-compiled	[CE]  not  a  statement	102	None	replace
36	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.assignedOnceInLifetime());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.assignedOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.assignedOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.assignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	64	None	replace
37	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.assignedOnceInLifetime());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.assignedOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.assignedOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.assignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	64	None	replace
38	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.initializingOnceInLifetime());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.initializingOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.initializingOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.assignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	64	None	replace
39	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	7	None	replace
40	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	7	None	replace
41	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  newNodes.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  newNodes.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  newNodes.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	7	None	replace
42	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.cloneTree();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.node.cloneTree();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.node.cloneTree();	  Node    aliasRefs    =    aliasRef.cloneTree();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	100	None	replace
43	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.cloneTree();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references.cloneTree();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references.cloneTree();	  Node    aliasRefs    =    aliasRef.cloneTree();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	100	None	replace
44	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.refs.cloneTree();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.refs.cloneTree();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.refs.cloneTree();	  Node    aliasRefs    =    aliasRef.cloneTree();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	100	None	replace
45	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRef.getNode();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRef.getNode();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRef.getNode();	  Node    aliasRefs    =    aliasRef.cloneTree();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	100	None	replace
46	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	63	None	replace
47	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isLocalOnce())    {    	non-compiled	[CE]  not  a  statement	103	None	replace
48	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isLocalOnce())    {    	non-compiled	[CE]  not  a  statement	103	None	replace
49	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isLocalOnce())    {    	non-compiled	[CE]  not  a  statement	103	None	replace
50	[BUG]  [BUGGY]  alias.node.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce())  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  alias.node.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	alias.node.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isLocalOnce())    {    	non-compiled	[CE]  not  a  statement	103	None	replace
51	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  node  =  aliasRef.removeFirstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  node  =  aliasRef.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.removeFirstChild();  Node  node  =  aliasRef.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    node    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  node  =  alias.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	add	Node  newNode  =  alias.node.getFirstChild();  Node  node  =  alias.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    node    =    alias.node.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	67	10	replace
53	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  node  =  alias.node.removeFirstChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  node  =  alias.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.getFirstChild();  Node  node  =  alias.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    node    =    alias.node.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	67	10	replace
54	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  node  =  aliasRef.node.removeFirstChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  node  =  aliasRef.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.removeFirstChild();  Node  node  =  aliasRef.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    node    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
55	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	6	None	replace
56	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	6	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  aliasParent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  aliasParent);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  aliasParent);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    compiler);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,Node)	47	None	replace
58	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i  -  2);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i  -  2);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRef  =  aliasRefs.references.get(i  -  2);	  Node    aliasRef    =    aliasRefs.references.get(i    -    1);    	non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	85	None	replace
59	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i  -  1  +  1);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i  -  1  +  1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRef  =  aliasRefs.references.get(i  -  1  +  1);	  Node    aliasRef    =    aliasRefs.references.get(i    -    1);    	non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	85	None	replace
60	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.getNode();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRefs.references.getNode();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRefs.references.getNode();	  Node    newNode    =    aliasRef.references.getNode();    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
61	[BUG]  [BUGGY]  Node  newNode  =  alias.references.getNode();  [CE]  cannot  find  symbol  references  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.references.getNode();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.references.getNode();	  Node    newNode    =    aliasRef.references.getNode();    	non-compiled	[CE]  cannot  find  symbol  references	84	None	replace
62	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.references.getNode();  [CE]  cannot  find  symbol  node  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node.references.getNode();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.references.getNode();	  Node    newNode    =    aliasRef.references.getNode();    	non-compiled	[CE]  cannot  find  symbol  node	84	None	replace
63	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.getNode();  [CE]  cannot  find  symbol  node  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node.getNode();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.getNode();	  Node    newNode    =    aliasRef.references.getNode();    	non-compiled	[CE]  cannot  find  symbol  node	84	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  namespace,  collector);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,GlobalNamespace,ReferenceCollectingCallback)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  namespace,  collector);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  namespace,  collector);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,GlobalNamespace,ReferenceCollectingCallback)	43	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  namespace,  newNodes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,GlobalNamespace,Set<Node>)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  namespace,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  namespace,  newNodes);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,GlobalNamespace,Set<Node>)	43	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  namespace,  collidePropertiesOnExternTypes);  [CE]  cannot  find  symbol  collidePropertiesOnExternTypes  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  namespace,  collidePropertiesOnExternTypes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  namespace,  collidePropertiesOnExternTypes);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    namespace);    	non-compiled	[CE]  cannot  find  symbol  collidePropertiesOnExternTypes	43	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  namespace,  collapsePropertiesOnExternTypes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,GlobalNamespace,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  namespace,  collapsePropertiesOnExternTypes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  namespace,  collapsePropertiesOnExternTypes);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,GlobalNamespace,boolean)	43	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  namespace,  compiler);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,GlobalNamespace,AbstractCompiler)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  namespace,  compiler);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  namespace,  compiler);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,GlobalNamespace,AbstractCompiler)	43	None	replace
69	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references;  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references;	  Node    aliasRefs    =    alias.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	61	None	replace
70	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.newNode;  [CE]  cannot  find  symbol  newNode  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.newNode;  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.newNode;	  Node    newNode    =    aliasRef.node;    	non-compiled	[CE]  cannot  find  symbol  newNode	24	None	replace
71	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.firstReferenceIsWellDefined();	  Node    newNode    =    aliasRef.node;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
72	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsAssigningDeclaration();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsAssigningDeclaration();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.firstReferenceIsAssigningDeclaration();	  Node    newNode    =    aliasRef.node;    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,Scope,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  namespace);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  namespace);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    scope);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,Scope,GlobalNamespace)	44	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  scope,  newNodes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Scope,Set<Node>)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  scope,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  scope,  newNodes);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    scope);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Scope,Set<Node>)	44	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  inlineAliasVar);  [CE]  cannot  find  symbol  inlineAliasVar  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  inlineAliasVar);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  inlineAliasVar);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    scope);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasVar	44	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,Scope,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  inlineAliases);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  inlineAliases);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    scope);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,Scope,boolean)	44	None	replace
77	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	30	None	replace
78	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.getReferences(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRefs.getReferences(i);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRefs.getReferences(i);	  Node    aliasRefs    =    aliasRef.getReferences(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	70	None	replace
79	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRefs.references(i);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRefs.references(i);	  Node    aliasRefs    =    aliasRef.getReferences(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	70	None	replace
80	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i  +  2);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i  +  2);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i  +  2);	  Node    aliasRefs    =    aliasRef.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	11	None	replace
81	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.nodeFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.nodeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.nodeFirstChild();	  Node    newNode    =    aliasRef.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
82	[BUG]  [BUGGY]  Node  newNode  =  alias.removeFirstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.removeFirstChild();	  Node    newNode    =    aliasRef.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
83	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.firstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.firstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.firstChild();	  Node    newNode    =    aliasRef.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
84	[BUG]  [BUGGY]  Node  newNode  =  alias.node.firstReferenceIsAssigningDeclaration();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.firstReferenceIsAssigningDeclaration();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.firstReferenceIsAssigningDeclaration();	  Node    newNode    =    aliasRef.node.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
85	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	5	None	replace
86	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	5	None	replace
87	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	5	None	replace
88	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
89	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
90	[BUG]  [BUGGY]  alias.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  alias.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	alias.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
91	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.parent().cloneTree();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.parent().cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.parent().cloneTree();	  Node    newNode    =    aliasRef.parent.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
92	[BUG]  [BUGGY]  Node  newNode  =  alias.parent.cloneTree();  [CE]  cannot  find  symbol  parent  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.parent.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.parent.cloneTree();	  Node    newNode    =    aliasRef.parent.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  parent	78	None	replace
93	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i,  newNodes);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRef  =  aliasRefs.references.get(i,  newNodes);	  Node    aliasRef    =    aliasRefs.references.get(i);    	non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	34	None	replace
94	[BUG]  [BUGGY]  Node  newNode  =  alias.newNode();  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.newNode();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.newNode();	  Node    newNode    =    aliasRef.newNode();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
95	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node();  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node();	  Node    newNode    =    aliasRef.newNode();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
96	[BUG]  [BUGGY]  Node  newNode  =  aliasref.newNode();  [CE]  cannot  find  symbol  aliasref  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasref.newNode();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasref.newNode();	  Node    newNode    =    aliasRef.newNode();    	non-compiled	[CE]  cannot  find  symbol  aliasref	27	None	replace
97	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  not  a  statement	104	None	replace
98	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  not  a  statement	104	None	replace
99	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  not  a  statement	104	None	replace
100	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  not  a  statement	104	None	replace
101	[BUG]  [BUGGY]  Node  newNode  =  alias.node.firstReferenceIsWellDefined();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.firstReferenceIsWellDefined();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.firstReferenceIsWellDefined();	  Node    newNode    =    aliasRef.node.firstReferenceIsWellDefined();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
102	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.getLastChild();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.getLastChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.getLastChild();	  Node    newNode    =    aliasRef.node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
103	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getLastChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	add	Node  newNode  =  alias.node.getLastChild();	  Node    newNode    =    aliasRef.node.getLastChild();    	compilable	  [FE]  IllegalArgumentException  	49	10	replace
104	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getLastChild();  [FE]  IllegalArgumentException  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getLastChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.getLastChild();	  Node    newNode    =    aliasRef.node.getLastChild();    	compilable	  [FE]  IllegalArgumentException  	49	10	replace
105	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.references.getLastChild();  [CE]  cannot  find  symbol  references  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.references.getLastChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.references.getLastChild();	  Node    newNode    =    aliasRef.node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  references	49	None	replace
106	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i++,  newNodes);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i++,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRef  =  aliasRefs.references.get(i++,  newNodes);	  Node    aliasRef    =    aliasRefs.references.get(i++);    	non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	86	None	replace
107	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i++,  size);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i++,  size);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRef  =  aliasRefs.references.get(i++,  size);	  Node    aliasRef    =    aliasRefs.references.get(i++);    	non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	86	None	replace
108	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.references();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.node.references();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.node.references();	  Node    aliasRefs    =    alias.references();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	50	None	replace
109	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  newNodes);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i,  newNodes);	  Node    aliasRefs    =    aliasRefs.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	10	None	replace
110	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i++);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i++);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i++);	  Node    aliasRefs    =    aliasRefs.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	10	None	replace
111	[BUG]  [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
112	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  alias  =  alias.node.removeFirstChild();  [CE]  variable  alias  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  alias  =  alias.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.getFirstChild();  Node  alias  =  alias.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    alias    =    alias.node.removeFirstChild();    	non-compiled	[CE]  variable  alias  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	66	None	replace
113	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  alias  =  alias.node.removeFirstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  alias  =  alias.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.removeFirstChild();  Node  alias  =  alias.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    alias    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
114	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  Node  alias  =  alias.node.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  Node  alias  =  alias.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.removeFirstChild();  Node  alias  =  alias.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    alias    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	66	None	replace
115	[BUG]  [BUGGY]  Node  alias  =  alias.node.removeFirstChild();  [CE]  variable  alias  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  alias  =  alias.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  alias  =  alias.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    alias    =    alias.node.removeFirstChild();    	non-compiled	[CE]  variable  alias  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	66	None	replace
116	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references!=  null?  null  :  alias.references.getReferences();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references!=  null?  null  :  alias.references.getReferences();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references!=  null?  null  :  alias.references.getReferences();	  Node    aliasRefs    =    alias.references.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	60	None	replace
117	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references!=  null?  new  Node()  :  alias.references.getReferences();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references!=  null?  new  Node()  :  alias.references.getReferences();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references!=  null?  new  Node()  :  alias.references.getReferences();	  Node    aliasRefs    =    alias.references.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	60	None	replace
118	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.getReferences();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  newNodes.getReferences();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  newNodes.getReferences();	  Node    aliasRefs    =    alias.references.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	60	None	replace
119	[BUG]  [BUGGY]  newNodes.add(aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  newNodes.add(aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	newNodes.add(aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  ';'  expected	88	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,CollapseProperties,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  namespace);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  namespace);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,CollapseProperties,GlobalNamespace)	13	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineAliasVar,  this);  [CE]  cannot  find  symbol  inlineAliasVar  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineAliasVar,  this);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineAliasVar,  this);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    this);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasVar	13	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineAliasIfPossible);  [CE]  cannot  find  symbol  inlineAliasIfPossible  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineAliasIfPossible);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineAliasIfPossible);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    this);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasIfPossible	13	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,ReferenceCollectingCallback,CollapseProperties)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  this);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  this);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,ReferenceCollectingCallback,CollapseProperties)	13	None	replace
124	[BUG]  [BUGGY]  Node  newNode  =  alias.node.addFirstChild();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.addFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.addFirstChild();	  Node    newNode    =    aliasRef.node.addFirstChild();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
125	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.addFirstChild();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.addFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.addFirstChild();	  Node    newNode    =    aliasRef.node.addFirstChild();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
126	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.references.addFirstChild();  [CE]  cannot  find  symbol  references  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.references.addFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.references.addFirstChild();	  Node    newNode    =    aliasRef.node.addFirstChild();    	non-compiled	[CE]  cannot  find  symbol  references	79	None	replace
127	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.getFirst();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.getFirst();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.getFirst();	  Node    newNode    =    aliasRef.node.getFirst();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
128	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.getLast();  [CE]  cannot  find  symbol  node  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node.getLast();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.getLast();	  Node    newNode    =    aliasRef.node.getFirst();    	non-compiled	[CE]  cannot  find  symbol  node	55	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,ReferenceCollectingCallback,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  namespace);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  namespace);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    collector);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,ReferenceCollectingCallback,GlobalNamespace)	45	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  collector,  newNodes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,ReferenceCollectingCallback,Set<Node>)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  collector,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  collector,  newNodes);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    collector);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,ReferenceCollectingCallback,Set<Node>)	45	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  collection,  newNodes);  [CE]  cannot  find  symbol  collection  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  collection,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  collection,  newNodes);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    collector);    	non-compiled	[CE]  cannot  find  symbol  collection	45	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  scope);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,ReferenceCollectingCallback,Scope)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  scope);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  scope);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    collector);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,ReferenceCollectingCallback,Scope)	45	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  size);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,ReferenceCollectingCallback,int)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  size);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  size);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    collector);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,ReferenceCollectingCallback,int)	45	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasParent,  newNodes,  aliasRef);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Set<Node>,Reference)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasParent,  newNodes,  aliasRef);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasParent,  newNodes,  aliasRef);	  NodeTraversal.traverse(compiler,    newNodes,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Set<Node>,Reference)	46	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasVar,  newNodes,  aliasRef);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Var,Set<Node>,Reference)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasVar,  newNodes,  aliasRef);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasVar,  newNodes,  aliasRef);	  NodeTraversal.traverse(compiler,    newNodes,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Var,Set<Node>,Reference)	46	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasVar,  newNodes,  i);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Var,Set<Node>,int)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasVar,  newNodes,  i);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasVar,  newNodes,  i);	  NodeTraversal.traverse(compiler,    newNodes,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Var,Set<Node>,int)	46	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNodes,  aliasRef,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Set<Node>,Reference,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  newNodes,  aliasRef,  namespace);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  newNodes,  aliasRef,  namespace);	  NodeTraversal.traverse(compiler,    newNodes,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Set<Node>,Reference,GlobalNamespace)	46	None	replace
138	[BUG]  [BUGGY]  Node  newNode  =  alias.node,  aliasRef.getNode();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node,  aliasRef.getNode();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node,  aliasRef.getNode();	  Node    newNode    =    alias.node.getNode();    	non-compiled	[CE]  ';'  expected	33	None	replace
139	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  node  =  aliasRef.node.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  node  =  aliasRef.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.removeFirstChild();  node  =  aliasRef.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    node    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	42	None	replace
140	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  newNode  =  aliasRef.node.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]                AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  newNode  =  aliasRef.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.removeFirstChild();  newNode  =  aliasRef.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    node    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	42	None	replace
141	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  node  =  aliasRef.node.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  node  =  aliasRef.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.removeFirstChild();  node  =  aliasRef.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    node    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  newNode  =  alias.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	add	Node  newNode  =  alias.node.removeFirstChild();  newNode  =  alias.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    node    =    alias.node.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	42	10	replace
143	[BUG]  [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  newNode  =  alias.node.removeFirstChild();  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  newNode  =  alias.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.removeFirstChild();  newNode  =  alias.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    node    =    alias.node.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	42	10	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  aliasRef);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,Reference)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  aliasRef);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  inlineAliases,  aliasRef);	  NodeTraversal.traverse(compiler,    aliasRef,    this,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,Reference)	15	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,CollapseProperties)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  this);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  inlineAliases,  this);	  NodeTraversal.traverse(compiler,    aliasRef,    this,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,CollapseProperties)	15	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  newNodes,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,Set<Node>,boolean)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  newNodes,  inlineAliases);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  this,  newNodes,  inlineAliases);	  NodeTraversal.traverse(compiler,    aliasRef,    this,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,Set<Node>,boolean)	15	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  this,  aliasRef);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,CollapseProperties,Reference)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  this,  aliasRef);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  inlineAliases,  this,  aliasRef);	  NodeTraversal.traverse(compiler,    aliasRef,    this,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,CollapseProperties,Reference)	15	None	replace
148	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);	  if(aliasRefs.isWellDefined())    {    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    }    	non-compiled	[CE]  not  a  statement	75	None	replace
149	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);	  if(aliasRefs.isWellDefined())    {    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    }    	non-compiled	[CE]  not  a  statement	75	None	replace
150	[BUG]  [BUGGY]  if(aliasRef.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime());  newNodes.add(newNode);  }  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime());  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime());  newNodes.add(newNode);  }	  if(aliasRefs.isWellDefined())    {    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    }    	non-compiled	[CE]  not  a  statement	75	None	replace
151	[BUG]  [BUGGY]  if(aliasRef.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  }  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  }	  if(aliasRefs.isWellDefined())    {    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    }    	non-compiled	[CE]  not  a  statement	75	None	replace
152	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());	  if(aliasRefs.isWellDefined())    {    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    }    	non-compiled	[CE]  not  a  statement	75	None	replace
153	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
154	[BUG]  [BUGGY]  alias.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  alias.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	alias.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
155	[BUG]  [BUGGY]  alias.node.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  alias.node.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	alias.node.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
156	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(aliasRef,  newNodes);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.getParent().removeChild(aliasRef,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.getParent().removeChild(aliasRef,  newNodes);	  aliasRef.getParent().removeChild(aliasRef);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	28	None	replace
157	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(aliasRef.getNode(),  i);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.getParent().removeChild(aliasRef.getNode(),  i);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.getParent().removeChild(aliasRef.getNode(),  i);	  aliasRef.getParent().removeChild(aliasRef);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	28	None	replace
158	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(aliasRef.getNode(),  aliasRef);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.getParent().removeChild(aliasRef.getNode(),  aliasRef);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.getParent().removeChild(aliasRef.getNode(),  aliasRef);	  aliasRef.getParent().removeChild(aliasRef);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	28	None	replace
159	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNodes);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.getParent().removeChild(aliasRef.getNode(),  newNodes);	  aliasRef.getParent().removeChild(aliasRef);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	28	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  oldNodes);  [CE]  cannot  find  symbol  oldNodes  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  oldNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  this,  oldNodes);	  NodeTraversal.traverse(compiler,    aliasRef,    this,    inlines);    	non-compiled	[CE]  cannot  find  symbol  oldNodes	107	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  scope);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,Scope)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  scope);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  this,  scope);	  NodeTraversal.traverse(compiler,    aliasRef,    this,    inlines);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,Scope)	107	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  size);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,int)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  size);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  this,  size);	  NodeTraversal.traverse(compiler,    aliasRef,    this,    inlines);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,int)	107	None	replace
163	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.removeLast();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.removeLast();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.removeLast();	  Node    newNode    =    aliasRef.node.removeLast();    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
164	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.ref.cloneTree();  [CE]  cannot  find  symbol  ref  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.ref.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.ref.cloneTree();	  Node    newNode    =    alias.ref.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  ref	94	None	replace
165	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRef.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
166	[BUG]  [BUGGY]  alias.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  alias.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	alias.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRef.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
167	[BUG]  [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRef.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
168	[BUG]  [BUGGY]  if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new	  if(aliasRefs!=    null)    {    aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(new    	non-compiled	[CE]  not  a  statement	76	None	replace
169	[BUG]  [BUGGY]  if(aliasRef  ==  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef  ==  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef  ==  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new	  if(aliasRefs!=    null)    {    aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(new    	non-compiled	[CE]  not  a  statement	76	None	replace
170	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new	  if(aliasRefs!=    null)    {    aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(new    	non-compiled	[CE]  not  a  statement	76	None	replace
171	[BUG]  [BUGGY]  if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add  [CE]  not  a  statement  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add	  if(aliasRefs!=    null)    {    aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(new    	non-compiled	[CE]  not  a  statement	76	None	replace
172	[BUG]  [BUGGY]  aliasRefs.getParent().removeChild(newNodes,  aliasRef);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.getParent().removeChild(newNodes,  aliasRef);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.getParent().removeChild(newNodes,  aliasRef);	  aliasRefs.getParent().removeChild(aliasRef,    newNodes);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
173	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRefs.references;  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRefs.references;	  Node    aliasRefs    =    aliasRef.references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	68	None	replace
174	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.references.getFirstChild();  [CE]  cannot  find  symbol  references  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.references.getFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.references.getFirstChild();	  Node    newNode    =    aliasRef.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  references	48	None	replace
175	[BUG]  [BUGGY]  Node  newNode  =  alias.getFirstChild();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.getFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.getFirstChild();	  Node    newNode    =    aliasRef.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
176	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime());	  aliasRef.referenceIsWellDefined()    &&    aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRef.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	22	None	replace
177	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime());	  aliasRef.referenceIsWellDefined()    &&    aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRef.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	22	None	replace
178	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isInvalidOnceInLifetime());  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isInvalidOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isInvalidOnceInLifetime());	  aliasRef.referenceIsWellDefined()    &&    aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRef.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	22	None	replace
179	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.remove(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  newNodes.remove(i);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  newNodes.remove(i);	  Node    aliasRefs    =    newNodes.references();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	51	None	replace
180	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.values();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  newNodes.values();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  newNodes.values();	  Node    aliasRefs    =    newNodes.references();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	51	None	replace
181	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.references.getNext();  [CE]  cannot  find  symbol  references  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.references.getNext();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.references.getNext();	  Node    newNode    =    aliasRef.getNext();    	non-compiled	[CE]  cannot  find  symbol  references	25	None	replace
182	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce());    	non-compiled	[CE]  not  a  statement	95	None	replace
183	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce());    	non-compiled	[CE]  not  a  statement	95	None	replace
184	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	81	None	replace
185	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime();    	non-compiled	[CE]  not  a  statement	8	None	replace
186	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&!aliasRefs.isInvalidOnceInLifetime();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&!aliasRefs.isInvalidOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&!aliasRefs.isInvalidOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime();    	non-compiled	[CE]  not  a  statement	8	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasVar,  newNodes,  aliasRef,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Var,Set<Node>,Reference,CollapseProperties)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasVar,  newNodes,  aliasRef,  this);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasVar,  newNodes,  aliasRef,  this);	  NodeTraversal.traverse(compiler,    newNodes,    aliasRef,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Var,Set<Node>,Reference,CollapseProperties)	16	None	replace
188	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNodes,  aliasRef,  this,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Set<Node>,Reference,CollapseProperties,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  newNodes,  aliasRef,  this,  namespace);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  newNodes,  aliasRef,  this,  namespace);	  NodeTraversal.traverse(compiler,    newNodes,    aliasRef,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Set<Node>,Reference,CollapseProperties,GlobalNamespace)	16	None	replace
189	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i  +  2);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i  +  2);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRef  =  aliasRefs.references.get(i  +  2);	  Node    aliasRef    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	35	None	replace
190	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i,  size  +  1);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i,  size  +  1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRef  =  aliasRefs.references.get(i,  size  +  1);	  Node    aliasRef    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	35	None	replace
191	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i);  [CE]  no  suitable  method  found  for  add(int)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i);	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);    	non-compiled	[CE]  no  suitable  method  found  for  add(int)	92	None	replace
192	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(aliasRef);  [CE]  no  suitable  method  found  for  add(Reference)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(aliasRef);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(aliasRef);	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference)	92	None	replace
193	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(node);  [CE]  cannot  find  symbol  node  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(node);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(node);	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol  node	92	None	replace
194	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(number);  [CE]  cannot  find  symbol  number  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(number);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(number);	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol  number	92	None	replace
195	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(null);  [CE]  cannot  find  symbol  newNode  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(null);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(null);	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol  newNode	92	None	replace
196	[BUG]  [BUGGY]  Node  newNode  =  alias.references.cloneTree();  [CE]  cannot  find  symbol  references  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.references.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.references.cloneTree();	  Node    newNode    =    alias.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  references	87	None	replace
197	[BUG]  [BUGGY]  Node  newNode  =  alias.type.cloneTree();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.type.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.type.cloneTree();	  Node    newNode    =    alias.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
198	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.assignedOnceInLifetime();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.assignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.assignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.assignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	82	None	replace
199	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.assignedOnceInLifetime();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.assignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.assignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.assignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	82	None	replace
200	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.assignedOnceInLifetime();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.assignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.assignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.assignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	82	None	replace
201	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(newNode);	  aliasRef.referenceIsWellDefined()    &&    aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRef.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	32	None	replace
202	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(newNode);	  aliasRef.referenceIsWellDefined()    &&    aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRef.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	32	None	replace
203	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isAssignedOnceInLifetime())  {	  aliasRef.referenceIsWellDefined()    &&    aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRef.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	32	None	replace
204	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  alias.node  =  alias.removeFirstChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  alias.node  =  alias.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.getFirstChild();  Node  alias.node  =  alias.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    alias.node    =    alias.removeFirstChild();    	non-compiled	[CE]  ';'  expected	41	None	replace
205	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getNext();  Node  alias.node  =  alias.removeFirstChild();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getNext();  Node  alias.node  =  alias.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.getNext();  Node  alias.node  =  alias.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    alias.node    =    alias.removeFirstChild();    	non-compiled	[CE]  ';'  expected	41	None	replace
206	[BUG]  [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  Node  alias.node  =  alias.removeLastChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  Node  alias.node  =  alias.removeLastChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.removeFirstChild();  Node  alias.node  =  alias.removeLastChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    alias.node    =    alias.removeFirstChild();    	non-compiled	[CE]  ';'  expected	41	None	replace
207	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.getFirstChild();  Node  alias.node  =  aliasRef.removeFirstChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node.getFirstChild();  Node  alias.node  =  aliasRef.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.getFirstChild();  Node  alias.node  =  aliasRef.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    alias.node    =    alias.removeFirstChild();    	non-compiled	[CE]  ';'  expected	41	None	replace
208	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime());    	non-compiled	[CE]  not  a  statement	23	None	replace
209	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime());  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime());    	non-compiled	[CE]  not  a  statement	23	None	replace
210	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isUnknownOnceInLifetime());  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isUnknownOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isUnknownOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime());    	non-compiled	[CE]  not  a  statement	23	None	replace
211	[BUG]  [BUGGY]  Node  newNode  =  alias.node.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.clone();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.clone();	  Node    newNode    =    aliasRef.node.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	101	None	replace
212	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node,  newNodes.clone();  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node,  newNodes.clone();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node,  newNodes.clone();	  Node    newNode    =    aliasRef.node.clone();    	non-compiled	[CE]  ';'  expected	101	None	replace
213	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  oldNode  =  aliasRef.removeFirstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  oldNode  =  aliasRef.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.removeFirstChild();  Node  oldNode  =  aliasRef.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    oldNode    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
214	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  oldNode  =  alias.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	add	Node  newNode  =  alias.node.getFirstChild();  Node  oldNode  =  alias.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    oldNode    =    alias.node.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	40	10	replace
215	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  oldNode  =  alias.node.removeFirstChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  oldNode  =  alias.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.getFirstChild();  Node  oldNode  =  alias.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    oldNode    =    alias.node.removeFirstChild();    	compilable	  [FE]  AssertionFailedError  	40	10	replace
216	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  Node  oldNode  =  aliasRef.node.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  Node  oldNode  =  aliasRef.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.removeFirstChild();  Node  oldNode  =  aliasRef.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    oldNode    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	40	None	replace
217	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  oldNode  =  aliasRef.node.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  oldNode  =  aliasRef.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.removeFirstChild();  Node  oldNode  =  aliasRef.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    oldNode    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
218	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.getNode();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.node.getNode();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.node.getNode();	  Node    aliasRefs    =    alias.node.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	59	None	replace
219	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	31	None	replace
220	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  newNodes.get(i  +  1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  newNodes.get(i  +  1);	  Node    aliasRefs    =    newNodes.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	52	None	replace
221	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  namespace);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  namespace);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  newNodes.get(i,  namespace);	  Node    aliasRefs    =    newNodes.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	52	None	replace
222	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRefs.get(i);	  Node    aliasRefs    =    newNodes.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	52	None	replace
223	[BUG]  [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  if(aliasRef.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  namespace,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,GlobalNamespace,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  namespace,  inlineAliases);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  namespace,  inlineAliases);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,GlobalNamespace,boolean)	80	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  newNodes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,Set<Node>)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  inlineAliases,  newNodes);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,Set<Node>)	80	None	replace
226	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineAlias,  namespace);  [CE]  cannot  find  symbol  inlineAlias  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineAlias,  namespace);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineAlias,  namespace);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    inlineAliases);    	non-compiled	[CE]  cannot  find  symbol  inlineAlias	80	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineAliases,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,boolean,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineAliases,  namespace);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineAliases,  namespace);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,boolean,GlobalNamespace)	80	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  aliasRef,  newNodes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,Reference,Set<Node>)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  aliasRef,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  inlineAliases,  aliasRef,  newNodes);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,Reference,Set<Node>)	80	None	replace
229	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce();    	non-compiled	[CE]  not  a  statement	105	None	replace
230	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce();    	non-compiled	[CE]  not  a  statement	105	None	replace
231	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&!aliasRefs.isInitializingOnce();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&!aliasRefs.isInitializingOnce();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&!aliasRefs.isInitializingOnce();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce();    	non-compiled	[CE]  not  a  statement	105	None	replace
232	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	20	None	replace
233	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	20	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  newNodes,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,Set<Node>,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  newNodes,  namespace);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  this,  newNodes,  namespace);	  NodeTraversal.traverse(compiler,    aliasRef,    this,    newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,Set<Node>,GlobalNamespace)	14	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  size);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,int)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  size);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  size);	  NodeTraversal.traverse(compiler,    aliasRef,    this,    newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,int)	14	None	replace
236	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i);  [CE]  no  suitable  method  found  for  add(int)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i);	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);    	non-compiled	[CE]  no  suitable  method  found  for  add(int)	93	None	replace
237	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(node);  [CE]  cannot  find  symbol  node  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(node);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(node);	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol  node	93	None	replace
238	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.nodeFirst();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.nodeFirst();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.nodeFirst();	  Node    newNode    =    aliasRef.removeFirst();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  collapsePropertiesOnExternTypes,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,boolean,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  collapsePropertiesOnExternTypes,  inlineAliases);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  collapsePropertiesOnExternTypes,  inlineAliases);	  NodeTraversal.traverse(compiler,    aliasRef,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,boolean,boolean)	65	None	replace
240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNodes,  aliasRef,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Set<Node>,Reference,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  newNodes,  aliasRef,  inlineAliases);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  newNodes,  aliasRef,  inlineAliases);	  NodeTraversal.traverse(compiler,    aliasRef,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Set<Node>,Reference,boolean)	65	None	replace
241	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRef.references(i,  newNodes);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRef.references(i,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRef.references(i,  newNodes);	  Node    aliasRefs    =    aliasRef.references(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	53	None	replace
242	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRef.references(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRef.references(i  +  1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRef.references(i  +  1);	  Node    aliasRefs    =    aliasRef.references(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	53	None	replace
243	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references(i);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references(i);	  Node    aliasRefs    =    aliasRef.references(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	53	None	replace
244	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.removeLast();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.removeLast();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.removeLast();	  Node    newNode    =    aliasRef.firstReferenceIsWellDefined()?    aliasRef.node    :    aliasRef.removeFirst();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
245	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.getFirst();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.getFirst();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.getFirst();	  Node    newNode    =    aliasRef.firstReferenceIsWellDefined()?    aliasRef.node    :    aliasRef.removeFirst();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
246	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.removeOne();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.removeOne();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.removeOne();	  Node    newNode    =    aliasRef.firstReferenceIsWellDefined()?    aliasRef.node    :    aliasRef.removeFirst();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
247	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef,  i  :  aliasRef.removeFirst();  [CE]  :  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef,  i  :  aliasRef.removeFirst();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef,  i  :  aliasRef.removeFirst();	  Node    newNode    =    aliasRef.firstReferenceIsWellDefined()?    aliasRef.node    :    aliasRef.removeFirst();    	non-compiled	[CE]  :  expected	62	None	replace
248	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isLocalOnce());    	non-compiled	[CE]  not  a  statement	96	None	replace
249	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isLocalOnce());    	non-compiled	[CE]  not  a  statement	96	None	replace
250	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isLocalOnce());    	non-compiled	[CE]  not  a  statement	96	None	replace
251	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i);  [CE]  no  suitable  method  found  for  add(int)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i);	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);    	non-compiled	[CE]  no  suitable  method  found  for  add(int)	91	None	replace
252	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(node);  [CE]  cannot  find  symbol  node  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(node);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(node);	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol  node	91	None	replace
253	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(number);  [CE]  cannot  find  symbol  number  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(number);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(number);	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol  number	91	None	replace
254	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	71	None	replace
255	[BUG]  [BUGGY]  alias.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  alias.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	alias.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	71	None	replace
256	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	71	None	replace
257	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  newNode  =  alias.node.removeFirstChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  newNode  =  alias.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.getFirstChild();  Node  newNode  =  alias.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    newNode    =    alias.node.removeFirstChild());    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	106	None	replace
258	[BUG]  [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  Node  newNode  =  alias.node.removeLastChild());  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  Node  newNode  =  alias.node.removeLastChild());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.removeFirstChild();  Node  newNode  =  alias.node.removeLastChild());	  Node    newNode    =    alias.node.removeFirstChild();    Node    newNode    =    alias.node.removeFirstChild());    	non-compiled	[CE]  ';'  expected	106	None	replace
259	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	21	None	replace
260	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  size  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  size  +  1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i,  size  +  1);	  Node    aliasRefs    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	replace
261	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getNode()  +  1;  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRefs.getNode()  +  1;  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRefs.getNode()  +  1;	  Node    newNode    =    aliasRef.getNode()    +    1;    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
262	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getNode()  +  1;  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getNode()  +  1;  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.getNode()  +  1;	  Node    newNode    =    aliasRef.getNode()    +    1;    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
263	[BUG]  [BUGGY]  Node  newNode  =  alias.getNode()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.getNode()  +  1;  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.getNode()  +  1;	  Node    newNode    =    aliasRef.getNode()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	83	None	replace
264	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	72	None	replace
265	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(ref);  [CE]  cannot  find  symbol  ref  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(ref);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(ref);	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol  ref	92	None	replace
266	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isLocalOnce());    	non-compiled	[CE]  not  a  statement	96	None	replace
267	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(ref);  [CE]  cannot  find  symbol  ref  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(ref);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(ref);	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol  ref	91	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  compiler,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,AbstractCompiler,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  compiler,  inlineAliases);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  compiler,  inlineAliases);	  NodeTraversal.traverse(compiler,    aliasRef,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,AbstractCompiler,boolean)	65	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  inlineAliasIfPossible);  [CE]  cannot  find  symbol  inlineAliasIfPossible  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  inlineAliasIfPossible);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  inlineAliasIfPossible);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    scope);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasIfPossible	44	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  compiler);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,Scope,AbstractCompiler)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  compiler);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  compiler);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    scope);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,Scope,AbstractCompiler)	44	None	replace
271	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.referenceIsWellDefined()  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.referenceIsWellDefined()  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.referenceIsWellDefined()	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  ';'  expected	20	None	replace
272	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(aliasRef.getNode());  [CE]  cannot  find  symbol  newNode  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.getParent().removeChild(aliasRef.getNode());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.getParent().removeChild(aliasRef.getNode());	  aliasRef.getParent().removeChild(aliasRef);    	non-compiled	[CE]  cannot  find  symbol  newNode	28	None	replace
273	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce());    	non-compiled	[CE]  not  a  statement	95	None	replace
274	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsInitializingDeclaration()  &&  aliasRefs.isInitializingOnce());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsInitializingDeclaration()  &&  aliasRefs.isInitializingOnce());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsInitializingDeclaration()  &&  aliasRefs.isInitializingOnce());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce());    	non-compiled	[CE]  not  a  statement	95	None	replace
275	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnce());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnce());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnce());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce());    	non-compiled	[CE]  not  a  statement	95	None	replace
276	[BUG]  [BUGGY]  if(aliasRef!=  null)  {  if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef!=  null)  {  if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef!=  null)  {  if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes	  if(aliasRefs.isWellDefined())    {    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    }    	non-compiled	[CE]  not  a  statement	75	None	replace
277	[BUG]  [BUGGY]  if(aliasRef!=  null)  {  if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef!=  null)  {  if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef!=  null)  {  if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add	  if(aliasRefs.isWellDefined())    {    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    }    	non-compiled	[CE]  not  a  statement	75	None	replace
278	[BUG]  [BUGGY]  if(aliasRef!=  null)  {  if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef!=  null)  {  if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef!=  null)  {  if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.	  if(aliasRefs.isWellDefined())    {    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    }    	non-compiled	[CE]  not  a  statement	75	None	replace
279	[BUG]  [BUGGY]  if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new	  if(aliasRefs!=    null)    {    aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(new    	non-compiled	[CE]  not  a  statement	76	None	replace
280	[BUG]  [BUGGY]  if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(	  if(aliasRefs!=    null)    {    aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(new    	non-compiled	[CE]  not  a  statement	76	None	replace
281	[BUG]  [BUGGY]  if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime()  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime()  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime()	  if(aliasRefs!=    null)    {    aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(new    	non-compiled	[CE]  not  a  statement	76	None	replace
282	[BUG]  [BUGGY]  Node  newNode  =  aliasref.cloneTree();  [CE]  cannot  find  symbol  aliasref  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasref.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasref.cloneTree();	  Node    newNode    =    alias.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  aliasref	87	None	replace
283	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasParent.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	add	Node  newNode  =  aliasParent.cloneTree();	  Node    newNode    =    alias.cloneTree();    	compilable	  [FE]  IllegalStateException  	87	10	replace
284	[BUG]  [BUGGY]  Node  newNode  =  aliasParent.cloneTree();  [FE]  IllegalStateException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasParent.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasParent.cloneTree();	  Node    newNode    =    alias.cloneTree();    	compilable	  [FE]  IllegalStateException  	87	10	replace
285	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i  -  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i  -  1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i  -  1);	  Node    aliasRefs    =    aliasRefs.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	10	None	replace
286	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.replaceFirstChild(i,  newNodes);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.replaceFirstChild(i,  newNodes);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.replaceFirstChild(i,  newNodes);	  Node    newNode    =    aliasRef.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
287	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.replaceChild(aliasRef.node,  i);  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.replaceChild(aliasRef.node,  i);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.replaceChild(aliasRef.node,  i);	  Node    newNode    =    aliasRef.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	17	None	replace
288	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime();    	non-compiled	[CE]  not  a  statement	8	None	replace
289	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isUnvalidOnceInLifetime();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isUnvalidOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isUnvalidOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime();    	non-compiled	[CE]  not  a  statement	8	None	replace
290	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(newNode);	  aliasRef.referenceIsWellDefined()    &&    aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRef.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	32	None	replace
291	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.replaceFirst(i,  newNodes);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.replaceFirst(i,  newNodes);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.replaceFirst(i,  newNodes);	  Node    newNode    =    aliasRef.removeFirst();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
292	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node  +  1;  [CE]  cannot  find  symbol  node  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node  +  1;  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node  +  1;	  Node    newNode    =    aliasRef.node;    	non-compiled	[CE]  cannot  find  symbol  node	24	None	replace
293	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node  ||  aliasRef.isWellDefined();  [CE]  cannot  find  symbol  node  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node  ||  aliasRef.isWellDefined();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node  ||  aliasRef.isWellDefined();	  Node    newNode    =    aliasRef.node;    	non-compiled	[CE]  cannot  find  symbol  node	24	None	replace
294	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  Node  node  =  aliasRef.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  Node  node  =  aliasRef.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.removeFirstChild();  Node  node  =  aliasRef.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    node    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	67	None	replace
295	[BUG]  [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  Node  node  =  alias.node.removeLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  Node  node  =  alias.node.removeLastChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.removeFirstChild();  Node  node  =  alias.node.removeLastChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    node    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  collapsePropertiesOnExternTypes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  collapsePropertiesOnExternTypes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  this,  collapsePropertiesOnExternTypes);	  NodeTraversal.traverse(compiler,    aliasRef,    this,    inlines);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,boolean)	107	None	replace
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.getNode().cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	add	Node  newNode  =  aliasRef.getNode().cloneTree();	  Node    newNode    =    aliasRef.parent.cloneTree();    	compilable	  [FE]  AssertionFailedError  	78	10	replace
298	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.getNode().cloneTree();  [FE]  AssertionFailedError  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.getNode().cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.getNode().cloneTree();	  Node    newNode    =    aliasRef.parent.cloneTree();    	compilable	  [FE]  AssertionFailedError  	78	10	replace
299	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.references.clone();  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node.references.clone();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.references.clone();	  Node    newNode    =    aliasRef.node.clone();    	non-compiled	[CE]  cannot  find  symbol  node	101	None	replace
300	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i  +  3);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i  +  3);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRef  =  aliasRefs.references.get(i  +  3);	  Node    aliasRef    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	35	None	replace
301	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	21	None	replace
302	[BUG]  [BUGGY]  if(aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRef.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
303	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {	  aliasRef.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
304	[BUG]  [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  Node  alias  =  alias.node.removeLastChild();  [CE]  variable  alias  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  Node  alias  =  alias.node.removeLastChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.removeFirstChild();  Node  alias  =  alias.node.removeLastChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    alias    =    alias.node.removeFirstChild();    	non-compiled	[CE]  variable  alias  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	66	None	replace
305	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce())    {    	non-compiled	[CE]  not  a  statement	102	None	replace
306	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  node  =  alias.node.getFirstChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    IllegalArgumentException    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  Node  node  =  alias.node.getFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node    newNode    =    alias.node.getFirstChild();    Node  node  =  alias.node.getFirstChild();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	18	None	add
307	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime());	  aliasRef.referenceIsWellDefined()    &&    aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRef.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	22	None	replace
308	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
309	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.assignedOnceInLifetime();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.assignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.assignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.assignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	82	None	replace
310	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.invalidOnceInLifetime();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.invalidOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.invalidOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.assignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	82	None	replace
311	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRefs.references(i  +  1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRefs.references(i  +  1);	  Node    aliasRefs    =    aliasRef.references(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	53	None	replace
312	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references(i,  newNodes);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRefs.references(i,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRefs.references(i,  newNodes);	  Node    aliasRefs    =    aliasRef.references(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	53	None	replace
313	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.referenceIsWellDefined();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.referenceIsWellDefined();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.referenceIsWellDefined();	  Node    newNode    =    aliasRef.node.firstReferenceIsWellDefined();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
314	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references  ==  null?  null  :  alias.references.getReferences();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references  ==  null?  null  :  alias.references.getReferences();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references  ==  null?  null  :  alias.references.getReferences();	  Node    aliasRefs    =    alias.references.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	60	None	replace
315	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references  ==  null?  new  Node()  :  alias.references.getReferences();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references  ==  null?  new  Node()  :  alias.references.getReferences();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references  ==  null?  new  Node()  :  alias.references.getReferences();	  Node    aliasRefs    =    alias.references.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	60	None	replace
316	[BUG]  [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  node  =  aliasRef.node.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  node  =  aliasRef.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.removeFirstChild();  node  =  aliasRef.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    node    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	42	None	replace
317	[BUG]  [BUGGY]  Node  node  =  aliasRef.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  node  =  aliasRef.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  node  =  aliasRef.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    node    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
318	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRef.references.cloneTree();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRef.references.cloneTree();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRef.references.cloneTree();	  Node    aliasRefs    =    aliasRef.cloneTree();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	100	None	replace
319	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRef.references.clone();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRef.references.clone();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRef.references.clone();	  Node    aliasRefs    =    aliasRef.cloneTree();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	100	None	replace
320	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  inlineAliasIfPossible);  [CE]  cannot  find  symbol  inlineAliasIfPossible  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  inlineAliasIfPossible);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  inlineAliasIfPossible);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    collector);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasIfPossible	45	None	replace
321	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce();    	non-compiled	[CE]  not  a  statement	105	None	replace
322	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsInitializingDeclaration()  &&  aliasRefs.isInitializingOnce();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsInitializingDeclaration()  &&  aliasRefs.isInitializingOnce();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsInitializingDeclaration()  &&  aliasRefs.isInitializingOnce();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce();    	non-compiled	[CE]  not  a  statement	105	None	replace
323	[BUG]  [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  Node  oldNode  =  alias.node.removeLastChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  Node  oldNode  =  alias.node.removeLastChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.removeFirstChild();  Node  oldNode  =  alias.node.removeLastChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    oldNode    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
324	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.referenceIsWellDefined();  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.referenceIsWellDefined();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.referenceIsWellDefined();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
325	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
326	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
327	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i-1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references.get(i-1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references.get(i-1);	  Node    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	9	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  inlineAliasIfPossible);  [CE]  cannot  find  symbol  inlineAliasIfPossible  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  inlineAliasIfPossible);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  inlineAliasIfPossible);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    this);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasIfPossible	13	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  inlineAliasVar);  [CE]  cannot  find  symbol  inlineAliasVar  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  inlineAliasVar);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  inlineAliasVar);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    this);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasVar	13	None	replace
330	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.replaceChild(aliasRef.node,  i);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.replaceChild(aliasRef.node,  i);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.replaceChild(aliasRef.node,  i);	  Node    newNode    =    aliasRef.firstReferenceIsWellDefined()?    aliasRef.node    :    aliasRef.removeFirst();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
331	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.replaceChild(aliasRef,  newNodes);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.replaceChild(aliasRef,  newNodes);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.replaceChild(aliasRef,  newNodes);	  Node    newNode    =    aliasRef.firstReferenceIsWellDefined()?    aliasRef.node    :    aliasRef.removeFirst();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
332	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isLocalOnce())    {    	non-compiled	[CE]  not  a  statement	103	None	replace
333	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.references.getNode()  +  1;  [CE]  cannot  find  symbol  references  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.references.getNode()  +  1;  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.references.getNode()  +  1;	  Node    newNode    =    aliasRef.getNode()    +    1;    	non-compiled	[CE]  cannot  find  symbol  references	83	None	replace
334	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,CollapseProperties,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  inlineAliases);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  inlineAliases);	  NodeTraversal.traverse(compiler,    aliasRef,    this,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,CollapseProperties,boolean)	15	None	replace
335	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes!=  null;  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes!=  null;  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes!=  null;	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	7	None	replace
336	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	7	None	replace
337	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasref,  newNodes,  this);  [CE]  cannot  find  symbol  aliasref  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasref,  newNodes,  this);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasref,  newNodes,  this);	  NodeTraversal.traverse(compiler,    newNodes,    aliasRef,    this);    	non-compiled	[CE]  cannot  find  symbol  aliasref	16	None	replace
338	[BUG]  [BUGGY]  aliasRefs.getParent().removeChild(aliasRef,  i  +  1);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.getParent().removeChild(aliasRef,  i  +  1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.getParent().removeChild(aliasRef,  i  +  1);	  aliasRefs.getParent().removeChild(aliasRef,    i);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
339	[BUG]  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  Node  alias.node  =  alias.removeFirstChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.cloneTree();  Node  alias.node  =  alias.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.cloneTree();  Node  alias.node  =  alias.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    alias.node    =    alias.removeFirstChild();    	non-compiled	[CE]  ';'  expected	41	None	replace
340	[BUG]  [BUGGY]  if(aliasRef.isWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
341	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.references.get(i);  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node.references.get(i);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.references.get(i);	  Node    newNode    =    aliasRef.node.references.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  node	77	None	replace
342	[BUG]  [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  newNodes.add(newNode);  }	  if(aliasRef.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
343	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	63	None	replace
344	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
345	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.isAssigningDeclaration();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.isAssigningDeclaration();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.isAssigningDeclaration();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  not  a  statement	104	None	replace
346	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  newNodes.add(newNode);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  newNodes.add(newNode);	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	88	None	replace
347	[BUG]  [BUGGY]  if(aliasRef.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
348	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	31	None	replace
349	[BUG]  [BUGGY]  Node  newNode  =  aliasref.node.getNode();  [CE]  package  aliasref  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasref.node.getNode();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasref.node.getNode();	  Node    newNode    =    alias.node.getNode();    	non-compiled	[CE]  package  aliasref  does  not  exist	33	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineAliasIfPossible,  namespace);  [CE]  cannot  find  symbol  inlineAliasIfPossible  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineAliasIfPossible,  namespace);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineAliasIfPossible,  namespace);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    namespace);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasIfPossible	43	None	replace
351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  globalNamespace,  namespace);  [CE]  cannot  find  symbol  globalNamespace  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  globalNamespace,  namespace);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  globalNamespace,  namespace);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    namespace);    	non-compiled	[CE]  cannot  find  symbol  globalNamespace	43	None	replace
352	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.addLastChild();  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node.addLastChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.addLastChild();	  Node    newNode    =    aliasRef.node.addFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	79	None	replace
353	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.addChildToFront(newNodes);  [CE]  cannot  find  symbol  node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node.addChildToFront(newNodes);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.addChildToFront(newNodes);	  Node    newNode    =    aliasRef.node.addFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	79	None	replace
354	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isUnvalidOnceInLifetime());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isUnvalidOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isUnvalidOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime());    	non-compiled	[CE]  not  a  statement	23	None	replace
355	[BUG]  [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
356	[BUG]  [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
357	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  i);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,int)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  i);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  i);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    compiler);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,int)	47	None	replace
358	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  registry);  [CE]  cannot  find  symbol  registry  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  registry);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  registry);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    compiler);    	non-compiled	[CE]  cannot  find  symbol  registry	47	None	replace
359	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  var);  [CE]  cannot  find  symbol  var  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  var);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  var);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    compiler);    	non-compiled	[CE]  cannot  find  symbol  var	47	None	replace
360	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  msg);  [CE]  cannot  find  symbol  msg  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  msg);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  msg);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    compiler);    	non-compiled	[CE]  cannot  find  symbol  msg	47	None	replace
361	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i  -  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  newNodes.get(i  -  1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  newNodes.get(i  -  1);	  Node    aliasRefs    =    newNodes.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	52	None	replace
362	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  i,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,int,boolean)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  i,  inlineAliases);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  i,  inlineAliases);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,int,boolean)	80	None	replace
363	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.assignedOnceInLifetime());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.assignedOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.assignedOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.assignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	64	None	replace
364	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.getReferences(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.getReferences(i);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.getReferences(i);	  Node    aliasRefs    =    alias.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	61	None	replace
365	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i  +  3);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i  +  3);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i  +  3);	  Node    aliasRefs    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	replace
366	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.newNode();  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRefs.newNode();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRefs.newNode();	  Node    newNode    =    aliasRef.newNode();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
367	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i++  +  1);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i++  +  1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRef  =  aliasRefs.references.get(i++  +  1);	  Node    aliasRef    =    aliasRefs.references.get(i++);    	non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	86	None	replace
368	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i  *  1);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i  *  1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRef  =  aliasRefs.references.get(i  *  1);	  Node    aliasRef    =    aliasRef.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	37	None	replace
369	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  newNodes,  inlineAliasIfPossible);  [CE]  cannot  find  symbol  inlineAliasIfPossible  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  newNodes,  inlineAliasIfPossible);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  this,  newNodes,  inlineAliasIfPossible);	  NodeTraversal.traverse(compiler,    aliasRef,    this,    newNodes);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasIfPossible	14	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasref,  newNodes);  [CE]  cannot  find  symbol  aliasref  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasref,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasref,  newNodes);	  NodeTraversal.traverse(compiler,    newNodes,    aliasRef);    	non-compiled	[CE]  cannot  find  symbol  aliasref	46	None	replace
371	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasNode,  newNodes);  [CE]  cannot  find  symbol  aliasNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasNode,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasNode,  newNodes);	  NodeTraversal.traverse(compiler,    newNodes,    aliasRef);    	non-compiled	[CE]  cannot  find  symbol  aliasNode	46	None	replace
372	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  newNode  =  aliasRef.removeFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  newNode  =  aliasRef.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.removeFirstChild();  Node  newNode  =  aliasRef.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    newNode    =    alias.node.removeFirstChild());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
373	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  newNode  =  aliasRef.node.removeFirstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  newNode  =  aliasRef.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.removeFirstChild();  Node  newNode  =  aliasRef.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    newNode    =    alias.node.removeFirstChild());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
374	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.referenceIsWellDefined();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.referenceIsWellDefined();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.referenceIsWellDefined();	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
375	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes!=  null  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes!=  null  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes!=  null  &&  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	7	None	replace
376	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.ref.cloneTree();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.ref.cloneTree();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.ref.cloneTree();	  Node    aliasRefs    =    aliasRef.cloneTree();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	100	None	replace
377	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.getAssignedOnceInLifetime();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.node.getAssignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.node.getAssignedOnceInLifetime();	  Node    aliasRefs    =    alias.node.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	59	None	replace
378	[BUG]  [BUGGY]  Node  newNode  =  alias.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.removeFirst();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.removeFirst();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.removeFirst();	  Node    newNode    =    aliasRef.firstReferenceIsWellDefined()?    aliasRef.node    :    aliasRef.removeFirst();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
379	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.cloneTree();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.firstReferenceIsWellDefined()?  aliasRef.node  :  aliasRef.cloneTree();	  Node    newNode    =    aliasRef.firstReferenceIsWellDefined()?    aliasRef.node    :    aliasRef.removeFirst();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
380	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isInitializingOnce());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isInitializingOnce());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isInitializingOnce());	  aliasRef.referenceIsWellDefined()    &&    aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRef.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	22	None	replace
381	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isInvalidOnce());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isInvalidOnce());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isInvalidOnce());	  aliasRef.referenceIsWellDefined()    &&    aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRef.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	22	None	replace
382	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isLocalOnce());  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isLocalOnce());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRef.isLocalOnce());	  aliasRef.referenceIsWellDefined()    &&    aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRef.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	22	None	replace
383	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.replaceChild(aliasRef.getFirstChild(),  newNodes);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.replaceChild(aliasRef.getFirstChild(),  newNodes);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.replaceChild(aliasRef.getFirstChild(),  newNodes);	  Node    newNode    =    aliasRef.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
384	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce())    {    	non-compiled	[CE]  not  a  statement	102	None	replace
385	[BUG]  [BUGGY]  Node  newNode  =  alias.ref.removeFirst();  [CE]  cannot  find  symbol  ref  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.ref.removeFirst();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.ref.removeFirst();	  Node    newNode    =    aliasRef.removeFirst();    	non-compiled	[CE]  cannot  find  symbol  ref	56	None	replace
386	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.firstReferenceIsWellDefined(i);  [CE]  cannot  find  symbol  node  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node.firstReferenceIsWellDefined(i);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.firstReferenceIsWellDefined(i);	  Node    newNode    =    aliasRef.node.firstReferenceIsWellDefined();    	non-compiled	[CE]  cannot  find  symbol  node	58	None	replace
387	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  node  =  alias.node.removeFirstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  node  =  alias.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.removeFirstChild();  Node  node  =  alias.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    node    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
388	[BUG]  [BUGGY]  Node  node  =  alias.node.removeFirstChild();  [CE]  cannot  find  symbol  newNode  [FE]            AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  node  =  alias.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  node  =  alias.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    node    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  newNode	67	None	replace
389	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	88	None	replace
390	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  var,  namespace);  [CE]  cannot  find  symbol  var  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  var,  namespace);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  var,  namespace);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    namespace);    	non-compiled	[CE]  cannot  find  symbol  var	43	None	replace
391	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  [CE]  cannot  find  symbol  newNode  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);	  if(aliasRefs.isWellDefined())    {    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol  newNode	75	None	replace
392	[BUG]  [BUGGY]  newNodes.add(aliasRef);  [CE]  no  suitable  method  found  for  add(Reference)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  newNodes.add(aliasRef);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	newNodes.add(aliasRef);	  if(aliasRefs.isWellDefined())    {    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    }    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference)	75	None	replace
393	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.toArray(new  Node[size]);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  newNodes.toArray(new  Node[size]);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  newNodes.toArray(new  Node[size]);	  Node    aliasRefs    =    newNodes.references();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	51	None	replace
394	[BUG]  [BUGGY]  aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRef.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
395	[BUG]  [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssignedOnceInLifetime()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssignedOnceInLifetime()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssignedOnceInLifetime()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRef.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	3	None	replace
396	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.getParent().cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	add	Node  newNode  =  aliasRef.getParent().cloneTree();	  Node    newNode    =    aliasRef.parent.cloneTree();    	compilable	  [FE]  AssertionFailedError  	78	10	replace
397	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.getParent().cloneTree();  [FE]  AssertionFailedError  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.getParent().cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.getParent().cloneTree();	  Node    newNode    =    aliasRef.parent.cloneTree();    	compilable	  [FE]  AssertionFailedError  	78	10	replace
398	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  scope);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,CollapseProperties,Scope)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  scope);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  scope);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    scope);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,CollapseProperties,Scope)	44	None	replace
399	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  inlineWellDefined);  [CE]  cannot  find  symbol  inlineWellDefined  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  inlineWellDefined);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  scope,  inlineWellDefined);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    scope);    	non-compiled	[CE]  cannot  find  symbol  inlineWellDefined	44	None	replace
400	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce();    	non-compiled	[CE]  not  a  statement	105	None	replace
401	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnce());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnce());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnce());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isLocalOnce());    	non-compiled	[CE]  not  a  statement	96	None	replace
402	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  inlineAlias);  [CE]  cannot  find  symbol  inlineAlias  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  inlineAlias);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  inlineAlias);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    this);    	non-compiled	[CE]  cannot  find  symbol  inlineAlias	13	None	replace
403	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  inlineAliasVariables);  [CE]  cannot  find  symbol  inlineAliasVariables  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  inlineAliasVariables);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  this,  inlineAliasVariables);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    this);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasVariables	13	None	replace
404	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	31	None	replace
405	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineWellDefined);  [CE]  cannot  find  symbol  inlineWellDefined  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineWellDefined);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  inlineWellDefined);	  NodeTraversal.traverse(compiler,    aliasRef,    this,    newNodes);    	non-compiled	[CE]  cannot  find  symbol  inlineWellDefined	14	None	replace
406	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  inlineAliases,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,boolean,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  inlineAliases,  namespace);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  this,  inlineAliases,  namespace);	  NodeTraversal.traverse(compiler,    aliasRef,    this,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,boolean,GlobalNamespace)	15	None	replace
407	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
408	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssignedOnceInLifetime()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssignedOnceInLifetime()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssignedOnceInLifetime()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	2	None	replace
409	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node,  aliasRef.references.cloneTree();  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node,  aliasRef.references.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node,  aliasRef.references.cloneTree();	  Node    newNode    =    aliasRef.node.references.cloneTree();    	non-compiled	[CE]  ';'  expected	77	None	replace
410	[BUG]  [BUGGY]  Node  oldNode  =  alias.node.removeFirstChild();  [CE]  cannot  find  symbol  newNode  [FE]          AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  oldNode  =  alias.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  oldNode  =  alias.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    oldNode    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  newNode	40	None	replace
411	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  oldNode  =  alias.node.removeFirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  Node  oldNode  =  alias.node.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.removeFirstChild();  Node  oldNode  =  alias.node.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    oldNode    =    alias.node.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
412	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRef.getReferences(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRef.getReferences(i  +  1);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRef.getReferences(i  +  1);	  Node    aliasRefs    =    aliasRef.getReferences(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	70	None	replace
413	[BUG]  [BUGGY]  if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new	  if(aliasRefs!=    null)    {    aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(new    	non-compiled	[CE]  not  a  statement	76	None	replace
414	[BUG]  [BUGGY]  if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef!=  null)  {  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(	  if(aliasRefs!=    null)    {    aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(new    	non-compiled	[CE]  not  a  statement	76	None	replace
415	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(new	  if(aliasRefs!=    null)    {    aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(new    	non-compiled	[CE]  not  a  statement	76	None	replace
416	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.getNode()  /  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.getNode()  /  1;  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.getNode()  /  1;	  Node    newNode    =    aliasRef.getNode()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	83	None	replace
417	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.getNode()  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.getNode()  *  1;  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.getNode()  *  1;	  Node    newNode    =    aliasRef.getNode()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	83	None	replace
418	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	63	None	replace
419	[BUG]  [BUGGY]  Node  newNode  =  alias.node.removeLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.node.removeLastChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.removeLastChild();	  Node    newNode    =    alias.node.removeFirstChild();    Node    newNode    =    alias.node.removeFirstChild());    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
420	[BUG]  [BUGGY]  Node  newNode  =  alias.ref.getFirstChild();  [CE]  cannot  find  symbol  ref  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.ref.getFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.ref.getFirstChild();	  Node    newNode    =    aliasRef.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  ref	48	None	replace
421	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i,  size);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i,  size);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRef  =  aliasRefs.references.get(i,  size);	  Node    aliasRef    =    aliasRefs.references.get(i++);    	non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	86	None	replace
422	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);  [CE]  cannot  find  symbol  newNode  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol  newNode	54	None	replace
423	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasParent,  newNodes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Set<Node>)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasParent,  newNodes);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasParent,  newNodes);	  NodeTraversal.traverse(compiler,    newNodes,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Set<Node>)	46	None	replace
424	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  ')'  expected	6	None	replace
425	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(aliasRef.cloneTree(),  i);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRef.getParent().removeChild(aliasRef.cloneTree(),  i);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRef.getParent().removeChild(aliasRef.cloneTree(),  i);	  aliasRef.getParent().removeChild(aliasRef);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
426	[BUG]  [BUGGY]  alias.node.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  alias.node.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	alias.node.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {	  alias.node.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
427	[BUG]  [BUGGY]  alias.node.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  alias.node.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	alias.node.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {	  alias.node.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
428	[BUG]  [BUGGY]  if(aliasRef.isWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRef.isWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRef.isWellDefined()  ||  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  aliasRef.referenceIsWellDefined()    &&    aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRef.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
429	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  legend);  [CE]  cannot  find  symbol  legend  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  legend);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  legend);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    collector);    	non-compiled	[CE]  cannot  find  symbol  legend	45	None	replace
430	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  compiler);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,ReferenceCollectingCallback,AbstractCompiler)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  compiler);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  compiler);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    collector);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,ReferenceCollectingCallback,AbstractCompiler)	45	None	replace
431	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  flags);  [CE]  cannot  find  symbol  flags  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  flags);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  collector,  flags);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    collector);    	non-compiled	[CE]  cannot  find  symbol  flags	45	None	replace
432	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(var);  }  [CE]  cannot  find  symbol  var  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(var);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(var);  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol  var	74	None	replace
433	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  newNodes.add(newNode);  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
434	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.cloneTree();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.cloneTree();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.cloneTree();	  Node    aliasRefs    =    alias.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	61	None	replace
435	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(var);  }  [CE]  cannot  find  symbol  var  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(var);  }  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(var);  }	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    }    	non-compiled	[CE]  cannot  find  symbol  var	97	None	replace
436	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i  +  2);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references.get(i  +  2);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references.get(i  +  2);	  Node    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	9	None	replace
437	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  size);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  size);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references.get(i,  size);	  Node    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	9	None	replace
438	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalInitializingOnce());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalInitializingOnce());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalInitializingOnce());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce());    	non-compiled	[CE]  not  a  statement	95	None	replace
439	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRef.references.iterator().next();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  aliasRef.references.iterator().next();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  aliasRef.references.iterator().next();	  Node    aliasRefs    =    aliasRef.references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	68	None	replace
440	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.references;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.node.references;  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.node.references;	  Node    aliasRefs    =    aliasRef.references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	68	None	replace
441	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [CE]  cannot  find  symbol  newNode  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  cannot  find  symbol  newNode	21	None	replace
442	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration();	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  not  a  statement	104	None	replace
443	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references!=  null?  alias.references.getReferences()  :  Collections.EMPTY_LIST;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references!=  null?  alias.references.getReferences()  :  Collections.EMPTY_LIST;  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references!=  null?  alias.references.getReferences()  :  Collections.EMPTY_LIST;	  Node    aliasRefs    =    alias.references.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	60	None	replace
444	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references!=  null?  alias.references.getReferences()  :  Collections.emptySet();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references!=  null?  alias.references.getReferences()  :  Collections.emptySet();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references!=  null?  alias.references.getReferences()  :  Collections.emptySet();	  Node    aliasRefs    =    alias.references.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	60	None	replace
445	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references!=  null?  alias.references.getReferences()  :  null;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  alias.references!=  null?  alias.references.getReferences()  :  null;  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  alias.references!=  null?  alias.references.getReferences()  :  null;	  Node    aliasRefs    =    alias.references.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	60	None	replace
446	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	1	None	replace
447	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce())  {	  aliasRefs.referenceIsWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isLocalOnce())    {    	non-compiled	[CE]  not  a  statement	103	None	replace
448	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  inlineAliases,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,boolean,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  inlineAliases,  namespace);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  inlineAliases,  namespace);	  NodeTraversal.traverse(compiler,    aliasRef,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,boolean,GlobalNamespace)	65	None	replace
449	[BUG]  [BUGGY]  Node  aliasRef  =  alias.references.get(i++);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRef  =  alias.references.get(i++);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRef  =  alias.references.get(i++);	  Node    aliasRef    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	36	None	replace
450	[BUG]  [BUGGY]  Node  newNode  =  alias.ref.newNode();  [CE]  cannot  find  symbol  ref  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.ref.newNode();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.ref.newNode();	  Node    newNode    =    aliasRef.newNode();    	non-compiled	[CE]  cannot  find  symbol  ref	27	None	replace
451	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i  +  2);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  aliasRefs  =  newNodes.get(i  +  2);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  aliasRefs  =  newNodes.get(i  +  2);	  Node    aliasRefs    =    newNodes.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	52	None	replace
452	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(var);  [CE]  cannot  find  symbol  var  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(var);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(var);	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol  var	92	None	replace
453	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce();  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce();	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	81	None	replace
454	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime();  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime();	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	81	None	replace
455	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.getFirstReferenceIsAssigningDeclaration();  [CE]  cannot  find  symbol  node  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.node.getFirstReferenceIsAssigningDeclaration();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.getFirstReferenceIsAssigningDeclaration();	  Node    newNode    =    aliasRef.node.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  cannot  find  symbol  node	57	None	replace
456	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  aliasRef);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,Reference)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  aliasRef);  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes,  aliasRef);	  NodeTraversal.traverse(compiler,    aliasRef,    newNodes,    compiler);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>,Reference)	47	None	replace
457	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.namespace.cloneTree();  [CE]  cannot  find  symbol  namespace  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  aliasRef.namespace.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.namespace.cloneTree();	  Node    newNode    =    aliasRef.type.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  namespace	38	None	replace
458	[BUG]  [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingTree())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingTree())  {  [BUGGY]      Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	aliasRefs.referenceIsWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingTree())  {	  aliasRefs.referenceIsWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	71	None	replace
459	[BUG]  [BUGGY]  Node  newNode  =  alias.refs.cloneTree();  [CE]  cannot  find  symbol  refs  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);      [BUGGY]  Node  newNode  =  alias.refs.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.refs.cloneTree();	  Node    newNode    =    alias.cloneTree();    	non-compiled	[CE]  cannot  find  symbol  refs	87	None	replace
