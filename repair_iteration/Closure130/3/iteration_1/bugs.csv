bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    aliasRefs.getParent().removeChild(aliasRef);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]    aliasRefs.getParent().removeChild(aliasRef);  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	    aliasRefs.getParent().removeChild(aliasRef);		non-compiled	[CE]  cannot  find  symbol	6	None	add
2	[BUG]  [BUGGY]    Node  newNode  =  alias.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]    Node  newNode  =  alias.node.cloneTree();  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	    Node  newNode  =  alias.node.cloneTree();		non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	6	None	add
3	[BUG]  [BUGGY]    Node  aliasRefs  =  aliasRef.references.get(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]    Node  aliasRefs  =  aliasRef.references.get(i);  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	    Node  aliasRefs  =  aliasRef.references.get(i);		non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	6	None	add
4	[BUG]  [BUGGY]    Node  newNode  =  aliasRef.getNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]    Node  newNode  =  aliasRef.getNode();  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	    Node  newNode  =  aliasRef.getNode();		non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	6	None	add
5	[BUG]  [BUGGY]    Node  aliasRefs  =  aliasRef.getReferences();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]    Node  aliasRefs  =  aliasRef.getReferences();  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	    Node  aliasRefs  =  aliasRef.getReferences();		non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	6	None	add
6	[BUG]  [BUGGY]    Node  aliasRefs  =  aliasRef.references();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]    Node  aliasRefs  =  aliasRef.references();  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	    Node  aliasRefs  =  aliasRef.references();		non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	6	None	add
7	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.cloneTree();  [CE]  cannot  find  symbol  node  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]  Node  newNode  =  aliasRef.node.cloneTree();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.cloneTree();	Node  newNode  =  alias.node.cloneTree();  	non-compiled	[CE]  cannot  find  symbol  node	5	None	replace
8	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.cloneTree();  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]  Node  newNode  =  aliasRef.cloneTree();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.cloneTree();	Node  newNode  =  alias.node.cloneTree();  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
9	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.getNext();  [CE]  cannot  find  symbol  node  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]  Node  newNode  =  aliasRef.node.getNext();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.getNext();	Node  newNode  =  alias.node.cloneTree();  	non-compiled	[CE]  cannot  find  symbol  node	5	None	replace
10	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]  Node  newNode  =  aliasRef.node.getFirstChild();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.getFirstChild();	Node  newNode  =  alias.node.cloneTree();  	non-compiled	[CE]  cannot  find  symbol  node	5	None	replace
11	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  [CE]  cannot  find  symbol  node  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.removeFirstChild();	Node  newNode  =  alias.node.cloneTree();  	non-compiled	[CE]  cannot  find  symbol  node	5	None	replace
12	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.removeFirst();  [CE]  cannot  find  symbol  node  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]  Node  newNode  =  aliasRef.node.removeFirst();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  aliasRef.node.removeFirst();	Node  newNode  =  alias.node.cloneTree();  	non-compiled	[CE]  cannot  find  symbol  node	5	None	replace
13	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  aliasRef,  newNodes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]    NodeTraversal.traverse(compiler,  aliasRef,  newNodes);  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	    NodeTraversal.traverse(compiler,  aliasRef,  newNodes);		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>)	6	None	add
14	[BUG]  [BUGGY]    Node  aliasRef  =  aliasRef.references.get(i);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]    Node  aliasRef  =  aliasRef.references.get(i);  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	    Node  aliasRef  =  aliasRef.references.get(i);		non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	6	None	add
15	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  aliasRef,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]    NodeTraversal.traverse(compiler,  aliasRef,  this);  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	    NodeTraversal.traverse(compiler,  aliasRef,  this);		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties)	6	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	add	Node  newNode  =  alias.node.removeFirstChild();	Node  newNode  =  alias.node.cloneTree();  	compilable	  [FE]  AssertionFailedError  	5	10	replace
17	[BUG]  [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]  Node  newNode  =  alias.node.removeFirstChild();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	Node  newNode  =  alias.node.removeFirstChild();	Node  newNode  =  alias.node.cloneTree();  	compilable	  [FE]  AssertionFailedError  	5	10	replace
18	[BUG]  [BUGGY]    aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]    aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	    aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());		non-compiled	[CE]  not  a  statement	6	None	add
19	[BUG]  [BUGGY]    aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]    aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	    aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();		non-compiled	[CE]  not  a  statement	6	None	add
20	[BUG]  [BUGGY]    aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]    aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	    aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);		non-compiled	[CE]  not  a  statement	6	None	add
21	[BUG]  [BUGGY]    aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]    aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	    aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {		non-compiled	[CE]  not  a  statement	6	None	add
22	[BUG]  [BUGGY]    aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]    aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	    aliasRefs.referenceIsWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);		non-compiled	[CE]  not  a  statement	6	None	add
