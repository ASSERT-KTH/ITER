bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] namespace = new GlobalNamespace(compiler, externs, root); [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] public void process(Node externs, Node root) { GlobalNamespace namespace; if (collapsePropertiesOnExternTypes) { [BUGGY] namespace = new GlobalNamespace(compiler, externs, root); [BUGGY] } else { namespace = new GlobalNamespace(compiler, root); } if (inlineAliases) { inlineAliases(namespace); } nameMap = namespace.getNameIndex(); globalNames = namespace.getNameForest(); checkNamespaces(); [CLASS] CollapseProperties 1 [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node externs root List globalNames Map nameMap GlobalNamespace namespace Name n  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.5	122	122	1	replace	
2	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] public void process(Node externs, Node root) { GlobalNamespace namespace; if (collapsePropertiesOnExternTypes) { [BUGGY] [BUGGY] namespace = new GlobalNamespace(compiler, externs, root); } else { namespace = new GlobalNamespace(compiler, root); } if (inlineAliases) { inlineAliases(namespace); } nameMap = namespace.getNameIndex(); globalNames = namespace.getNameForest(); checkNamespaces(); [CLASS] CollapseProperties 1 [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] AbstractCompiler compiler boolean collapsePropertiesOnExternTypes inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS Node externs root List globalNames Map nameMap GlobalNamespace namespace Name n  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.5	122	122	1	add	
3	[BUG] [BUGGY] ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { [BUGGY] ReferenceCollectingCallback.Reference aliasRef =    aliasRefs.references.get(i); [BUGGY] aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }  aliasParent.replaceChild(alias.node, IR.nullNode()); compiler.reportCodeChange(); [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	
4	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { [BUGGY] [BUGGY] ReferenceCollectingCallback.Reference aliasRef =    aliasRefs.references.get(i); aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }  aliasParent.replaceChild(alias.node, IR.nullNode()); compiler.reportCodeChange(); [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	add	
5	[BUG] [BUGGY] Node newNode = alias.node.cloneTree(); [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); [BUGGY] Node newNode = alias.node.cloneTree(); [BUGGY] aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }  aliasParent.replaceChild(alias.node, IR.nullNode()); compiler.reportCodeChange();    [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	replace	
6	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); [BUGGY] [BUGGY] Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }  aliasParent.replaceChild(alias.node, IR.nullNode()); compiler.reportCodeChange();    [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	226	226	1	add	
7	[BUG] [BUGGY] aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); [BUGGY] aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); [BUGGY] newNodes.add(newNode); }  aliasParent.replaceChild(alias.node, IR.nullNode()); compiler.reportCodeChange();   namespace.scanNewNodes(alias.scope, newNodes); [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	
8	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); [BUGGY] [BUGGY] aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }  aliasParent.replaceChild(alias.node, IR.nullNode()); compiler.reportCodeChange();   namespace.scanNewNodes(alias.scope, newNodes); [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	
9	[BUG] [BUGGY] newNodes.add(newNode); [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); [BUGGY] newNodes.add(newNode); [BUGGY] }  aliasParent.replaceChild(alias.node, IR.nullNode()); compiler.reportCodeChange();   namespace.scanNewNodes(alias.scope, newNodes); return true; [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	
10	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); [BUGGY] [BUGGY] newNodes.add(newNode); }  aliasParent.replaceChild(alias.node, IR.nullNode()); compiler.reportCodeChange();   namespace.scanNewNodes(alias.scope, newNodes); return true; [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	
11	[BUG] [BUGGY] name.removeRef(ref); [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {   List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {  if (inlineAliasIfPossible(ref, namespace)) { [BUGGY] name.removeRef(ref); [BUGGY] } } } } [CLASS] CollapseProperties 1 [METHOD] inlineAliases [RETURN_TYPE] void  GlobalNamespace namespace [VARIABLES] AbstractCompiler compiler Ref ref boolean collapsePropertiesOnExternTypes inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap GlobalNamespace namespace Deque workList Name name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	
12	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {   List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {  if (inlineAliasIfPossible(ref, namespace)) { [BUGGY] [BUGGY] name.removeRef(ref); } } } } [CLASS] CollapseProperties 1 [METHOD] inlineAliases [RETURN_TYPE] void  GlobalNamespace namespace [VARIABLES] AbstractCompiler compiler Ref ref boolean collapsePropertiesOnExternTypes inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap GlobalNamespace namespace Deque workList Name name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	
13	[BUG] [BUGGY] int size = aliasRefs.references.size(); [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  [BUGGY] int size = aliasRefs.references.size(); [BUGGY] Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }  [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	replace	
14	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  [BUGGY] [BUGGY] int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }  [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	220	220	1	add	
15	[BUG] [BUGGY] Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); [BUGGY] Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); [BUGGY] for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }   [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	
16	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); [BUGGY] [BUGGY] Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }   [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	add	
17	[BUG] [BUGGY] for (int i = 1; i < size; i++) { [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); [BUGGY] for (int i = 1; i < size; i++) { [BUGGY] ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }  aliasParent.replaceChild(alias.node, IR.nullNode()); [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	222	222	1	replace	
18	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); [BUGGY] [BUGGY] for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }  aliasParent.replaceChild(alias.node, IR.nullNode()); [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	222	222	1	add	
19	[BUG] [BUGGY] aliasParent.replaceChild(alias.node, IR.nullNode()); [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }  [BUGGY] aliasParent.replaceChild(alias.node, IR.nullNode()); [BUGGY] compiler.reportCodeChange();   namespace.scanNewNodes(alias.scope, newNodes); return true; } [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	232	232	1	replace	
20	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }  [BUGGY] [BUGGY] aliasParent.replaceChild(alias.node, IR.nullNode()); compiler.reportCodeChange();   namespace.scanNewNodes(alias.scope, newNodes); return true; } [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	232	232	1	add	
21	[BUG] [BUGGY] compiler.reportCodeChange(); [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }  aliasParent.replaceChild(alias.node, IR.nullNode()); [BUGGY] compiler.reportCodeChange(); [BUGGY]    namespace.scanNewNodes(alias.scope, newNodes); return true; } [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	233	233	1	replace	
22	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }  aliasParent.replaceChild(alias.node, IR.nullNode()); [BUGGY] [BUGGY] compiler.reportCodeChange();   namespace.scanNewNodes(alias.scope, newNodes); return true; } [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	233	233	1	add	
23	[BUG] [BUGGY] namespace.scanNewNodes(alias.scope, newNodes); [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }  aliasParent.replaceChild(alias.node, IR.nullNode()); compiler.reportCodeChange();   [BUGGY] namespace.scanNewNodes(alias.scope, newNodes); [BUGGY] return true; } [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	237	237	1	replace	
24	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode); newNodes.add(newNode); }  aliasParent.replaceChild(alias.node, IR.nullNode()); compiler.reportCodeChange();   [BUGGY] [BUGGY] namespace.scanNewNodes(alias.scope, newNodes); return true; } [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	237	237	1	add	
25	[BUG] [BUGGY] return true; [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] newNodes.add(newNode); }  aliasParent.replaceChild(alias.node, IR.nullNode()); compiler.reportCodeChange();   namespace.scanNewNodes(alias.scope, newNodes); [BUGGY] return true; [BUGGY] } [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	238	238	1	replace	
26	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] newNodes.add(newNode); }  aliasParent.replaceChild(alias.node, IR.nullNode()); compiler.reportCodeChange();   namespace.scanNewNodes(alias.scope, newNodes); [BUGGY] [BUGGY] return true; } [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	238	238	1	add	
27	[BUG] [BUGGY] Scope scope = alias.scope; [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {     Node aliasParent = alias.node.getParent(); if (aliasParent.isName()) {  [BUGGY] Scope scope = alias.scope; [BUGGY] Var aliasVar = scope.getVar(aliasParent.getString()); ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); (new NodeTraversal(compiler, collector)).traverseAtScope(scope); ReferenceCollection aliasRefs = collector.getReferences(aliasVar); if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	207	207	1	replace	
28	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {     Node aliasParent = alias.node.getParent(); if (aliasParent.isName()) {  [BUGGY] [BUGGY] Scope scope = alias.scope; Var aliasVar = scope.getVar(aliasParent.getString()); ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); (new NodeTraversal(compiler, collector)).traverseAtScope(scope); ReferenceCollection aliasRefs = collector.getReferences(aliasVar); if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	207	207	1	add	
29	[BUG] [BUGGY] Var aliasVar = scope.getVar(aliasParent.getString()); [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {     Node aliasParent = alias.node.getParent(); if (aliasParent.isName()) {  Scope scope = alias.scope; [BUGGY] Var aliasVar = scope.getVar(aliasParent.getString()); [BUGGY] ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); (new NodeTraversal(compiler, collector)).traverseAtScope(scope); ReferenceCollection aliasRefs = collector.getReferences(aliasVar); if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) { [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	208	208	1	replace	
30	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {     Node aliasParent = alias.node.getParent(); if (aliasParent.isName()) {  Scope scope = alias.scope; [BUGGY] [BUGGY] Var aliasVar = scope.getVar(aliasParent.getString()); ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); (new NodeTraversal(compiler, collector)).traverseAtScope(scope); ReferenceCollection aliasRefs = collector.getReferences(aliasVar); if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) { [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	208	208	1	add	
31	[BUG] [BUGGY] ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler,  ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {     Node aliasParent = alias.node.getParent(); if (aliasParent.isName()) {  Scope scope = alias.scope; Var aliasVar = scope.getVar(aliasParent.getString()); [BUGGY] ReferenceCollectingCallback collector =   new ReferenceCollectingCallback(compiler,       ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, [BUGGY] new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); (new NodeTraversal(compiler, collector)).traverseAtScope(scope); ReferenceCollection aliasRefs = collector.getReferences(aliasVar); if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	209	211	1	replace	
32	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {     Node aliasParent = alias.node.getParent(); if (aliasParent.isName()) {  Scope scope = alias.scope; Var aliasVar = scope.getVar(aliasParent.getString()); [BUGGY] [BUGGY] ReferenceCollectingCallback collector =   new ReferenceCollectingCallback(compiler,       ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); (new NodeTraversal(compiler, collector)).traverseAtScope(scope); ReferenceCollection aliasRefs = collector.getReferences(aliasVar); if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	209	211	1	add	
33	[BUG] [BUGGY] (new NodeTraversal(compiler, collector)).traverseAtScope(scope); [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT]  Node aliasParent = alias.node.getParent(); if (aliasParent.isName()) {  Scope scope = alias.scope; Var aliasVar = scope.getVar(aliasParent.getString()); ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); [BUGGY] (new NodeTraversal(compiler, collector)).traverseAtScope(scope); [BUGGY]  ReferenceCollection aliasRefs = collector.getReferences(aliasVar); if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	213	213	1	replace	
34	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT]  Node aliasParent = alias.node.getParent(); if (aliasParent.isName()) {  Scope scope = alias.scope; Var aliasVar = scope.getVar(aliasParent.getString()); ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); [BUGGY] [BUGGY] (new NodeTraversal(compiler, collector)).traverseAtScope(scope); ReferenceCollection aliasRefs = collector.getReferences(aliasVar); if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	213	213	1	add	
35	[BUG] [BUGGY] ReferenceCollection aliasRefs = collector.getReferences(aliasVar); [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (aliasParent.isName()) {  Scope scope = alias.scope; Var aliasVar = scope.getVar(aliasParent.getString()); ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); (new NodeTraversal(compiler, collector)).traverseAtScope(scope); [BUGGY] ReferenceCollection aliasRefs = collector.getReferences(aliasVar); [BUGGY] if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i);  [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	215	215	1	replace	
36	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (aliasParent.isName()) {  Scope scope = alias.scope; Var aliasVar = scope.getVar(aliasParent.getString()); ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); (new NodeTraversal(compiler, collector)).traverseAtScope(scope); [BUGGY] [BUGGY] ReferenceCollection aliasRefs = collector.getReferences(aliasVar); if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i);  [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	215	215	1	add	
37	[BUG] [BUGGY] if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration()  && aliasRefs.isAssignedOnceInLifetime()) { [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT]  Scope scope = alias.scope; Var aliasVar = scope.getVar(aliasParent.getString()); ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); (new NodeTraversal(compiler, collector)).traverseAtScope(scope); ReferenceCollection aliasRefs = collector.getReferences(aliasVar); [BUGGY] if (aliasRefs.isWellDefined()   && aliasRefs.firstReferenceIsAssigningDeclaration()     && aliasRefs.isAssignedOnceInLifetime()) { [BUGGY] && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	216	218	1	replace	
38	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT]  Scope scope = alias.scope; Var aliasVar = scope.getVar(aliasParent.getString()); ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); (new NodeTraversal(compiler, collector)).traverseAtScope(scope); ReferenceCollection aliasRefs = collector.getReferences(aliasVar); [BUGGY] [BUGGY] if (aliasRefs.isWellDefined()   && aliasRefs.firstReferenceIsAssigningDeclaration()     && aliasRefs.isAssignedOnceInLifetime()) { && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) {  int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef = aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2672612419124244	216	218	1	add	
39	[BUG] [BUGGY] if (inlineAliasIfPossible(ref, namespace)) { [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {   List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {  [BUGGY] if (inlineAliasIfPossible(ref, namespace)) { [BUGGY] name.removeRef(ref); } } } } [CLASS] CollapseProperties 1 [METHOD] inlineAliases [RETURN_TYPE] void  GlobalNamespace namespace [VARIABLES] AbstractCompiler compiler Ref ref boolean collapsePropertiesOnExternTypes inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap GlobalNamespace namespace Deque workList Name name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.25	180	180	1	replace	
40	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {   List<Ref> refs = Lists.newArrayList(name.getRefs()); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {  [BUGGY] [BUGGY] if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref); } } } } [CLASS] CollapseProperties 1 [METHOD] inlineAliases [RETURN_TYPE] void  GlobalNamespace namespace [VARIABLES] AbstractCompiler compiler Ref ref boolean collapsePropertiesOnExternTypes inlineAliases DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap GlobalNamespace namespace Deque workList Name name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.25	180	180	1	add	
41	[BUG] [BUGGY] Node aliasParent = alias.node.getParent(); [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {     [BUGGY] Node aliasParent = alias.node.getParent(); [BUGGY] if (aliasParent.isName()) {  Scope scope = alias.scope; Var aliasVar = scope.getVar(aliasParent.getString()); ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); (new NodeTraversal(compiler, collector)).traverseAtScope(scope);  [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.25	204	204	1	replace	
42	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {     [BUGGY] [BUGGY] Node aliasParent = alias.node.getParent(); if (aliasParent.isName()) {  Scope scope = alias.scope; Var aliasVar = scope.getVar(aliasParent.getString()); ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); (new NodeTraversal(compiler, collector)).traverseAtScope(scope);  [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.25	204	204	1	add	
43	[BUG] [BUGGY] if (aliasParent.isName()) { [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {     Node aliasParent = alias.node.getParent(); [BUGGY] if (aliasParent.isName()) { [BUGGY]  Scope scope = alias.scope; Var aliasVar = scope.getVar(aliasParent.getString()); ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); (new NodeTraversal(compiler, collector)).traverseAtScope(scope); ReferenceCollection aliasRefs = collector.getReferences(aliasVar); [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.25	205	205	1	replace	
44	[BUG] [BUGGY] [FE] junit.framework.AssertionFailedError: Expected: function f(){return function(){var args=arguments;setTimeout(function(){alert(args)} [CONTEXT] private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {     Node aliasParent = alias.node.getParent(); [BUGGY] [BUGGY] if (aliasParent.isName()) {  Scope scope = alias.scope; Var aliasVar = scope.getVar(aliasParent.getString()); ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar)); (new NodeTraversal(compiler, collector)).traverseAtScope(scope); ReferenceCollection aliasRefs = collector.getReferences(aliasVar); [CLASS] CollapseProperties 1 [METHOD] inlineAliasIfPossible [RETURN_TYPE] boolean  Ref alias GlobalNamespace namespace [VARIABLES] ReferenceCollectingCallback collector Set newNodes Var aliasVar Reference aliasRef Node aliasParent newNode GlobalNamespace namespace int i size AbstractCompiler compiler Ref alias boolean collapsePropertiesOnExternTypes inlineAliases Scope scope DiagnosticType NAMESPACE_REDEFINED_WARNING UNSAFE_NAMESPACE_WARNING UNSAFE_THIS List globalNames refs Map nameMap ReferenceCollection aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.25	205	205	1	add	
