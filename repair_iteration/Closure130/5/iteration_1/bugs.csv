bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	newNodes.add(newNode);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	9	1	replace
2	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	newNodes.add(newNode);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	9	1	replace
3	[BUG]  [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet());  [CE]  cannot  find  symbol  Collections  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet());  [BUGGY]  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Collections.  <  Node>emptySet());	newNodes.add(newNode);  	non-compiled	[CE]  cannot  find  symbol  Collections	9	None	replace
4	[BUG]  [BUGGY]  newNodes.add(node);  [CE]  cannot  find  symbol  node  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]  newNodes.add(node);  [BUGGY]  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(node);	newNodes.add(newNode);  	non-compiled	[CE]  cannot  find  symbol  node	9	None	replace
5	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	newNodes.add(newNode);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	9	1	replace
6	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	newNodes.add(newNode);  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	9	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]    [BUGGY]  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	  	newNodes.add(newNode);  	compilable	  [FE]  AssertionFailedError  	9	10	replace
8	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]    [BUGGY]  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	  	newNodes.add(newNode);  	compilable	  [FE]  AssertionFailedError  	9	10	replace
9	[BUG]  [BUGGY]    Node  newNode  =  aliasRefs.getParent();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]    Node  newNode  =  aliasRefs.getParent();  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	    Node  newNode  =  aliasRefs.getParent();		non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	10	None	add
10	[BUG]  [BUGGY]    aliasRefs.getParent().removeChild(newNode);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]    aliasRefs.getParent().removeChild(newNode);  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	    aliasRefs.getParent().removeChild(newNode);		non-compiled	[CE]  cannot  find  symbol	10	None	add
11	[BUG]  [BUGGY]    aliasRefs.removeChild(newNode);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]    aliasRefs.removeChild(newNode);  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	    aliasRefs.removeChild(newNode);		non-compiled	[CE]  cannot  find  symbol	10	None	add
12	[BUG]  [BUGGY]    Node  newNode  =  aliasRefs.references.get(i);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]    Node  newNode  =  aliasRefs.references.get(i);  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	    Node  newNode  =  aliasRefs.references.get(i);		non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	10	None	add
13	[BUG]  [BUGGY]    Node  newNode  =  aliasRefs.getParent();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]    Node  newNode  =  aliasRefs.getParent();  compiler.reportCodeChange();  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	    Node  newNode  =  aliasRefs.getParent();  compiler.reportCodeChange();		non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	10	None	add
14	[BUG]  [BUGGY]    Node  newNode  =  aliasRefs.get(i);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]    Node  newNode  =  aliasRefs.get(i);  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	    Node  newNode  =  aliasRefs.get(i);		non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	10	None	add
15	[BUG]  [BUGGY]  newNodes.add(newNode,  aliasRef);  [CE]  no  suitable  method  found  for  add(Node,Reference)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]  newNodes.add(newNode,  aliasRef);  [BUGGY]  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  aliasRef);	newNodes.add(newNode);  	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Reference)	9	None	replace
16	[BUG]  [BUGGY]  newNodes.add(i,  newNode);  [CE]  no  suitable  method  found  for  add(int,Node)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]  newNodes.add(i,  newNode);  [BUGGY]  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(i,  newNode);	newNodes.add(newNode);  	non-compiled	[CE]  no  suitable  method  found  for  add(int,Node)	9	None	replace
17	[BUG]  [BUGGY]    Node  newNode  =  aliasRefs.getNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]    Node  newNode  =  aliasRefs.getNode();  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	    Node  newNode  =  aliasRefs.getNode();		non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	10	None	add
18	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  newNode,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,CollapseProperties)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]    NodeTraversal.traverse(compiler,  newNode,  this);  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	    NodeTraversal.traverse(compiler,  newNode,  this);		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,CollapseProperties)	10	None	add
19	[BUG]  [BUGGY]    Node  aliasRefs  =  aliasRefs.get(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]    Node  aliasRefs  =  aliasRefs.get(i);  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	    Node  aliasRefs  =  aliasRefs.get(i);		non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	10	None	add
20	[BUG]  [BUGGY]    aliasRefs.getParent().replaceChild(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]    aliasRefs.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	    aliasRefs.getParent().replaceChild(aliasRef.getNode(),  newNode);		non-compiled	[CE]  cannot  find  symbol	10	None	add
21	[BUG]  [BUGGY]    Node  newNode  =  alias.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]    Node  newNode  =  alias.node.cloneTree();  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	    Node  newNode  =  alias.node.cloneTree();		non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	10	None	add
22	[BUG]  [BUGGY]    aliasRefs.getParent().replaceChild(aliasRef.getNameNode(),  newNode);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]    aliasRefs.getParent().replaceChild(aliasRef.getNameNode(),  newNode);  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	    aliasRefs.getParent().replaceChild(aliasRef.getNameNode(),  newNode);		non-compiled	[CE]  cannot  find  symbol	10	None	add
23	[BUG]  [BUGGY]  newNodes.addAll(newNode);  [CE]  no  suitable  method  found  for  addAll(Node)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]  newNodes.addAll(newNode);  [BUGGY]  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode);	newNodes.add(newNode);  	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node)	9	None	replace
