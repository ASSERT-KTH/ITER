bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  &&  aliasRefs.isAssignedOnceInLifetime())  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  &&  aliasRefs.isAssignedOnceInLifetime())  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	&&  aliasRefs.isAssignedOnceInLifetime())  {  if(newNode!=  null)  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
2	[BUG]  [BUGGY]  if(namespace!=  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(namespace!=  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(namespace!=  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
3	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
4	[BUG]  [BUGGY]  if(newNode  ==  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode  ==  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode  ==  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
5	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode  ==  null)  {  newNodes.add(newNode);  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode  ==  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode  ==  null)  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
6	[BUG]  [BUGGY]  newNodes.add(aliasRef,  i);  [CE]  no  suitable  method  found  for  add(Reference,int)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  i);	  newNodes.add(newNode,    i);    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference,int)	44	None	replace
7	[BUG]  [BUGGY]  newNodes.add(newNode,  namespace,  i);  [CE]  no  suitable  method  found  for  add(Node,GlobalNamespace,int)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  namespace,  i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  namespace,  i);	  newNodes.add(newNode,    i);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,GlobalNamespace,int)	44	None	replace
8	[BUG]  [BUGGY]  newNodes.add(newNode,  i,  namespace);  [CE]  no  suitable  method  found  for  add(Node,int,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  i,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  i,  namespace);	  newNodes.add(newNode,    i);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,GlobalNamespace)	44	None	replace
9	[BUG]  [BUGGY]  if(newNode!=  null)  {  for(AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  for(AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  for(AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    for(AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	11	None	replace
10	[BUG]  [BUGGY]  if(newNode  ==  null)  {  for(AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode  ==  null)  {  for(AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode  ==  null)  {  for(AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    for(AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	11	None	replace
11	[BUG]  [BUGGY]  if(newNode!=  null)  {  for(AssertionFailedError:  expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  for(AssertionFailedError:  expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  for(AssertionFailedError:  expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    for(AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	11	None	replace
12	[BUG]  [BUGGY]  if(newNode!=  null)  {  for(AssertionFailedError:  expected()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  for(AssertionFailedError:  expected()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  for(AssertionFailedError:  expected()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    for(AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	11	None	replace
13	[BUG]  [BUGGY]  if(newNode!=  null)  {  for(AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  for(AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  for(AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    for(AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	59	None	replace
14	[BUG]  [BUGGY]  newNodes.add(aliasRef.node,  i);  [CE]  cannot  find  symbol  node  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.node,  i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.node,  i);	  newNodes.add(aliasRef.node,    newNode);    	non-compiled	[CE]  cannot  find  symbol  node	46	None	replace
15	[BUG]  [BUGGY]  newNodes.add(aliasRef.node,  alias.node);  [CE]  cannot  find  symbol  node  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.node,  alias.node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.node,  alias.node);	  newNodes.add(aliasRef.node,    newNode);    	non-compiled	[CE]  cannot  find  symbol  node	46	None	replace
16	[BUG]  [BUGGY]  newNodes.add(aliasRef.node,  IR.nullNode());  [CE]  cannot  find  symbol  node  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.node,  IR.nullNode());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.node,  IR.nullNode());	  newNodes.add(aliasRef.node,    newNode);    	non-compiled	[CE]  cannot  find  symbol  node	46	None	replace
17	[BUG]  [BUGGY]  newNodes.add(aliasRef.node,  aliasParent);  [CE]  cannot  find  symbol  node  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.node,  aliasParent);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.node,  aliasParent);	  newNodes.add(aliasRef.node,    newNode);    	non-compiled	[CE]  cannot  find  symbol  node	46	None	replace
18	[BUG]  [BUGGY]  newNodes.add(alias.node,  aliasRef);  [CE]  no  suitable  method  found  for  add(Node,Reference)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node,  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node,  aliasRef);	  newNodes.add(node,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Reference)	99	None	replace
19	[BUG]  [BUGGY]  newNodes.add(aliasRef,  node);  [CE]  cannot  find  symbol  node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  node);	  newNodes.add(node,    aliasRef);    	non-compiled	[CE]  cannot  find  symbol  node	99	None	replace
20	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(namespace!=  null)  {  namespace.scanNewNodes(alias.scope,  newNode);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(namespace!=  null)  {  namespace.scanNewNodes(alias.scope,  newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(namespace!=  null)  {  namespace.scanNewNodes(alias.scope,  newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alarm(args)    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
21	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  illegal  start  of  expression	154	None	add
22	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    if(newNodes  ==  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  illegal  start  of  expression	154	None	add
23	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  Node  newNode  =  alias.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  Node  newNode  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    Node  newNode  =  alias.node.cloneTree();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	154	None	add
24	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  Node  newNode  =  alias.node.cloneTree();  setTimeout(function()  {  alert(newNode)  }  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  Node  newNode  =  alias.node.cloneTree();  setTimeout(function()  {  alert(newNode)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    Node  newNode  =  alias.node.cloneTree();  setTimeout(function()  {  alert(newNode)  }	  	non-compiled	[CE]  ')'  expected	154	None	add
25	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  Node  newNode  =  aliasRefs.getParent();  setTimeout(function()  {  alert(newNode)  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  Node  newNode  =  aliasRefs.getParent();  setTimeout(function()  {  alert(newNode)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    Node  newNode  =  aliasRefs.getParent();  setTimeout(function()  {  alert(newNode)  }	  	non-compiled	[CE]  ')'  expected	154	None	add
26	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes  =  Sets.newHashSet();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes  =  Sets.newHashSet();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes  =  Sets.newHashSet();  }	  	non-compiled	[CE]  illegal  start  of  expression	154	None	add
27	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(i,  size);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(i,  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(i,  size);	  Node    newNode    =    aliasRefs.get(i,    newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	89	None	replace
28	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(i,  newNode).cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(i,  newNode).cloneTree();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(i,  newNode).cloneTree();	  Node    newNode    =    aliasRefs.get(i,    newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	89	None	replace
29	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(i,  type);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(i,  type);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(i,  type);	  Node    newNode    =    aliasRefs.get(i,    newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	89	None	replace
30	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
31	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes  ==  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
32	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes  ==  null)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes  ==  null)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  if(newNodes  ==  null)  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
33	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
34	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes  =  Sets.newHashSet();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes  =  Sets.newHashSet();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes  =  Sets.newHashSet();  }	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
35	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  if(newNodes!=  null)  {  newNodes  =  Sets.newHashSet();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  if(newNodes!=  null)  {  newNodes  =  Sets.newHashSet();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes  ==  null)  {  if(newNodes!=  null)  {  newNodes  =  Sets.newHashSet();  }	  	non-compiled	[CE]  illegal  start  of  expression	149	None	add
36	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;  setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;  setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	145	None	add
37	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	145	None	add
38	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	145	None	add
39	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	145	None	add
40	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getNameNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  alias.node.getNameNode();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  alias.node.getNameNode();	  Node    newNode    =    aliasRefs.getNameNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	87	None	replace
41	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode.getNameNode(),  aliasRef);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(newNode.getNameNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(newNode.getNameNode(),  aliasRef);	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
42	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  namespace);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
43	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  i);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  i);	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
44	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.getNext();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRef.node.getNext();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRef.node.getNext();	  Node    newNode    =    aliasRef.node.cloneTree();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	23	None	replace
45	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.getParent();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRef.node.getParent();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRef.node.getParent();	  Node    newNode    =    aliasRef.node.cloneTree();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	23	None	replace
46	[BUG]  [BUGGY]  newNodes.add(newNode,  aliasRef.node);  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  aliasRef.node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  aliasRef.node);	  newNodes.add(newNode,    aliasRef.references);    	non-compiled	[CE]  cannot  find  symbol  node	129	None	replace
47	[BUG]  [BUGGY]  newNodes.add(newNode,  aliasRef.namespace);  [CE]  cannot  find  symbol  namespace  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  aliasRef.namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  aliasRef.namespace);	  newNodes.add(newNode,    aliasRef.references);    	non-compiled	[CE]  cannot  find  symbol  namespace	129	None	replace
48	[BUG]  [BUGGY]  newNodes.add(aliasRef,  aliasRef.references);  [CE]  cannot  find  symbol  references  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  aliasRef.references);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  aliasRef.references);	  newNodes.add(newNode,    aliasRef.references);    	non-compiled	[CE]  cannot  find  symbol  references	129	None	replace
49	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(1);	  Node    newNode    =    aliasRefs.references.get(0);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	55	None	replace
50	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.node.references.get(0);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.node.references.get(0);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.node.references.get(0);	  Node    newNode    =    aliasRefs.references.get(0);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	55	None	replace
51	[BUG]  [BUGGY]  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    function    f()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	20	None	replace
52	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSet(arguments);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSet(arguments);  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSet(arguments);  setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    function    f()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	20	None	replace
53	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSet();  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSet();  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSet();  setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    function    f()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	20	None	replace
54	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  setTimeout(function()  {  alert(newNodes)  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  setTimeout(function()  {  alert(newNodes)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  setTimeout(function()  {  alert(newNodes)  }	  junit.framework.AssertionFailedError:    Expected:    function    f()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	20	None	replace
55	[BUG]  [BUGGY]  newNodes.addAll(aliasRef,  newNode,  namespace);  [CE]  no  suitable  method  found  for  addAll(Reference,Node,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef,  newNode,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef,  newNode,  namespace);	  newNodes.addAll(aliasRef,    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Reference,Node,GlobalNamespace)	66	None	replace
56	[BUG]  [BUGGY]  newNodes.addAll(aliasRef,  aliasParent,  newNode);  [CE]  no  suitable  method  found  for  addAll(Reference,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef,  aliasParent,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef,  aliasParent,  newNode);	  newNodes.addAll(aliasRef,    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Reference,Node,Node)	66	None	replace
57	[BUG]  [BUGGY]  newNodes.addAll(aliasRef,  aliasRefs);  [CE]  no  suitable  method  found  for  addAll(Reference,ReferenceCollection)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef,  aliasRefs);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef,  aliasRefs);	  newNodes.addAll(aliasRef,    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Reference,ReferenceCollection)	66	None	replace
58	[BUG]  [BUGGY]  newNodes.addAll(aliasRef,  aliasVar,  newNode);  [CE]  no  suitable  method  found  for  addAll(Reference,Var,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef,  aliasVar,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef,  aliasVar,  newNode);	  newNodes.addAll(aliasRef,    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Reference,Var,Node)	66	None	replace
59	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild(aliasRef.  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild(aliasRef.  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild(aliasRef.	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasRef    =    aliasRefs.references.get(i);    aliasRef.getParent().replaceChild(aliasRef.getNode()    	non-compiled	[CE]  <identifier>  expected	101	None	replace
60	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild(alias  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild(alias  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild(alias	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasRef    =    aliasRefs.references.get(i);    aliasRef.getParent().replaceChild(aliasRef.getNode()    	non-compiled	[CE]  ')'  expected	101	None	replace
61	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild(aliasRef  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild(aliasRef  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild(aliasRef	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasRef    =    aliasRefs.references.get(i);    aliasRef.getParent().replaceChild(aliasRef.getNode()    	non-compiled	[CE]  ')'  expected	101	None	replace
62	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasRef    =    aliasRefs.references.get(i);    aliasRef.getParent().replaceChild(aliasRef.getNode()    	non-compiled	[CE]  not  a  statement	101	None	replace
63	[BUG]  [BUGGY]  newNodes.add(aliasRef,  newNode,  namespace);  [CE]  no  suitable  method  found  for  add(Reference,Node,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  newNode,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  newNode,  namespace);	  newNodes.add(newNode,    aliasRef,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference,Node,GlobalNamespace)	72	None	replace
64	[BUG]  [BUGGY]  newNodes.add(aliasRef,  aliasRef,  newNode);  [CE]  no  suitable  method  found  for  add(Reference,Reference,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  aliasRef,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  aliasRef,  newNode);	  newNodes.add(newNode,    aliasRef,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference,Reference,Node)	72	None	replace
65	[BUG]  [BUGGY]  newNodes.add(newNode,  namespace,  aliasRef);  [CE]  no  suitable  method  found  for  add(Node,GlobalNamespace,Reference)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  namespace,  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  namespace,  aliasRef);	  newNodes.add(newNode,    aliasRef,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,GlobalNamespace,Reference)	72	None	replace
66	[BUG]  [BUGGY]  newNodes.add(aliasRef,  n,  namespace);  [CE]  cannot  find  symbol  n  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  n,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  n,  namespace);	  newNodes.add(newNode,    aliasRef,    namespace);    	non-compiled	[CE]  cannot  find  symbol  n	72	None	replace
67	[BUG]  [BUGGY]  aliasRefs.getParent().removeChild(newNode,  args);  [CE]  cannot  find  symbol  args  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().removeChild(newNode,  args);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().removeChild(newNode,  args);	  aliasRefs.getParent().removeChild(newNode,    var);    	non-compiled	[CE]  cannot  find  symbol  args	78	None	replace
68	[BUG]  [BUGGY]  aliasRefs.getParent().removeChild(newNode,  namespace);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().removeChild(newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().removeChild(newNode,  namespace);	  aliasRefs.getParent().removeChild(newNode,    var);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
69	[BUG]  [BUGGY]  aliasRefs.getParent().removeChild(newNode,  n);  [CE]  cannot  find  symbol  n  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().removeChild(newNode,  n);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().removeChild(newNode,  n);	  aliasRefs.getParent().removeChild(newNode,    var);    	non-compiled	[CE]  cannot  find  symbol  n	78	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNode,  namespace);	  NodeTraversal.traverse(compiler,    aliasRef,    newNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node,GlobalNamespace)	13	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  this,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node,CollapseProperties,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  this,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNode,  this,  namespace);	  NodeTraversal.traverse(compiler,    aliasRef,    newNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node,CollapseProperties,GlobalNamespace)	13	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  inlineAliases);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNode,  inlineAliases);	  NodeTraversal.traverse(compiler,    aliasRef,    newNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node,boolean)	13	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  scope);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node,Scope)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  scope);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNode,  scope);	  NodeTraversal.traverse(compiler,    aliasRef,    newNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node,Scope)	13	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  this,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node,CollapseProperties,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  this,  inlineAliases);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNode,  this,  inlineAliases);	  NodeTraversal.traverse(compiler,    aliasRef,    newNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node,CollapseProperties,boolean)	13	None	replace
75	[BUG]  [BUGGY]  newNodes.add(aliasRef.cloneTree(),  newNode);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.cloneTree(),  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.cloneTree(),  newNode);	  newNodes.add(aliasRef);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
76	[BUG]  [BUGGY]  newNodes.add(aliasRef.cloneTree());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.cloneTree());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.cloneTree());	  newNodes.add(aliasRef);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,boolean)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  inlineAliases);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  this,  inlineAliases);	  NodeTraversal.traverse(compiler,    newNode,    this,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,boolean)	17	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  newNode,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,Node,boolean)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  newNode,  inlineAliases);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  this,  newNode,  inlineAliases);	  NodeTraversal.traverse(compiler,    newNode,    this,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,Node,boolean)	17	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  this,  newNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,CollapseProperties,Node)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  this,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  inlineAliases,  this,  newNode);	  NodeTraversal.traverse(compiler,    newNode,    this,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,CollapseProperties,Node)	17	None	replace
80	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	62	None	add
81	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	62	None	add
82	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
83	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  }	  	non-compiled	[CE]  not  a  statement	62	None	add
84	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSet();  setTimeout(function()  {  alert(newNodes)  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSet();  setTimeout(function()  {  alert(newNodes)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSet();  setTimeout(function()  {  alert(newNodes)  }	  AssertionFailedError:    Expected:    function    f()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	22	None	replace
85	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(newNode,  aliasRef.getNode(),  aliasRef);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(newNode,  aliasRef.getNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(newNode,  aliasRef.getNode(),  aliasRef);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
86	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNode(),  aliasRef);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getNode(),  aliasRef);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
87	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNode(),  namespace);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNode(),  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNode(),  namespace);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
88	[BUG]  [BUGGY]  Node  newNodes  =  aliasRefs.get(i  +  1);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNodes  =  aliasRefs.get(i  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNodes  =  aliasRefs.get(i  +  1);	  Node    newNodes    =    aliasRefs.get(i);    	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	71	None	replace
89	[BUG]  [BUGGY]  Node  newNodes  =  aliasRefs.get(i,  newNode);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNodes  =  aliasRefs.get(i,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNodes  =  aliasRefs.get(i,  newNode);	  Node    newNodes    =    aliasRefs.get(i);    	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	71	None	replace
90	[BUG]  [BUGGY]  Node  newNodes  =  aliasRefs.references.get(i);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNodes  =  aliasRefs.references.get(i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNodes  =  aliasRefs.references.get(i);	  Node    newNodes    =    aliasRefs.get(i);    	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	71	None	replace
91	[BUG]  [BUGGY]  Node  newNodes  =  aliasRefs.get(newNode);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNodes  =  aliasRefs.get(newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNodes  =  aliasRefs.get(newNode);	  Node    newNodes    =    aliasRefs.get(i);    	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	71	None	replace
92	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
93	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.NAME)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.NAME)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode.getType()  ==  Token.NAME)  {  compiler.reportCodeChange();  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode  ==  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode  ==  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	compilable	  [FE]  AssertionFailedError  	12	10	replace
95	[BUG]  [BUGGY]  if(newNode  ==  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [FE]  AssertionFailedError  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode  ==  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode  ==  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	compilable	  [FE]  AssertionFailedError  	12	10	replace
96	[BUG]  [BUGGY]  Node  aliasVar  =  aliasRefs.getVar(i);  aliasVar.replaceChild(aliasVar,  newNode);  [CE]  variable  aliasVar  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasVar  =  aliasRefs.getVar(i);  aliasVar.replaceChild(aliasVar,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasVar  =  aliasRefs.getVar(i);  aliasVar.replaceChild(aliasVar,  newNode);	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasVar.replaceChild(aliasVar,    newNode);    }    	non-compiled	[CE]  variable  aliasVar  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	130	None	replace
97	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getVar(i);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.getVar(i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.getVar(i);	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasVar.replaceChild(aliasVar,    newNode);    }    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	130	None	replace
98	[BUG]  [BUGGY]  Node  aliasVar  =  aliasRefs.getVar(i);  [CE]  variable  aliasVar  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasVar  =  aliasRefs.getVar(i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasVar  =  aliasRefs.getVar(i);	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasVar.replaceChild(aliasVar,    newNode);    }    	non-compiled	[CE]  variable  aliasVar  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	130	None	replace
99	[BUG]  [BUGGY]  Node  aliasParent  =  aliasRefs.getParent();  [CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasParent  =  aliasRefs.getParent();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasParent  =  aliasRefs.getParent();	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasVar.replaceChild(aliasVar,    newNode);    }    	non-compiled	[CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	130	None	replace
100	[BUG]  [BUGGY]  newNodes.add(aliasRef,  newNode,  i);  [CE]  no  suitable  method  found  for  add(Reference,Node,int)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  newNode,  i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  newNode,  i);	  newNodes.add(newNode,    aliasRef,    i);    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference,Node,int)	74	None	replace
101	[BUG]  [BUGGY]  newNodes.add(aliasRef,  i,  newNode);  [CE]  no  suitable  method  found  for  add(Reference,int,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  i,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  i,  newNode);	  newNodes.add(newNode,    aliasRef,    i);    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference,int,Node)	74	None	replace
102	[BUG]  [BUGGY]  newNodes.add(newNode,  aliasRef,  i,  size);  [CE]  no  suitable  method  found  for  add(Node,Reference,int,int)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  aliasRef,  i,  size);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  aliasRef,  i,  size);	  newNodes.add(newNode,    aliasRef,    i);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Reference,int,int)	74	None	replace
103	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefs  =  alias.references.get(i  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefs  =  alias.references.get(i  +  1);	  Node    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	159	None	replace
104	[BUG]  [BUGGY]  Node  newNode  =  alias.references.get(i);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  alias.references.get(i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  alias.references.get(i);	  Node    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	159	None	replace
105	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  newNode);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefs  =  alias.references.get(i,  newNode);	  Node    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	159	None	replace
106	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(0);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefs  =  alias.references.get(0);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefs  =  alias.references.get(0);	  Node    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	159	None	replace
107	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  alias.getVar(i);  aliasVar.replaceChild(aliasVar,  newNode);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  alias.getVar(i);  aliasVar.replaceChild(aliasVar,  newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  alias.getVar(i);  aliasVar.replaceChild(aliasVar,  newNode);  }	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasVar.replaceChild(aliasVar,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
108	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasVar.replaceChild(aliasVar,  new  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasVar.replaceChild(aliasVar,  new  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasVar.replaceChild(aliasVar,  new	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasVar.replaceChild(aliasVar,    newNode);    	non-compiled	[CE]  <identifier>  expected	157	None	replace
109	[BUG]  [BUGGY]  nodes.addAll(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  nodes  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  nodes.addAll(aliasRef.getNode(),  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	nodes.addAll(aliasRef.getNode(),  newNode);	  newNodes.addAll(aliasRef.getNode());    	non-compiled	[CE]  cannot  find  symbol  nodes	125	None	replace
110	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.cloneTree());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.cloneTree());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.cloneTree());	  newNodes.addAll(aliasRef.getNode());    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
111	[BUG]  [BUGGY]  newNodes.add(aliasRef,  aliasVar,  newNode);  [CE]  no  suitable  method  found  for  add(Reference,Var,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  aliasVar,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  aliasVar,  newNode);	  newNodes.add(newNode,    aliasVar,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference,Var,Node)	73	None	replace
112	[BUG]  [BUGGY]  newNodes.add(aliasRef,  aliasVar);  [CE]  no  suitable  method  found  for  add(Reference,Var)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  aliasVar);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  aliasVar);	  newNodes.add(newNode,    aliasVar,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference,Var)	73	None	replace
113	[BUG]  [BUGGY]  newNodes.add(aliasVar,  newNode,  aliasRef);  [CE]  no  suitable  method  found  for  add(Var,Node,Reference)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasVar,  newNode,  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasVar,  newNode,  aliasRef);	  newNodes.add(newNode,    aliasVar,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  add(Var,Node,Reference)	73	None	replace
114	[BUG]  [BUGGY]  newNodes.add(aliasParent,  aliasVar,  newNode);  [CE]  no  suitable  method  found  for  add(Node,Var,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasParent,  aliasVar,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasParent,  aliasVar,  newNode);	  newNodes.add(newNode,    aliasVar,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Var,Node)	73	None	replace
115	[BUG]  [BUGGY]  newNodes.add(newNode,  aliasRef,  aliasVar);  [CE]  no  suitable  method  found  for  add(Node,Reference,Var)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  aliasRef,  aliasVar);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  aliasRef,  aliasVar);	  newNodes.add(newNode,    aliasVar,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Reference,Var)	73	None	replace
116	[BUG]  [BUGGY]  newNodes.add(aliasRef.cloneTree(),  newNode,  namespace);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.cloneTree(),  newNode,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.cloneTree(),  newNode,  namespace);	  newNodes.add(i,    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
117	[BUG]  [BUGGY]  newNodes.add(aliasRef.node,  newNode,  namespace);  [CE]  cannot  find  symbol  node  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.node,  newNode,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.node,  newNode,  namespace);	  newNodes.add(i,    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol  node	48	None	replace
118	[BUG]  [BUGGY]  newNodes.add(aliasRef,  i,  namespace);  [CE]  no  suitable  method  found  for  add(Reference,int,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  i,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  i,  namespace);	  newNodes.add(i,    newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference,int,GlobalNamespace)	48	None	replace
119	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNodes!=  null)  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	115	1	replace
120	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	115	1	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode  ==  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode  ==  null)  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    	compilable	  [FE]  AssertionFailedError  	115	10	replace
122	[BUG]  [BUGGY]  if(newNode  ==  null)  {  newNodes.add(newNode);  }  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode  ==  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode  ==  null)  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    	compilable	  [FE]  AssertionFailedError  	115	10	replace
123	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(newNode,  namespace);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(newNode,  namespace);	  Node    newNode    =    aliasRefs.get(newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	88	None	replace
124	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(node);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(node);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(node);	  Node    newNode    =    aliasRefs.get(newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	88	None	replace
125	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(newNode  +  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(newNode  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(newNode  +  1);	  Node    newNode    =    aliasRefs.get(newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	88	None	replace
126	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.NAME)  {  newNodes.add(newNode);  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.NAME)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode.getType()  ==  Token.NAME)  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
127	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.FUNCTION)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.FUNCTION)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode.getType()  ==  Token.FUNCTION)  {  compiler.reportCodeChange();  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alarm(args)    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
128	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i,  newNode,  namespace);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefs  =  aliasRefs.get(i,  newNode,  namespace);	  Node    aliasRefs    =    aliasRefs.get(i,    newNode);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	111	None	replace
129	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i,  size);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i,  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefs  =  aliasRefs.get(i,  size);	  Node    aliasRefs    =    aliasRefs.get(i,    newNode);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	111	None	replace
130	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode  ==  null)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode  ==  null)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode  ==  null)  {  compiler.reportCodeChange();  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    warning(args)    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
131	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getLastChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.getLastChild();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.getLastChild();	  Node    newNode    =    aliasRefs.getFirstChild();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	42	None	replace
132	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.getFirstChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRef.getFirstChild();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRef.getFirstChild();	  Node    newNode    =    aliasRefs.getFirstChild();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	42	None	replace
133	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.getNext();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRef.getNext();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRef.getNext();	  Node    newNode    =    alias.node.getNext();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	25	None	replace
134	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getLastChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  alias.node.getLastChild();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  alias.node.getLastChild();	  Node    newNode    =    alias.node.getFirstChild();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	109	None	replace
135	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.getFirstChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRef.node.getFirstChild();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRef.node.getFirstChild();	  Node    newNode    =    alias.node.getFirstChild();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	109	None	replace
136	[BUG]  [BUGGY]  newNodes.addAll(aliasRef,  aliasRef);  [CE]  no  suitable  method  found  for  addAll(Reference,Reference)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef,  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef,  aliasRef);	  newNodes.addAll(newNode,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Reference,Reference)	68	None	replace
137	[BUG]  [BUGGY]  newNodes.addAll(newNode,  aliasVar,  aliasRef);  [CE]  no  suitable  method  found  for  addAll(Node,Var,Reference)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  aliasVar,  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  aliasVar,  aliasRef);	  newNodes.addAll(newNode,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,Var,Reference)	68	None	replace
138	[BUG]  [BUGGY]  newNodes.addAll(newNode,  aliasRef,  namespace);  [CE]  no  suitable  method  found  for  addAll(Node,Reference,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  aliasRef,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  aliasRef,  namespace);	  newNodes.addAll(newNode,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,Reference,GlobalNamespace)	68	None	replace
139	[BUG]  [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet(),  namespace,  collector);  [CE]  cannot  find  symbol  Collections  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet(),  namespace,  collector);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Collections.  <  Node>emptySet(),  namespace,  collector);	  newNodes.add(newNode,    Collections.    <    Node>emptySet(),    namespace);    	non-compiled	[CE]  cannot  find  symbol  Collections	2	None	replace
140	[BUG]  [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet(),  alias.scope);  [CE]  cannot  find  symbol  Collections  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet(),  alias.scope);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Collections.  <  Node>emptySet(),  alias.scope);	  newNodes.add(newNode,    Collections.    <    Node>emptySet(),    namespace);    	non-compiled	[CE]  cannot  find  symbol  Collections	2	None	replace
141	[BUG]  [BUGGY]  newNodes.add(node,  Collections.  <  Node>emptySet(),  namespace);  [CE]  cannot  find  symbol  node  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(node,  Collections.  <  Node>emptySet(),  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(node,  Collections.  <  Node>emptySet(),  namespace);	  newNodes.add(newNode,    Collections.    <    Node>emptySet(),    namespace);    	non-compiled	[CE]  cannot  find  symbol  node	2	None	replace
142	[BUG]  [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet(),  aliasRef);  [CE]  cannot  find  symbol  Collections  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet(),  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Collections.  <  Node>emptySet(),  aliasRef);	  newNodes.add(newNode,    Collections.    <    Node>emptySet(),    namespace);    	non-compiled	[CE]  cannot  find  symbol  Collections	2	None	replace
143	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRef.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	108	None	replace
144	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.removeFirstChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.removeFirstChild();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	108	None	replace
145	[BUG]  [BUGGY]  newNodes.addAll(newNode.cloneTree(),  aliasRef);  [CE]  no  suitable  method  found  for  addAll(Node,Reference)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode.cloneTree(),  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode.cloneTree(),  aliasRef);	  newNodes.addAll(aliasRef.cloneTree(),    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,Reference)	64	None	replace
146	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.cloneTree(),  aliasRef);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.cloneTree(),  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.cloneTree(),  aliasRef);	  newNodes.addAll(aliasRef.cloneTree(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
147	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.cloneTree(),  newNode,  namespace);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.cloneTree(),  newNode,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.cloneTree(),  newNode,  namespace);	  newNodes.addAll(aliasRef.cloneTree(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
148	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	139	None	add
149	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	139	None	add
150	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  }	  	non-compiled	[CE]  not  a  statement	139	None	add
151	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(!namespace.isAssignedOnceInLifetime())  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  	non-compiled	[CE]  not  a  statement	139	None	add
152	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace);	  aliasRefs.getParent().replaceChild(aliasRef.getNameNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
153	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  namespace);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  namespace);	  aliasRefs.getParent().replaceChild(aliasRef.getNameNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
154	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  NullPointerException  	80	10	add
155	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  NullPointerException  	80	10	add
156	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);	  	compilable	  [FE]  NullPointerException  	80	10	add
157	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);	  	compilable	  [FE]  NullPointerException  	80	10	add
158	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode,  IR.nullNode());  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode,  IR.nullNode());	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	80	None	add
159	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(node);  [CE]  cannot  find  symbol  node  [FE]          NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(node);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(node);	  	non-compiled	[CE]  cannot  find  symbol  node	80	None	add
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNode);	  NodeTraversal.traverse(compiler,    aliasRef,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node)	15	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  aliasRef,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reference,CollapseProperties)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  aliasRef,  this);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  newNode,  aliasRef,  this);	  NodeTraversal.traverse(compiler,    aliasRef,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reference,CollapseProperties)	15	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  compiler);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node,AbstractCompiler)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  compiler);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNode,  compiler);	  NodeTraversal.traverse(compiler,    aliasRef,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node,AbstractCompiler)	15	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  newNodes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,Set<Node>)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  newNodes);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  this,  newNodes);	  NodeTraversal.traverse(compiler,    aliasRef,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,Set<Node>)	15	None	replace
164	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().removeChild(aliasRef.getNode(),  newNode);	  aliasRefs.getParent().removeChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	117	None	replace
165	[BUG]  [BUGGY]  aliasRefs.getParent().removeChild(newNode.getNode(),  aliasRef);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().removeChild(newNode.getNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().removeChild(newNode.getNode(),  aliasRef);	  aliasRefs.getParent().removeChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
166	[BUG]  [BUGGY]  aliasRefs.getParent().removeChild(aliasRef,  newNode.getNode(),  i);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().removeChild(aliasRef,  newNode.getNode(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().removeChild(aliasRef,  newNode.getNode(),  i);	  aliasRefs.getParent().removeChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
167	[BUG]  [BUGGY]  newNodes.add(newNode,  Lists.  <  Node>emptySet());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Lists.  <  Node>emptySet());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Lists.  <  Node>emptySet());	  newNodes.add(newNode,    Sets.    <    Node>emptySet());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
168	[BUG]  [BUGGY]  newNodes.add(newNode,  aliasRefs.  <  Node>emptySet());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  aliasRefs.  <  Node>emptySet());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  aliasRefs.  <  Node>emptySet());	  newNodes.add(newNode,    Sets.    <    Node>emptySet());    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
169	[BUG]  [BUGGY]  newNodes.add(newNode,  Arrays.  <  Node>emptySet());  [CE]  cannot  find  symbol  Arrays  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Arrays.  <  Node>emptySet());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Arrays.  <  Node>emptySet());	  newNodes.add(newNode,    Sets.    <    Node>emptySet());    	non-compiled	[CE]  cannot  find  symbol  Arrays	4	None	replace
170	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  IllegalArgumentException  	27	10	replace
171	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  IllegalArgumentException  	27	10	replace
172	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  IllegalArgumentException  	27	10	replace
173	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  IllegalArgumentException  	27	10	replace
174	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNodes!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  IllegalArgumentException  	27	10	replace
175	[BUG]  [BUGGY]  if(newNodes!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  IllegalArgumentException  	27	10	replace
176	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNodes!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  IllegalArgumentException  	27	10	replace
177	[BUG]  [BUGGY]  if(newNodes!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  IllegalArgumentException  	27	10	replace
178	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(i++,  namespace);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(i++,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(i++,  namespace);	  Node    newNode    =    aliasRefs.get(i++);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	84	None	replace
179	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(i++,  size);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(i++,  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(i++,  size);	  Node    newNode    =    aliasRefs.get(i++);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	84	None	replace
180	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(i++,  newNode);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(i++,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(i++,  newNode);	  Node    newNode    =    aliasRefs.get(i++);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	84	None	replace
181	[BUG]  [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptyList(),  namespace);  [CE]  cannot  find  symbol  Collections  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptyList(),  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Collections.  <  Node>emptyList(),  namespace);	  newNodes.add(newNode,    Collections.    <    Node>emptyList());    	non-compiled	[CE]  cannot  find  symbol  Collections	3	None	replace
182	[BUG]  [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptyList(),  collector);  [CE]  cannot  find  symbol  Collections  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptyList(),  collector);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Collections.  <  Node>emptyList(),  collector);	  newNodes.add(newNode,    Collections.    <    Node>emptyList());    	non-compiled	[CE]  cannot  find  symbol  Collections	3	None	replace
183	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	90	None	add
184	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
185	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	90	1	add
186	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	90	1	add
187	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	90	None	add
188	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
189	[BUG]  [BUGGY]  newNodes.add(alias.node,  Collections.  <  Node>emptySet());  [CE]  cannot  find  symbol  Collections  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node,  Collections.  <  Node>emptySet());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node,  Collections.  <  Node>emptySet());	  newNodes.add(node,    Collections.    <    Node>emptySet());    	non-compiled	[CE]  cannot  find  symbol  Collections	106	None	replace
190	[BUG]  [BUGGY]  newNodes.add(aliasRef,  Collections.  <  Node>emptySet());  [CE]  cannot  find  symbol  Collections  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  Collections.  <  Node>emptySet());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  Collections.  <  Node>emptySet());	  newNodes.add(node,    Collections.    <    Node>emptySet());    	non-compiled	[CE]  cannot  find  symbol  Collections	106	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  newNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  this,  newNode);	  NodeTraversal.traverse(compiler,    newNode,    this,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,Node)	16	None	replace
192	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  this,  namespace);	  NodeTraversal.traverse(compiler,    newNode,    this,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties,GlobalNamespace)	16	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  namespace,  this,  newNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,GlobalNamespace,CollapseProperties,Node)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  namespace,  this,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  namespace,  this,  newNode);	  NodeTraversal.traverse(compiler,    newNode,    this,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,GlobalNamespace,CollapseProperties,Node)	16	None	replace
194	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.remove(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
195	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Node  newNode  =  alias.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Node  newNode  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.remove(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Node  newNode  =  alias.node.cloneTree();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	141	None	add
196	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes  =  Sets.newHashSet();  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes  =  Sets.newHashSet();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.remove(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes  =  Sets.newHashSet();  }	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
197	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.remove(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	141	None	add
198	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes  =  Collections.emptySet();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes  =  Collections.emptySet();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.remove(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes  =  Collections.emptySet();  }	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
199	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Node  newNode  =  aliasRefs.get(var);  setTimeout(function()  {  alert(newNode)  }  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Node  newNode  =  aliasRefs.get(var);  setTimeout(function()  {  alert(newNode)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.remove(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Node  newNode  =  aliasRefs.get(var);  setTimeout(function()  {  alert(newNode)  }	  	non-compiled	[CE]  ')'  expected	141	None	add
200	[BUG]  [BUGGY]  aliasRefs.removeChild(newNode,  namespace,  newNodes);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.removeChild(newNode,  namespace,  newNodes);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.removeChild(newNode,  namespace,  newNodes);	  aliasRefs.removeChild(newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
201	[BUG]  [BUGGY]  aliasRefs.removeChild(newNode,  namespace,  compiler);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.removeChild(newNode,  namespace,  compiler);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.removeChild(newNode,  namespace,  compiler);	  aliasRefs.removeChild(newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  newNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  inlineAliases,  newNode);	  NodeTraversal.traverse(compiler,    newNode,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,Node)	93	None	replace
203	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  collapsePropertiesOnExternTypes,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  collapsePropertiesOnExternTypes,  inlineAliases);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  newNode,  collapsePropertiesOnExternTypes,  inlineAliases);	  NodeTraversal.traverse(compiler,    newNode,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,boolean)	93	None	replace
204	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  namespace,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GlobalNamespace,boolean)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  namespace,  inlineAliases);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  newNode,  namespace,  inlineAliases);	  NodeTraversal.traverse(compiler,    newNode,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GlobalNamespace,boolean)	93	None	replace
205	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  inlineAliases,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  inlineAliases,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  newNode,  inlineAliases,  namespace);	  NodeTraversal.traverse(compiler,    newNode,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,GlobalNamespace)	93	None	replace
206	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i++,  size);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i++,  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i++,  size);	  Node    newNode    =    aliasRefs.references.get(i++);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	56	None	replace
207	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i++,  namespace);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i++,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i++,  namespace);	  Node    newNode    =    aliasRefs.references.get(i++);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	56	None	replace
208	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes    ==    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
209	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getNext();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  alias.node.getNext();  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  alias.node.getNext();  compiler.reportCodeChange();	  Node    newNode    =    aliasRefs.getNext();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	39	None	replace
210	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
211	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode.getNode(),  aliasRef);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(newNode.getNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(newNode.getNode(),  aliasRef);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
212	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	35	None	replace
213	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);	  	compilable	  [FE]  NullPointerException  	34	10	add
214	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);	  	compilable	  [FE]  NullPointerException  	34	10	add
215	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode);	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
216	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNode().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getNode().replaceChild(aliasRef.getNode(),  newNode);	  	compilable	  [FE]  NullPointerException  	34	10	add
217	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNode().replaceChild(aliasRef.getNode(),  newNode);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNode().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getNode().replaceChild(aliasRef.getNode(),  newNode);	  	compilable	  [FE]  NullPointerException  	34	10	add
218	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNext().replaceChild(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNext().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getNext().replaceChild(aliasRef.getNode(),  newNode);	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
219	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().replaceChild(aliasRef.getName(),  newNode);  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().replaceChild(aliasRef.getName(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getParent().replaceChild(aliasRef.getName(),  newNode);	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
220	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode));  [CE]  ';'  expected  [FE]              NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode));  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode));	  	non-compiled	[CE]  ';'  expected	34	None	add
221	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  namespace);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i,  namespace);	  Node    newNode    =    aliasRefs.references.get(i,    newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	120	None	replace
222	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  scope);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  scope);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i,  scope);	  Node    newNode    =    aliasRefs.references.get(i,    newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	120	None	replace
223	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  type);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  type);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i,  type);	  Node    newNode    =    aliasRefs.references.get(i,    newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	120	None	replace
224	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  size);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  size);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
225	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(newNode,  aliasRef.getNameNode(),  i);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(newNode,  aliasRef.getNameNode(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(newNode,  aliasRef.getNameNode(),  i);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
226	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  scope);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  scope);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  scope);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
227	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  alias.node.getFirstChild();  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  alias.node.getFirstChild();  compiler.reportCodeChange();	  Node    newNode    =    aliasRefs.getFirstChild();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	85	None	replace
228	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getLastChild();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.getLastChild();  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.getLastChild();  compiler.reportCodeChange();	  Node    newNode    =    aliasRefs.getFirstChild();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	85	None	replace
229	[BUG]  [BUGGY]  newNodes.add(aliasRefs,  Collections.  <  Node>emptySet(),  newNode);  [CE]  cannot  find  symbol  Collections  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRefs,  Collections.  <  Node>emptySet(),  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRefs,  Collections.  <  Node>emptySet(),  newNode);	  newNodes.add(newNode,    Collections.    <    Node>emptySet(),    aliasRefs);    	non-compiled	[CE]  cannot  find  symbol  Collections	158	None	replace
230	[BUG]  [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet(),  aliasRefs.cloneTree());  [CE]  cannot  find  symbol  Collections  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet(),  aliasRefs.cloneTree());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Collections.  <  Node>emptySet(),  aliasRefs.cloneTree());	  newNodes.add(newNode,    Collections.    <    Node>emptySet(),    aliasRefs);    	non-compiled	[CE]  cannot  find  symbol  Collections	158	None	replace
231	[BUG]  [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet(),  aliasRefs.references);  [CE]  cannot  find  symbol  Collections  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet(),  aliasRefs.references);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Collections.  <  Node>emptySet(),  aliasRefs.references);	  newNodes.add(newNode,    Collections.    <    Node>emptySet(),    aliasRefs);    	non-compiled	[CE]  cannot  find  symbol  Collections	158	None	replace
232	[BUG]  [BUGGY]  newNodes.add(node,  Collections.  <  Node>emptySet(),  aliasRefs);  [CE]  cannot  find  symbol  node  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(node,  Collections.  <  Node>emptySet(),  aliasRefs);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(node,  Collections.  <  Node>emptySet(),  aliasRefs);	  newNodes.add(newNode,    Collections.    <    Node>emptySet(),    aliasRefs);    	non-compiled	[CE]  cannot  find  symbol  node	158	None	replace
233	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    newNodes.remove(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  not  a  statement	142	None	replace
234	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i  +  1);	  Node    aliasRefs    =    aliasRefs.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	69	None	replace
235	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  newNode);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i,  newNode);	  Node    aliasRefs    =    aliasRefs.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	69	None	replace
236	[BUG]  [BUGGY]  newNodes.addAll(aliasRefs,  newNode);  [CE]  no  suitable  method  found  for  addAll(ReferenceCollection,Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRefs,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRefs,  newNode);	  newNodes.addAll(newNode,    aliasRefs);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(ReferenceCollection,Node)	133	None	replace
237	[BUG]  [BUGGY]  aliasRefs.addAll(newNode,  aliasRefs);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.addAll(newNode,  aliasRefs);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.addAll(newNode,  aliasRefs);	  newNodes.addAll(newNode,    aliasRefs);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
238	[BUG]  [BUGGY]  newNodes.addAll(newNode,  aliasRefs,  namespace);  [CE]  no  suitable  method  found  for  addAll(Node,ReferenceCollection,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  aliasRefs,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  aliasRefs,  namespace);	  newNodes.addAll(newNode,    aliasRefs);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,ReferenceCollection,GlobalNamespace)	133	None	replace
239	[BUG]  [BUGGY]  aliasRefs.addAll(newNode);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.addAll(newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.addAll(newNode);	  newNodes.addAll(newNode,    aliasRefs);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
240	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.cloneTree();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.cloneTree();	  Node    newNode    =    aliasRefs.cloneTree();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	41	None	replace
241	[BUG]  [BUGGY]  newNodes.add(alias.node,  i);  [CE]  no  suitable  method  found  for  add(Node,int)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node,  i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node,  i);	  newNodes.add(node,    i);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int)	47	None	replace
242	[BUG]  [BUGGY]  newNodes.add(node,  size);  [CE]  cannot  find  symbol  node  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(node,  size);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(node,  size);	  newNodes.add(node,    i);    	non-compiled	[CE]  cannot  find  symbol  node	47	None	replace
243	[BUG]  [BUGGY]  newNodes.add(aliasRef.getNode(),  newNode,  namespace);  [CE]  no  suitable  method  found  for  add(Node,Node,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.getNode(),  newNode,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.getNode(),  newNode,  namespace);	  newNodes.add(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Node,GlobalNamespace)	118	None	replace
244	[BUG]  [BUGGY]  newNodes.add(aliasRef.getNode(),  i,  newNode);  [CE]  no  suitable  method  found  for  add(Node,int,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.getNode(),  i,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.getNode(),  i,  newNode);	  newNodes.add(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Node)	118	None	replace
245	[BUG]  [BUGGY]  newNodes.add(aliasRef.getNode(),  aliasVar,  newNode);  [CE]  no  suitable  method  found  for  add(Node,Var,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.getNode(),  aliasVar,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.getNode(),  aliasVar,  newNode);	  newNodes.add(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Var,Node)	118	None	replace
246	[BUG]  [BUGGY]  newNodes.add(aliasRef.getNode(),  var,  newNode);  [CE]  cannot  find  symbol  var  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.getNode(),  var,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.getNode(),  var,  newNode);	  newNodes.add(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol  var	118	None	replace
247	[BUG]  [BUGGY]  newNodes.add(aliasRef.getNode(),  namespace,  newNode);  [CE]  no  suitable  method  found  for  add(Node,GlobalNamespace,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.getNode(),  namespace,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.getNode(),  namespace,  newNode);	  newNodes.add(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,GlobalNamespace,Node)	118	None	replace
248	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasParent.replaceChild(alias.node,  IR.nullNode());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	aliasParent.replaceChild(alias.node,  IR.nullNode());	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    newNodes.add(node);    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  RuntimeException  	152	10	replace
249	[BUG]  [BUGGY]  aliasParent.replaceChild(alias.node,  IR.nullNode());  [FE]  RuntimeException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasParent.replaceChild(alias.node,  IR.nullNode());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasParent.replaceChild(alias.node,  IR.nullNode());	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    newNodes.add(node);    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  RuntimeException  	152	10	replace
250	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(node);  }  else  {  compiler.reportCodeChange();  }  [CE]  cannot  find  symbol  node  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(node);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  newNodes.add(node);  }  else  {  compiler.reportCodeChange();  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    newNodes.add(node);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  cannot  find  symbol  node	152	None	replace
251	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    newNodes.add(node);    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  RuntimeException  	152	10	replace
252	[BUG]  [BUGGY]  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [FE]  RuntimeException  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    newNodes.add(node);    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  RuntimeException  	152	10	replace
253	[BUG]  [BUGGY]  aliasRefs.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();	          aliasRefs.removeChild(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
254	[BUG]  [BUGGY]  aliasRef.removeChild(newNode);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.removeChild(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.removeChild(newNode);  compiler.reportCodeChange();	          aliasRefs.removeChild(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
255	[BUG]  [BUGGY]  nullNode.removeChild(newNode);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  nullNode  [FE]              AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  nullNode.removeChild(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	nullNode.removeChild(newNode);  compiler.reportCodeChange();	          aliasRefs.removeChild(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  nullNode	28	None	replace
256	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=newNode;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=newNode;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=newNode;setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    function    f()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	18	None	replace
257	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  +  2);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  +  2);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i  +  2);	  Node    newNode    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	53	None	replace
258	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  size  +  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  size  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i,  size  +  1);	  Node    newNode    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	53	None	replace
259	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  newNodes.add(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	                newNodes.add(newNode);    compiler.reportCodeChange();    newNodes.add(newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	32	1	add
260	[BUG]  [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  newNodes.add(newNode);  compiler.reportCodeChange();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  newNodes.add(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                newNodes.add(newNode);    compiler.reportCodeChange();    newNodes.add(newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	32	1	add
261	[BUG]  [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  aliasRefs.add(newNode);  compiler.reportCodeChange();  [CE]  method  add  in  class  ReferenceCollection  cannot  be  applied  to  given  types;  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  aliasRefs.add(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                newNodes.add(newNode);    compiler.reportCodeChange();    aliasRefs.add(newNode);  compiler.reportCodeChange();	  	non-compiled	[CE]  method  add  in  class  ReferenceCollection  cannot  be  applied  to  given  types;	32	None	add
262	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	                newNodes.add(newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	32	10	add
263	[BUG]  [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [FE]  IllegalArgumentException  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                newNodes.add(newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	32	10	add
264	[BUG]  [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  nodes.add(newNode);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  nodes  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  nodes.add(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                newNodes.add(newNode);    compiler.reportCodeChange();    nodes.add(newNode);  compiler.reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol  nodes	32	None	add
265	[BUG]  [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  Node  newNodes  =  aliasRefs.get(i);  compiler.reportCodeChange();  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  Node  newNodes  =  aliasRefs.get(i);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                newNodes.add(newNode);    compiler.reportCodeChange();    Node  newNodes  =  aliasRefs.get(i);  compiler.reportCodeChange();	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	32	None	add
266	[BUG]  [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  Node  newNodes  =  Collections.newHashSet(newNode);  compiler.reportCodeChange();  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  Node  newNodes  =  Collections.newHashSet(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                newNodes.add(newNode);    compiler.reportCodeChange();    Node  newNodes  =  Collections.newHashSet(newNode);  compiler.reportCodeChange();	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	32	None	add
267	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getNode(i  +  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.getNode(i  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.getNode(i  +  1);	  Node    newNode    =    aliasRefs.getNode(i);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	104	None	replace
268	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getNode(i,  namespace);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.getNode(i,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.getNode(i,  namespace);	  Node    newNode    =    aliasRefs.getNode(i);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	104	None	replace
269	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getNode(i,  size);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.getNode(i,  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.getNode(i,  size);	  Node    newNode    =    aliasRefs.getNode(i);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	104	None	replace
270	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getNode(i,  newNode);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.getNode(i,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.getNode(i,  newNode);	  Node    newNode    =    aliasRefs.getNode(i);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	104	None	replace
271	[BUG]  [BUGGY]  Node  aliasVar  =  aliasRefs.getVar(i);  aliasParent.replaceChild(aliasVar,  newNode);  [CE]  variable  aliasVar  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasVar  =  aliasRefs.getVar(i);  aliasParent.replaceChild(aliasVar,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasVar  =  aliasRefs.getVar(i);  aliasParent.replaceChild(aliasVar,  newNode);	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasParent.replaceChild(aliasVar,    newNode);    }    	non-compiled	[CE]  variable  aliasVar  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	131	None	replace
272	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasParent.replaceChild(aliasVar,  new  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasParent.replaceChild(aliasVar,  new  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasParent.replaceChild(aliasVar,  new	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasParent.replaceChild(aliasVar,    newNode);    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
273	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasParent.replaceChild(aliasVar,  newNo  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasParent.replaceChild(aliasVar,  newNo  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasParent.replaceChild(aliasVar,  newNo	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasParent.replaceChild(aliasVar,    newNode);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
274	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  alias.getVar(i);  aliasParent.replaceChild(aliasVar,  newNode);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  alias.getVar(i);  aliasParent.replaceChild(aliasVar,  newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  alias.getVar(i);  aliasParent.replaceChild(aliasVar,  newNode);  }	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasParent.replaceChild(aliasVar,    newNode);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
275	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(node);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(node);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  newNodes.add(node);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    newNodes.add(node);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  cannot  find  symbol  node	143	None	replace
276	[BUG]  [BUGGY]  parent.replaceChild(alias.node,  IR.nullNode());  [CE]  cannot  find  symbol  parent  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  parent.replaceChild(alias.node,  IR.nullNode());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	parent.replaceChild(alias.node,  IR.nullNode());	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    newNodes.add(node);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  cannot  find  symbol  parent	143	None	replace
277	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(i,  namespace,  newNodes);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(i,  namespace,  newNodes);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(i,  namespace,  newNodes);	  Node    newNode    =    aliasRefs.get(i,    namespace);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	83	None	replace
278	[BUG]  [BUGGY]  aliasRefs.replaceChild(aliasRef.getNode(),  newNode,  namespace);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(aliasRef.getNode(),  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(aliasRef.getNode(),  newNode,  namespace);	  aliasRefs.replaceChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
279	[BUG]  [BUGGY]  aliasRefs.replaceChild(newNode.getNode(),  aliasRef);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(newNode.getNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(newNode.getNode(),  aliasRef);	  aliasRefs.replaceChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
280	[BUG]  [BUGGY]  aliasRefs.replaceChild(aliasRef.getNode(),  newNode,  i);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(aliasRef.getNode(),  newNode,  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(aliasRef.getNode(),  newNode,  i);	  aliasRefs.replaceChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
281	[BUG]  [BUGGY]  aliasRefs.replaceChild(aliasRef,  newNode.getNode(),  i);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(aliasRef,  newNode.getNode(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(aliasRef,  newNode.getNode(),  i);	  aliasRefs.replaceChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
282	[BUG]  [BUGGY]  Node  aliasParent  =  aliasRefs.getParent();  aliasRefs.replaceChild(aliasRef.getNode(),  newNode);  [CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasParent  =  aliasRefs.getParent();  aliasRefs.replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasParent  =  aliasRefs.getParent();  aliasRefs.replaceChild(aliasRef.getNode(),  newNode);	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    aliasRefs.getParent();    aliasRefs.replaceChild(aliasRef.getNode(),    newNode);    }    	non-compiled	[CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	102	None	replace
283	[BUG]  [BUGGY]  Node  aliasRefsParent  =  aliasRefs.getParent();  aliasRefs.replaceChild(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefsParent  =  aliasRefs.getParent();  aliasRefs.replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefsParent  =  aliasRefs.getParent();  aliasRefs.replaceChild(aliasRef.getNode(),  newNode);	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    aliasRefs.getParent();    aliasRefs.replaceChild(aliasRef.getNode(),    newNode);    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
284	[BUG]  [BUGGY]  Node  aliasParent  =  alias.node.cloneTree();  compiler.reportCodeChange();  [CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasParent  =  alias.node.cloneTree();  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasParent  =  alias.node.cloneTree();  compiler.reportCodeChange();	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    alias.node.cloneTree();    compiler.reportCodeChange();    }    	non-compiled	[CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	29	None	replace
285	[BUG]  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  alias.node.cloneTree();  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  alias.node.cloneTree();  compiler.reportCodeChange();	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    alias.node.cloneTree();    compiler.reportCodeChange();    }    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	29	None	replace
286	[BUG]  [BUGGY]  Node[]  newNodes  =  alias.node.cloneTree();  compiler.reportCodeChange();  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node[]  newNodes  =  alias.node.cloneTree();  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node[]  newNodes  =  alias.node.cloneTree();  compiler.reportCodeChange();	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    alias.node.cloneTree();    compiler.reportCodeChange();    }    	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	29	None	replace
287	[BUG]  [BUGGY]  aliasRefs.removeChild(newNode,  i  +  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.removeChild(newNode,  i  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.removeChild(newNode,  i  +  1);	  aliasRefs.removeChild(newNode,    i);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
288	[BUG]  [BUGGY]  aliasRefs.removeChild(newNode,  i,  newNode);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.removeChild(newNode,  i,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.removeChild(newNode,  i,  newNode);	  aliasRefs.removeChild(newNode,    i);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
289	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(newNode,  aliasRefs.getNode(),  aliasRefs);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(newNode,  aliasRefs.getNode(),  aliasRefs);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(newNode,  aliasRefs.getNode(),  aliasRefs);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNode(),    aliasRefs);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
290	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNode(),  aliasVar);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNode(),  aliasVar);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNode(),  aliasVar);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNode(),    aliasRefs);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
291	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getNameNode();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  alias.node.getNameNode();  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  alias.node.getNameNode();  compiler.reportCodeChange();	  Node    newNode    =    aliasRefs.getNameNode();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	86	None	replace
292	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getNode();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.getNode();  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.getNode();  compiler.reportCodeChange();	  Node    newNode    =    aliasRefs.getNameNode();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	86	None	replace
293	[BUG]  [BUGGY]  Node  newNode  =  alias.getNameNode();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  alias.getNameNode();  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  alias.getNameNode();  compiler.reportCodeChange();	  Node    newNode    =    aliasRefs.getNameNode();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	86	None	replace
294	[BUG]  [BUGGY]  Node  aliasParent  =  newNodes.get(i);  compiler.reportCodeChange();  [CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasParent  =  newNodes.get(i);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasParent  =  newNodes.get(i);  compiler.reportCodeChange();	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    newNodes.get(i);    compiler.reportCodeChange();    }    	non-compiled	[CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	31	None	replace
295	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  newNodes.get(0);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  newNodes.get(0);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  newNodes.get(0);  compiler.reportCodeChange();  }	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    newNodes.get(i);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
296	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(i);  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(i);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(i);  compiler.reportCodeChange();	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    newNodes.get(i);    compiler.reportCodeChange();    }    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	31	None	replace
297	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  number;  i++)  {  Node  aliasParent  =  newNodes.get(i);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  number;  i++)  {  Node  aliasParent  =  newNodes.get(i);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  number;  i++)  {  Node  aliasParent  =  newNodes.get(i);  compiler.reportCodeChange();  }	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    newNodes.get(i);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
298	[BUG]  [BUGGY]  newNodes.add(newNode,  namespace,  size);  [CE]  no  suitable  method  found  for  add(Node,GlobalNamespace,int)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  namespace,  size);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  namespace,  size);	  newNodes.add(newNode,    size);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,GlobalNamespace,int)	138	None	replace
299	[BUG]  [BUGGY]  newNodes.add(aliasRef,  newNode,  size);  [CE]  no  suitable  method  found  for  add(Reference,Node,int)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  newNode,  size);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  newNode,  size);	  newNodes.add(newNode,    size);    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference,Node,int)	138	None	replace
300	[BUG]  [BUGGY]  newNodes.add(aliasRef,  size);  [CE]  no  suitable  method  found  for  add(Reference,int)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  size);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  size);	  newNodes.add(newNode,    size);    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference,int)	138	None	replace
301	[BUG]  [BUGGY]  newNodes.add(aliasRef,  aliasParent,  newNode);  [CE]  no  suitable  method  found  for  add(Reference,Node,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  aliasParent,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  aliasParent,  newNode);	  newNodes.add(aliasRef,    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference,Node,Node)	45	None	replace
302	[BUG]  [BUGGY]  aliasRefs.replaceChild(aliasRef,  newNode);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(aliasRef,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(aliasRef,  newNode);	  aliasRefs.replaceChild(aliasRef.node,    newNode);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
303	[BUG]  [BUGGY]  aliasRefs.replaceChild(alias.node,  IR.nullNode());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(alias.node,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(alias.node,  IR.nullNode());	  aliasRefs.replaceChild(aliasRef.node,    newNode);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
304	[BUG]  [BUGGY]  aliasRefs.replaceChild(aliasRef.node,  IR.nullNode());  [CE]  cannot  find  symbol  node  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(aliasRef.node,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(aliasRef.node,  IR.nullNode());	  aliasRefs.replaceChild(aliasRef.node,    newNode);    	non-compiled	[CE]  cannot  find  symbol  node	98	None	replace
305	[BUG]  [BUGGY]  aliasRefs.removeChild(newNode,  aliasRef);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.removeChild(newNode,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.removeChild(newNode,  aliasRef);	  aliasRefs.removeChild(newNode,    newNode);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
306	[BUG]  [BUGGY]  aliasRefs.removeChild(newNode,  args);  [CE]  cannot  find  symbol  args  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.removeChild(newNode,  args);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.removeChild(newNode,  args);	  aliasRefs.removeChild(newNode,    newNode);    	non-compiled	[CE]  cannot  find  symbol  args	7	None	replace
307	[BUG]  [BUGGY]  aliasRefs.getParent().removeChild(newNode,  i,  newNode);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().removeChild(newNode,  i,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().removeChild(newNode,  i,  newNode);	  aliasRefs.getParent().removeChild(newNode,    i);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
308	[BUG]  [BUGGY]  aliasRefs.getParent().removeChild(newNode,  i  +  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().removeChild(newNode,  i  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().removeChild(newNode,  i  +  1);	  aliasRefs.getParent().removeChild(newNode,    i);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
309	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  size  -  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  size  -  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i,  size  -  1);	  Node    newNode    =    aliasRefs.references.get(i,    size);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	54	None	replace
310	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  +  1,  size);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  +  1,  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i  +  1,  size);	  Node    newNode    =    aliasRefs.references.get(i,    size);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	54	None	replace
311	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(newNode,  aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(newNode,  aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(newNode,  aliasRef.getNode(),  newNode);	  aliasRefs.getParent().replaceChild(newNode.getNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
312	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.getNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRef.getNode();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRef.getNode();	  Node    newNode    =    alias.node.getNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	57	None	replace
313	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.getNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRef.node.getNode();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRef.node.getNode();	  Node    newNode    =    alias.node.getNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	57	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  namespace,  newNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,GlobalNamespace,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  namespace,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  namespace,  newNode);	  NodeTraversal.traverse(compiler,    newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,GlobalNamespace,Node)	14	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  namespace,  collector);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GlobalNamespace,ReferenceCollectingCallback)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  namespace,  collector);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  newNode,  namespace,  collector);	  NodeTraversal.traverse(compiler,    newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GlobalNamespace,ReferenceCollectingCallback)	14	None	replace
316	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasParent,  newNode,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasParent,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasParent,  newNode,  namespace);	  NodeTraversal.traverse(compiler,    newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,GlobalNamespace)	14	None	replace
317	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasVar,  newNode,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Var,Node,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasVar,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasVar,  newNode,  namespace);	  NodeTraversal.traverse(compiler,    newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Var,Node,GlobalNamespace)	14	None	replace
318	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	26	10	add
319	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	26	10	add
320	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  alias.node.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    alias.node.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	26	10	add
321	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  alias.node.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  alias.node.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    alias.node.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	26	10	add
322	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias.node,  newNode);	  	compilable	  [FE]  IllegalArgumentException  	26	10	add
323	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias.node,  newNode);	  	compilable	  [FE]  IllegalArgumentException  	26	10	add
324	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasRef.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasRef.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasRef.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
325	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.removeChild(alias.node,  newNode);  compiler.reportCodeChange();  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.removeChild(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasParent.removeChild(alias.node,  newNode);  compiler.reportCodeChange();	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	26	None	add
326	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  alias.node.removeChild(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    alias.node.removeChild(newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	26	10	add
327	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  alias.node.removeChild(newNode);  compiler.reportCodeChange();  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  alias.node.removeChild(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    alias.node.removeChild(newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	26	10	add
328	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.getNode(),  newNode,  namespace);  [CE]  no  suitable  method  found  for  addAll(Node,Node,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.getNode(),  newNode,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.getNode(),  newNode,  namespace);	  newNodes.addAll(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,Node,GlobalNamespace)	126	None	replace
329	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.getNode(),  aliasVar,  newNode);  [CE]  no  suitable  method  found  for  addAll(Node,Var,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.getNode(),  aliasVar,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.getNode(),  aliasVar,  newNode);	  newNodes.addAll(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,Var,Node)	126	None	replace
330	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.getNode(),  aliasParent,  newNode);  [CE]  no  suitable  method  found  for  addAll(Node,Node,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.getNode(),  aliasParent,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.getNode(),  aliasParent,  newNode);	  newNodes.addAll(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,Node,Node)	126	None	replace
331	[BUG]  [BUGGY]  aliasRef.addAll(aliasRef.getNode(),  newNode,  namespace);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.addAll(aliasRef.getNode(),  newNode,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.addAll(aliasRef.getNode(),  newNode,  namespace);	  newNodes.addAll(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
332	[BUG]  [BUGGY]  aliasRef.getNode(),  newNode,  namespace);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getNode(),  newNode,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getNode(),  newNode,  namespace);	  newNodes.addAll(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  ';'  expected	126	None	replace
333	[BUG]  [BUGGY]  Node  aliasParent  =  aliasRefs.getParent();  compiler.reportCodeChange();  [CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasParent  =  aliasRefs.getParent();  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasParent  =  aliasRefs.getParent();  compiler.reportCodeChange();	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    aliasRefs.getParent();    compiler.reportCodeChange();    }    	non-compiled	[CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	30	None	replace
334	[BUG]  [BUGGY]  Node  aliasRefsParent  =  aliasRefs.getParent();  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefsParent  =  aliasRefs.getParent();  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefsParent  =  aliasRefs.getParent();  compiler.reportCodeChange();	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    aliasRefs.getParent();    compiler.reportCodeChange();    }    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
335	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.getParent();  compiler.reportCodeChange();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefs  =  aliasRefs.getParent();  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefs  =  aliasRefs.getParent();  compiler.reportCodeChange();	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    aliasRefs.getParent();    compiler.reportCodeChange();    }    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	30	None	replace
336	[BUG]  [BUGGY]  newNodes.addAll(aliasRef,  namespace);  [CE]  no  suitable  method  found  for  addAll(Reference,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef,  namespace);	  newNodes.addAll(newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Reference,GlobalNamespace)	67	None	replace
337	[BUG]  [BUGGY]  newNodes.addAll(namespace,  newNode);  [CE]  no  suitable  method  found  for  addAll(GlobalNamespace,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(namespace,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(namespace,  newNode);	  newNodes.addAll(newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(GlobalNamespace,Node)	67	None	replace
338	[BUG]  [BUGGY]  newNodes.addAll(newNode,  namespace,  collector);  [CE]  no  suitable  method  found  for  addAll(Node,GlobalNamespace,ReferenceCollectingCallback)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  namespace,  collector);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  namespace,  collector);	  newNodes.addAll(newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,GlobalNamespace,ReferenceCollectingCallback)	67	None	replace
339	[BUG]  [BUGGY]  newNodes.addAll(newNode,  namespace,  aliasRef);  [CE]  no  suitable  method  found  for  addAll(Node,GlobalNamespace,Reference)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  namespace,  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  namespace,  aliasRef);	  newNodes.addAll(newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,GlobalNamespace,Reference)	67	None	replace
340	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.node.getNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.node.getNode();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.node.getNode();	  Node    newNode    =    aliasRefs.references.getNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	103	None	replace
341	[BUG]  [BUGGY]  Node  newNode  =  alias.references.getNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  alias.references.getNode();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  alias.references.getNode();	  Node    newNode    =    aliasRefs.references.getNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	103	None	replace
342	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }	          newNodes.add(newNode);    compiler.reportCodeChange();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	33	1	replace
343	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }	          newNodes.add(newNode);    compiler.reportCodeChange();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	33	1	replace
344	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	          newNodes.add(newNode);    compiler.reportCodeChange();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	33	1	replace
345	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	          newNodes.add(newNode);    compiler.reportCodeChange();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	33	1	replace
346	[BUG]  [BUGGY]  newNodes.add(node);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  node  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(node);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(node);  compiler.reportCodeChange();	          newNodes.add(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  node	33	None	replace
347	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.node,  IR.nullNode());  }  [CE]  method  scanNewNodes  in  class  GlobalNamespace  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.node,  IR.nullNode());  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.node,  IR.nullNode());  }	          newNodes.add(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  method  scanNewNodes  in  class  GlobalNamespace  cannot  be  applied  to  given  types;	33	None	replace
348	[BUG]  [BUGGY]  newNodes.addAll(newNode,  Sets.  <  Node>emptySet());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  Sets.  <  Node>emptySet());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  Sets.  <  Node>emptySet());	  newNodes.addAll(newNode,    Collections.    <    Node>emptySet());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
349	[BUG]  [BUGGY]  newNodes.addAll(newNode,  Collections.  <  Node>emptyHashSet());  [CE]  cannot  find  symbol  Collections  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  Collections.  <  Node>emptyHashSet());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  Collections.  <  Node>emptyHashSet());	  newNodes.addAll(newNode,    Collections.    <    Node>emptySet());    	non-compiled	[CE]  cannot  find  symbol  Collections	134	None	replace
350	[BUG]  [BUGGY]  newNodes.addAll(newNode,  Arrays.  <  Node>emptySet());  [CE]  cannot  find  symbol  Arrays  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  Arrays.  <  Node>emptySet());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  Arrays.  <  Node>emptySet());	  newNodes.addAll(newNode,    Collections.    <    Node>emptySet());    	non-compiled	[CE]  cannot  find  symbol  Arrays	134	None	replace
351	[BUG]  [BUGGY]  newNodes.addAll(newNode,  Lists.  <  Node>emptySet());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  Lists.  <  Node>emptySet());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  Lists.  <  Node>emptySet());	  newNodes.addAll(newNode,    Collections.    <    Node>emptySet());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
352	[BUG]  [BUGGY]  aliasRefs.getParent().removeChild(newNode,  aliasRef);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().removeChild(newNode,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().removeChild(newNode,  aliasRef);	  aliasRefs.getParent().removeChild(newNode,    newNode);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
353	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode,  aliasRef);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().removeChild(newNode,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().removeChild(newNode,  aliasRef);	  aliasRefs.getParent().removeChild(newNode,    newNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	79	None	replace
354	[BUG]  [BUGGY]  aliasRefs.getParent().removeChild(node,  newNode);  [CE]  cannot  find  symbol  node  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().removeChild(node,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().removeChild(node,  newNode);	  aliasRefs.getParent().removeChild(newNode,    newNode);    	non-compiled	[CE]  cannot  find  symbol  node	79	None	replace
355	[BUG]  [BUGGY]  newNodes.add(newNode,  Sets.  <  Node>emptyHashSet());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Sets.  <  Node>emptyHashSet());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Sets.  <  Node>emptyHashSet());	  newNodes.add(newNode,    Collections.    <    Node>emptyHashSet());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
356	[BUG]  [BUGGY]  newNodes.add(node,  Collections.  <  Node>emptyHashSet());  [CE]  cannot  find  symbol  node  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(node,  Collections.  <  Node>emptyHashSet());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(node,  Collections.  <  Node>emptyHashSet());	  newNodes.add(newNode,    Collections.    <    Node>emptyHashSet());    	non-compiled	[CE]  cannot  find  symbol  node	1	None	replace
357	[BUG]  [BUGGY]  nullNode.remove(newNode);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  nullNode  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  nullNode.remove(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	nullNode.remove(newNode);  compiler.reportCodeChange();	          aliasRefs.remove(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  nullNode	110	None	replace
358	[BUG]  [BUGGY]  aliasRef.remove(newNode);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.remove(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.remove(newNode);  compiler.reportCodeChange();	          aliasRefs.remove(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
359	[BUG]  [BUGGY]  aliasRefs.remove(node);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.remove(node);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.remove(node);  compiler.reportCodeChange();	          aliasRefs.remove(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  node	110	None	replace
360	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(newNode,  aliasRef.getNode(),  size);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(newNode,  aliasRef.getNode(),  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(newNode,  aliasRef.getNode(),  size);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNode(),    size);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
361	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNode(),  scope);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNode(),  scope);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNode(),  scope);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNode(),    size);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
362	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.node.references.get(size);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.node.references.get(size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.node.references.get(size);	  Node    newNode    =    aliasRefs.references.get(size);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	132	None	replace
363	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.node.references.get(i);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.node.references.get(i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.node.references.get(i);	  Node    newNode    =    aliasRefs.references.get(size);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	132	None	replace
364	[BUG]  [BUGGY]  aliasRefs.removeChild(newNode,  IR.nullNode());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.removeChild(newNode,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.removeChild(newNode,  IR.nullNode());	  aliasRefs.removeChild(newNode,    var);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
365	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=    null)    {    newNodes.add(newNode);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	114	1	add
366	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=    null)    {    newNodes.add(newNode);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	114	1	add
367	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  if(newNodes  ==  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=    null)    {    newNodes.add(newNode);    }    if(newNodes  ==  null)  {  newNodes.add(newNode);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	114	1	add
368	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  if(newNodes  ==  null)  {  newNodes.add(newNode);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  if(newNodes  ==  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=    null)    {    newNodes.add(newNode);    }    if(newNodes  ==  null)  {  newNodes.add(newNode);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	114	1	add
369	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  if(newNode!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=    null)    {    newNodes.add(newNode);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	114	1	add
370	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  if(newNode!=  null)  {  newNodes.add(newNode);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  if(newNode!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=    null)    {    newNodes.add(newNode);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	114	1	add
371	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  If(newNodes!=  null)  {  newNodes.add(newNode);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  If(newNodes!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=    null)    {    newNodes.add(newNode);    }    If(newNodes!=  null)  {  newNodes.add(newNode);  }	  	non-compiled	[CE]  ';'  expected	114	None	add
372	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  if(newNodes!=  null)  {  newNodes.remove(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=    null)    {    newNodes.add(newNode);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	114	1	add
373	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  if(newNodes!=  null)  {  newNodes.remove(newNode);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  if(newNodes!=  null)  {  newNodes.remove(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=    null)    {    newNodes.add(newNode);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	114	1	add
374	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  Node  newNodes  =  aliasRefs.get(i);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  Node  newNodes  =  aliasRefs.get(i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=    null)    {    newNodes.add(newNode);    }    Node  newNodes  =  aliasRefs.get(i);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	114	None	add
375	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(newNode,  aliasRef.getNode(),  i);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(newNode,  aliasRef.getNode(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(newNode,  aliasRef.getNode(),  i);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
376	[BUG]  [BUGGY]  newNodes.add(aliasRef,  newNode.cloneTree());  [CE]  no  suitable  method  found  for  add(Reference,Node)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  newNode.cloneTree());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  newNode.cloneTree());	  newNodes.add(newNode,    aliasRef.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference,Node)	100	None	replace
377	[BUG]  [BUGGY]  newNodes.add(aliasRef,  aliasRef.cloneTree());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  aliasRef.cloneTree());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  aliasRef.cloneTree());	  newNodes.add(newNode,    aliasRef.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
378	[BUG]  [BUGGY]  newNodes.add(newNode,  aliasRef.node.cloneTree());  [CE]  cannot  find  symbol  node  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  aliasRef.node.cloneTree());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  aliasRef.node.cloneTree());	  newNodes.add(newNode,    aliasRef.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  node	100	None	replace
379	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.cloneParent();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRef.node.cloneParent();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRef.node.cloneParent();	  Node    newNode    =    alias.node.cloneParent();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	24	None	replace
380	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(i  +  2);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(i  +  2);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(i  +  2);	  Node    newNode    =    aliasRefs.get(i    +    1);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	82	None	replace
381	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(i,  size  +  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(i,  size  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(i,  size  +  1);	  Node    newNode    =    aliasRefs.get(i    +    1);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	82	None	replace
382	[BUG]  [BUGGY]  aliasRefs.replaceChild(alias.node,  newNode,  namespace);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(alias.node,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(alias.node,  newNode,  namespace);	  aliasRefs.replaceChild(alias.node,    newNode);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
383	[BUG]  [BUGGY]  aliasRefs.replaceChild(alias.node,  newNode,  IR.nullNode());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(alias.node,  newNode,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(alias.node,  newNode,  IR.nullNode());	  aliasRefs.replaceChild(alias.node,    newNode);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
384	[BUG]  [BUGGY]  aliasRefs.replaceChild(alias,  newNode);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(alias,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(alias,  newNode);	  aliasRefs.replaceChild(alias.node,    newNode);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
385	[BUG]  [BUGGY]  aliasRefs.replaceChild(newNode,  alias.node);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(newNode,  alias.node);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(newNode,  alias.node);	  aliasRefs.replaceChild(alias.node,    newNode);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
386	[BUG]  [BUGGY]  newNodes.add(newNode,  i,  aliasRef);  [CE]  no  suitable  method  found  for  add(Node,int,Reference)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  i,  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  i,  aliasRef);	  newNodes.add(i,    newNode,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,Reference)	119	None	replace
387	[BUG]  [BUGGY]  newNodes.add(aliasRef,  namespace);  [CE]  no  suitable  method  found  for  add(Reference,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  namespace);	  newNodes.add(newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference,GlobalNamespace)	137	None	replace
388	[BUG]  [BUGGY]  newNodes.add(newNode,  namespace,  collector);  [CE]  no  suitable  method  found  for  add(Node,GlobalNamespace,ReferenceCollectingCallback)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  namespace,  collector);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  namespace,  collector);	  newNodes.add(newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,GlobalNamespace,ReferenceCollectingCallback)	137	None	replace
389	[BUG]  [BUGGY]  newNodes.add(namespace,  newNode);  [CE]  no  suitable  method  found  for  add(GlobalNamespace,Node)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(namespace,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(namespace,  newNode);	  newNodes.add(newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  add(GlobalNamespace,Node)	137	None	replace
390	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.node);  [CE]  cannot  find  symbol  node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.node);	  newNodes.addAll(aliasRef.newNode);    	non-compiled	[CE]  cannot  find  symbol  node	65	None	replace
391	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.newNode,  i);  [CE]  cannot  find  symbol  newNode  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.newNode,  i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.newNode,  i);	  newNodes.addAll(aliasRef.newNode);    	non-compiled	[CE]  cannot  find  symbol  newNode	65	None	replace
392	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.getParent();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRef.getParent();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRef.getParent();	  Node    newNode    =    alias.node.getParent();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	107	None	replace
393	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	112	None	add
394	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  illegal  start  of  expression	112	None	add
395	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	112	None	add
396	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  	non-compiled	[CE]  not  a  statement	112	None	add
397	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(namespace!=  null)  {  newNodes.add(newNode);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(namespace!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(namespace!=  null)  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Node    newNode    =    alias.node.cloneTree();    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
398	[BUG]  [BUGGY]  newNodes.add(alias.node,  IR.nullNode());  [CE]  no  suitable  method  found  for  add(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node,  IR.nullNode());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node,  IR.nullNode());	  newNodes.add(alias.node);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Node)	50	None	replace
399	[BUG]  [BUGGY]  newNodes.add(alias.node,  newNode);  [CE]  no  suitable  method  found  for  add(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node,  newNode);	  newNodes.add(alias.node);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Node)	50	None	replace
400	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  newNodes.add(alias.node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	newNodes.add(alias.node);    newNodes.add(alias.node);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	49	1	add
401	[BUG]  [BUGGY]  newNodes.add(alias.node);  newNodes.add(alias.node);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  newNodes.add(alias.node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node);    newNodes.add(alias.node);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	49	1	add
402	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  alias.node.removeChild(newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	newNodes.add(alias.node);    alias.node.removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	49	10	add
403	[BUG]  [BUGGY]  newNodes.add(alias.node);  alias.node.removeChild(newNode);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  alias.node.removeChild(newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node);    alias.node.removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	49	10	add
404	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  alias.node.addChildToFront(newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	newNodes.add(alias.node);    alias.node.addChildToFront(newNode);	  	compilable	  [FE]  IllegalArgumentException  	49	10	add
405	[BUG]  [BUGGY]  newNodes.add(alias.node);  alias.node.addChildToFront(newNode);  [FE]  IllegalArgumentException  [FE]        AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  alias.node.addChildToFront(newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node);    alias.node.addChildToFront(newNode);	  	compilable	  [FE]  IllegalArgumentException  	49	10	add
406	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  alias.node.addChildToBack(newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	newNodes.add(alias.node);    alias.node.addChildToBack(newNode);	  	compilable	  [FE]  IllegalArgumentException  	49	10	add
407	[BUG]  [BUGGY]  newNodes.add(alias.node);  alias.node.addChildToBack(newNode);  [FE]  IllegalArgumentException  [FE]          AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  alias.node.addChildToBack(newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node);    alias.node.addChildToBack(newNode);	  	compilable	  [FE]  IllegalArgumentException  	49	10	add
408	[BUG]  [BUGGY]  newNodes.add(alias.node);  Node  newNodes.add(alias.node);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  Node  newNodes.add(alias.node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node);    Node  newNodes.add(alias.node);	  	non-compiled	[CE]  ';'  expected	49	None	add
409	[BUG]  [BUGGY]  newNodes.add(alias.node);  nodes.add(alias.node);  [CE]  cannot  find  symbol  nodes  [FE]              AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  nodes.add(alias.node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node);    nodes.add(alias.node);	  	non-compiled	[CE]  cannot  find  symbol  nodes	49	None	add
410	[BUG]  [BUGGY]  newNodes.add(newNode,  node);  [CE]  cannot  find  symbol  node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  node);	  newNodes.add(node,    newNode);    	non-compiled	[CE]  cannot  find  symbol  node	136	None	replace
411	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  -  2);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  -  2);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i  -  2);	  Node    newNode    =    aliasRefs.references.get(i    -    1);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	121	None	replace
412	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(size  -  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(size  -  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(size  -  1);	  Node    newNode    =    aliasRefs.references.get(i    -    1);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	121	None	replace
413	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.getNode()  +  1;  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.getNode()  +  1;  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.getNode()  +  1;	  Node    newNode    =    aliasRefs.getNode()    +    1;    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	105	None	replace
414	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  illegal  start  of  expression	147	None	add
415	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes  ==  null)  {  if(newNodes!=  null)  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  illegal  start  of  expression	147	None	add
416	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Node  newNode  =  alias.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Node  newNode  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    Node  newNode  =  alias.node.cloneTree();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	147	None	add
417	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Node  newNode  =  alias.node.cloneTree();  setTimeout(function()  {  alert(newNode)  }  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Node  newNode  =  alias.node.cloneTree();  setTimeout(function()  {  alert(newNode)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    Node  newNode  =  alias.node.cloneTree();  setTimeout(function()  {  alert(newNode)  }	  	non-compiled	[CE]  ')'  expected	147	None	add
418	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }	  	non-compiled	[CE]  illegal  start  of  expression	147	None	add
419	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes  =  Sets.newHashSet();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes  =  Sets.newHashSet();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes  =  Sets.newHashSet();  }	  	non-compiled	[CE]  illegal  start  of  expression	147	None	add
420	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode,  i);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().removeChild(newNode,  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().removeChild(newNode,  i);	  aliasRef.getParent().removeChild(newNode);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	81	None	replace
421	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().addChildToFront(newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	aliasRef.getParent().addChildToFront(newNode);	  aliasRef.getParent().removeChild(newNode);    	compilable	  [FE]  NullPointerException  	81	10	replace
422	[BUG]  [BUGGY]  aliasRef.getParent().addChildToFront(newNode);  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().addChildToFront(newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().addChildToFront(newNode);	  aliasRef.getParent().removeChild(newNode);    	compilable	  [FE]  NullPointerException  	81	10	replace
423	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	62	None	add
424	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	62	None	add
425	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	62	None	add
426	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  	non-compiled	[CE]  not  a  statement	62	None	add
427	[BUG]  [BUGGY]  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  else  {  namespace.scanNewNodes(alias.node,  newNode);  }  [CE]  method  scanNewNodes  in  class  GlobalNamespace  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  else  {  namespace.scanNewNodes(alias.node,  newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  else  {  namespace.scanNewNodes(alias.node,  newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Node    newNode    =    alias.node.cloneTree();    	non-compiled	[CE]  method  scanNewNodes  in  class  GlobalNamespace  cannot  be  applied  to  given  types;	144	None	replace
428	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Node  newNode  =  alias.node.cloneTree();  }  [CE]  illegal  start  of  type  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Node  newNode  =  alias.node.cloneTree();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Node  newNode  =  alias.node.cloneTree();  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Node    newNode    =    alias.node.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	144	None	replace
429	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  return  function()  ==  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  return  function()  ==  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  return  function()  ==  var  args=arguments;setTimeout(function()  {  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  not  a  statement	140	None	replace
430	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.getNode(),  Arrays.asList(newNode));  [CE]  cannot  find  symbol  Arrays  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.getNode(),  Arrays.asList(newNode));  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.getNode(),  Arrays.asList(newNode));	  newNodes.addAll(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol  Arrays	126	None	replace
431	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.getNode(),  newNode,  inlineAliases);  [CE]  no  suitable  method  found  for  addAll(Node,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.getNode(),  newNode,  inlineAliases);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.getNode(),  newNode,  inlineAliases);	  newNodes.addAll(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,Node,boolean)	126	None	replace
432	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.getNode(),  i,  newNode);  [CE]  no  suitable  method  found  for  addAll(Node,int,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.getNode(),  i,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.getNode(),  i,  newNode);	  newNodes.addAll(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,int,Node)	126	None	replace
433	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    newNodes.add(node);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	compilable	  [FE]  AssertionFailedError  	143	10	replace
434	[BUG]  [BUGGY]  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  AssertionFailedError  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    newNodes.add(node);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	compilable	  [FE]  AssertionFailedError  	143	10	replace
435	[BUG]  [BUGGY]  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  else  {  namespace.scanNewNodes(alias.node,  newNodes);  }  [CE]  method  scanNewNodes  in  class  GlobalNamespace  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  else  {  namespace.scanNewNodes(alias.node,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  else  {  namespace.scanNewNodes(alias.node,  newNodes);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    newNodes.add(node);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  method  scanNewNodes  in  class  GlobalNamespace  cannot  be  applied  to  given  types;	143	None	replace
436	[BUG]  [BUGGY]  if(newNode  ==  null)  {  if(newNode!=  null)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode  ==  null)  {  if(newNode!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode  ==  null)  {  if(newNode!=  null)  {  compiler.reportCodeChange();  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes    ==    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
437	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=  null)  {  compiler.reportCodeChange();  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes    ==    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	compilable	  [FE]  AssertionFailedError  	10	10	replace
438	[BUG]  [BUGGY]  if(newNode!=  null)  {  compiler.reportCodeChange();  }  [FE]  AssertionFailedError  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  compiler.reportCodeChange();  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes    ==    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	compilable	  [FE]  AssertionFailedError  	10	10	replace
439	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes  ==  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNodes  ==  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	113	10	replace
440	[BUG]  [BUGGY]  if(newNodes  ==  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes  ==  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes  ==  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	113	10	replace
441	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(node);  }  else  {  compiler.reportCodeChange();  }  [CE]  cannot  find  symbol  node  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(node);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  newNodes.add(node);  }  else  {  compiler.reportCodeChange();  }	  if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  cannot  find  symbol  node	113	None	replace
442	[BUG]  [BUGGY]  newNodes.add(node,  aliasRef.cloneTree());  [CE]  cannot  find  symbol  node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(node,  aliasRef.cloneTree());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(node,  aliasRef.cloneTree());	  newNodes.add(newNode,    aliasRef.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  node	100	None	replace
443	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes    ==    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
444	[BUG]  [BUGGY]  if(newNode  ==  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode  ==  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode  ==  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes    ==    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
445	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes    ==    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
446	[BUG]  [BUGGY]  if(newNode  ==  null)  {  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode  ==  null)  {  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode  ==  null)  {  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes    ==    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
447	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.getFirstChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.getFirstChild();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.getFirstChild();	  Node    newNode    =    aliasRefs.getFirstChild();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	42	None	replace
448	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.node.getFirstChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.node.getFirstChild();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.node.getFirstChild();	  Node    newNode    =    aliasRefs.getFirstChild();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	42	None	replace
449	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getFirstChild().cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.getFirstChild().cloneTree();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.getFirstChild().cloneTree();	  Node    newNode    =    aliasRefs.getFirstChild();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	42	None	replace
450	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  +  3);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  +  3);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i  +  3);	  Node    newNode    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	53	None	replace
451	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  +  1  -  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  +  1  -  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i  +  1  -  1);	  Node    newNode    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	53	None	replace
452	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,CollapseProperties)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  inlineAliases,  this);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  inlineAliases,  this);	  NodeTraversal.traverse(compiler,    newNode,    this,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,boolean,CollapseProperties)	17	None	replace
453	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRefs  =  aliasRefs.getParent();  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRefs  =  aliasRefs.getParent();  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRefs  =  aliasRefs.getParent();  compiler.reportCodeChange();  }	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    aliasRefs.getParent();    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
454	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNode);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alarm(args)    }    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
455	[BUG]  [BUGGY]  Node  aliasParent  =  alias.node.cloneTree();  [CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasParent  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasParent  =  alias.node.cloneTree();	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alarm(args)    }    	non-compiled	[CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	95	None	replace
456	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  namespace,  inlineAliasIfPossible);  [CE]  cannot  find  symbol  inlineAliasIfPossible  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  namespace,  inlineAliasIfPossible);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  newNode,  namespace,  inlineAliasIfPossible);	  NodeTraversal.traverse(compiler,    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasIfPossible	14	None	replace
457	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasref,  newNode,  namespace);  [CE]  cannot  find  symbol  aliasref  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasref,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasref,  newNode,  namespace);	  NodeTraversal.traverse(compiler,    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol  aliasref	14	None	replace
458	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode!=  null)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode!=  null)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode!=  null)  {  compiler.reportCodeChange();  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alarm(args)    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
459	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i);  [CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRef  =  aliasRefs.references.get(i);	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasRef    =    aliasRefs.references.get(i);    aliasRef.getParent().replaceChild(aliasRef.getNode()    	non-compiled	[CE]  variable  aliasRef  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	101	None	replace
460	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild(aliasRef.getNode()  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild(aliasRef.getNode()  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild(aliasRef.getNode()	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasRef    =    aliasRefs.references.get(i);    aliasRef.getParent().replaceChild(aliasRef.getNode()    	non-compiled	[CE]  ')'  expected	101	None	replace
461	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i);  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i);  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i);  compiler.reportCodeChange();	  Node    newNode    =    aliasRefs.getNameNode();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	86	None	replace
462	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getVarNode();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.getVarNode();  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.getVarNode();  compiler.reportCodeChange();	  Node    newNode    =    aliasRefs.getNameNode();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	86	None	replace
463	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.getNode());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	newNodes.add(aliasRef.getNode());	  newNodes.add(aliasRef.node);    	compilable	  [FE]  AssertionFailedError  	52	10	replace
464	[BUG]  [BUGGY]  newNodes.add(aliasRef.getNode());  [FE]  AssertionFailedError  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.getNode());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.getNode());	  newNodes.add(aliasRef.node);    	compilable	  [FE]  AssertionFailedError  	52	10	replace
465	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i++,  newNode);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i++,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i++,  newNode);	  Node    newNode    =    aliasRefs.references.get(i++);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	56	None	replace
466	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.getPrevious();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.getPrevious();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.getPrevious();	  Node    newNode    =    aliasRefs.getPrevious();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	43	None	replace
467	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getNewNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.getNewNode();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.getNewNode();	  Node    newNode    =    aliasRefs.getPrevious();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	43	None	replace
468	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  aliasRefs.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  aliasRefs.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(aliasRef,  aliasRefs.getNode(),  newNode);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNode(),    aliasRefs);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
469	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  alias.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  alias.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(aliasRef,  alias.getNode(),  newNode);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNode(),    aliasRefs);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
470	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	149	None	add
471	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	149	None	add
472	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  	non-compiled	[CE]  not  a  statement	149	None	add
473	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  	non-compiled	[CE]  not  a  statement	149	None	add
474	[BUG]  [BUGGY]  newNodes.add(aliasRef,  n);  [CE]  cannot  find  symbol  n  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  n);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  n);	  newNodes.add(node,    aliasRef);    	non-compiled	[CE]  cannot  find  symbol  n	99	None	replace
475	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(node);  }  [CE]  cannot  find  symbol  node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(node);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  newNodes.add(node);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    newNodes.add(node);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  cannot  find  symbol  node	152	None	replace
476	[BUG]  [BUGGY]  newNodes.add(newNode,  Lists.  <  Node>emptyHashSet());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Lists.  <  Node>emptyHashSet());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Lists.  <  Node>emptyHashSet());	  newNodes.add(newNode,    Collections.    <    Node>emptyHashSet());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
477	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  else  {  aliasParent.replaceChild(aliasRef.getNode(),  newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  else  {  aliasParent.replaceChild(aliasRef.getNode(),  newNode);  }	          newNodes.add(newNode);    compiler.reportCodeChange();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	33	1	replace
478	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  else  {  aliasParent.replaceChild(aliasRef.getNode(),  newNode);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  else  {  aliasParent.replaceChild(aliasRef.getNode(),  newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  newNodes.add(newNode);  compiler.reportCodeChange();  }  else  {  aliasParent.replaceChild(aliasRef.getNode(),  newNode);  }	          newNodes.add(newNode);    compiler.reportCodeChange();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	33	1	replace
479	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasNode  =  alias.node.cloneTree();  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	Node  aliasNode  =  alias.node.cloneTree();  compiler.reportCodeChange();	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    alias.node.cloneTree();    compiler.reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	29	10	replace
480	[BUG]  [BUGGY]  Node  aliasNode  =  alias.node.cloneTree();  compiler.reportCodeChange();  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasNode  =  alias.node.cloneTree();  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasNode  =  alias.node.cloneTree();  compiler.reportCodeChange();	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    alias.node.cloneTree();    compiler.reportCodeChange();    }    	compilable	  [FE]  AssertionFailedError  	29	10	replace
481	[BUG]  [BUGGY]  newNodes.add(node,  i,  namespace);  [CE]  cannot  find  symbol  node  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(node,  i,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(node,  i,  namespace);	  newNodes.add(i,    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol  node	48	None	replace
482	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.getNext();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.getNext();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.getNext();	  Node    newNode    =    aliasRefs.getNext();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	40	None	replace
483	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
484	[BUG]  [BUGGY]  newNodes.add(node,  aliasRef,  namespace);  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(node,  aliasRef,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(node,  aliasRef,  namespace);	  newNodes.add(newNode,    aliasRef,    namespace);    	non-compiled	[CE]  cannot  find  symbol  node	72	None	replace
485	[BUG]  [BUGGY]  Annotated:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Annotated:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Annotated:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	150	None	replace
486	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(aliasRef,  aliasRef.getNode(),  newNode);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
487	[BUG]  [BUGGY]  if(i  ==  size)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(i  ==  size)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(i  ==  size)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
488	[BUG]  [BUGGY]  if(i  ==  size)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(i  ==  size)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(i  ==  size)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
489	[BUG]  [BUGGY]  if(i  ==  size)  {  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNode);  }  else  {  namespace.scanNewNodes(alias.node,  newNode);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(i  ==  size)  {  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNode);  }  else  {  namespace.scanNewNodes(alias.node,  newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(i  ==  size)  {  if(newNode!=  null)  {  namespace.scanNewNodes(alias.scope,  newNode);  }  else  {  namespace.scanNewNodes(alias.node,  newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
490	[BUG]  [BUGGY]  Namespace  namespace  =  namespace.scanNewNodes(alias.scope,  newNodes);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Namespace  namespace  =  namespace.scanNewNodes(alias.scope,  newNodes);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Namespace  namespace  =  namespace.scanNewNodes(alias.scope,  newNodes);	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
491	[BUG]  [BUGGY]  aliasRefs.replaceChild(aliasRef,  newNode.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(aliasRef,  newNode.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(aliasRef,  newNode.getNode(),  newNode);	  aliasRefs.replaceChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
492	[BUG]  [BUGGY]  aliasRefs.getParent().removeChild(aliasRef,  newNode.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().removeChild(aliasRef,  newNode.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().removeChild(aliasRef,  newNode.getNode(),  newNode);	  aliasRefs.getParent().removeChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
493	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	90	None	add
494	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  	non-compiled	[CE]  not  a  statement	90	None	add
495	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Set  <  Node>  newNodes  =  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Set  <  Node>  newNodes  =  setTimeout(function()  {  alert(args)  }	  AssertionFailedError:    Expected:    function    f()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	156	None	replace
496	[BUG]  [BUGGY]  Set  <  String>  newNodes  =  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Set  <  String>  newNodes  =  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Set  <  String>  newNodes  =  setTimeout(function()  {  alert(args)  }	  AssertionFailedError:    Expected:    function    f()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	156	None	replace
497	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	112	None	add
498	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  	non-compiled	[CE]  not  a  statement	112	None	add
499	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }	  	non-compiled	[CE]  not  a  statement	112	None	add
500	[BUG]  [BUGGY]  aliasRefs.remove(i);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.remove(i);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.remove(i);  compiler.reportCodeChange();	          aliasRefs.remove(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
501	[BUG]  [BUGGY]  node.remove(newNode);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  node.remove(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	node.remove(newNode);  compiler.reportCodeChange();	          aliasRefs.remove(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  node	110	None	replace
502	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.getParent();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRef.getParent();  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRef.getParent();  compiler.reportCodeChange();	  Node    newNode    =    alias.node.getParent();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	38	None	replace
503	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  Node  newNode  =  aliasRefs.get(i);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  Node  newNode  =  aliasRefs.get(i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=    null)    {    newNodes.add(newNode);    }    Node  newNode  =  aliasRefs.get(i);	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	114	None	add
504	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  Node  newNode  =  aliasRefs.getNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  Node  newNode  =  aliasRefs.getNode();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=    null)    {    newNodes.add(newNode);    }    Node  newNode  =  aliasRefs.getNode();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	114	None	add
505	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  Node  newNode  =  aliasRef.getNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  Node  newNode  =  aliasRef.getNode();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=    null)    {    newNodes.add(newNode);    }    Node  newNode  =  aliasRef.getNode();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	114	None	add
506	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(i,  namespace,  newNode);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(i,  namespace,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(i,  namespace,  newNode);	  Node    newNode    =    aliasRefs.get(i,    namespace);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	83	None	replace
507	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode);	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
508	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.remove(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	141	None	add
509	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.remove(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	141	None	add
510	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.remove(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	141	None	add
511	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.remove(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  	non-compiled	[CE]  not  a  statement	141	None	add
512	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  namespace,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,CollapseProperties,GlobalNamespace,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  namespace,  inlineAliases);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  namespace,  inlineAliases);	  NodeTraversal.traverse(compiler,    newNode,    this,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,CollapseProperties,GlobalNamespace,boolean)	16	None	replace
513	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  ==  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  ==  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  ==  var  args=arguments;setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    function    f()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	20	None	replace
514	[BUG]  [BUGGY]  aliasRefs.removeChild(node);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  node  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.removeChild(node);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.removeChild(node);  compiler.reportCodeChange();	          aliasRefs.removeChild(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  node	28	None	replace
515	[BUG]  [BUGGY]  node.removeChild(newNode);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  node.removeChild(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	node.removeChild(newNode);  compiler.reportCodeChange();	          aliasRefs.removeChild(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  node	28	None	replace
516	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  Node  aliasNode  =  alias.node.cloneTree();  newNodes.add(alias.node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	newNodes.add(alias.node);    Node  aliasNode  =  alias.node.cloneTree();  newNodes.add(alias.node);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	49	1	add
517	[BUG]  [BUGGY]  newNodes.add(alias.node);  Node  aliasNode  =  alias.node.cloneTree();  newNodes.add(alias.node);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  Node  aliasNode  =  alias.node.cloneTree();  newNodes.add(alias.node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node);    Node  aliasNode  =  alias.node.cloneTree();  newNodes.add(alias.node);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	49	1	add
518	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  Node  aliasNode  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	newNodes.add(alias.node);    Node  aliasNode  =  alias.node.cloneTree();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	49	1	add
519	[BUG]  [BUGGY]  newNodes.add(alias.node);  Node  aliasNode  =  alias.node.cloneTree();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  Node  aliasNode  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node);    Node  aliasNode  =  alias.node.cloneTree();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	49	1	add
520	[BUG]  [BUGGY]  newNodes.add(alias.node);  Node  alias  =  alias.node.cloneTree();  newNodes.add(alias.node);  [CE]  variable  alias  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  Node  alias  =  alias.node.cloneTree();  newNodes.add(alias.node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node);    Node  alias  =  alias.node.cloneTree();  newNodes.add(alias.node);	  	non-compiled	[CE]  variable  alias  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	49	None	add
521	[BUG]  [BUGGY]  newNodes.add(alias.node);  Node  alias  =  alias.node.cloneTree();  [CE]  variable  alias  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  Node  alias  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node);    Node  alias  =  alias.node.cloneTree();	  	non-compiled	[CE]  variable  alias  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	49	None	add
522	[BUG]  [BUGGY]  newNodes.add(alias.node);  aliasRefs.add(alias.node);  [CE]  method  add  in  class  ReferenceCollection  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  aliasRefs.add(alias.node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node);    aliasRefs.add(alias.node);	  	non-compiled	[CE]  method  add  in  class  ReferenceCollection  cannot  be  applied  to  given  types;	49	None	add
523	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=null;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=null;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=null;setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    function    f()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	18	None	replace
524	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=newNode;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=newNode;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=newNode;setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    function    f()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	18	None	replace
525	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    function    f()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	18	None	replace
526	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=array;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=array;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=array;setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    function    f()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	18	None	replace
527	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(newNode);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(newNode);	  Node    newNode    =    aliasRefs.references.get(size);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	132	None	replace
528	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNodes);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNodes);	  NodeTraversal.traverse(compiler,    aliasRef,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Set<Node>)	15	None	replace
529	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  -  1  +  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  -  1  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i  -  1  +  1);	  Node    newNode    =    aliasRefs.references.get(i    -    1);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	121	None	replace
530	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  -  1  -  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  -  1  -  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i  -  1  -  1);	  Node    newNode    =    aliasRefs.references.get(i    -    1);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	121	None	replace
531	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  nodeCount;  i++)  {  Node  aliasParent  =  newNodes.get(i);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  nodeCount;  i++)  {  Node  aliasParent  =  newNodes.get(i);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  nodeCount;  i++)  {  Node  aliasParent  =  newNodes.get(i);  compiler.reportCodeChange();  }	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    newNodes.get(i);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
532	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i-1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefs  =  alias.references.get(i-1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefs  =  alias.references.get(i-1);	  Node    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	159	None	replace
533	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i++);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefs  =  alias.references.get(i++);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefs  =  alias.references.get(i++);	  Node    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	159	None	replace
534	[BUG]  [BUGGY]  newNodes.add(aliasRef,  args);  [CE]  cannot  find  symbol  args  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  args);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  args);	  newNodes.add(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol  args	45	None	replace
535	[BUG]  [BUGGY]  newNodes.add(aliasRef,  var);  [CE]  cannot  find  symbol  var  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  var);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  var);	  newNodes.add(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol  var	45	None	replace
536	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.getNode(i);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.getNode(i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.getNode(i);	  Node    newNode    =    aliasRefs.getNode(i);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	104	None	replace
537	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getNode(newNode);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.getNode(newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.getNode(newNode);	  Node    newNode    =    aliasRefs.getNode(i);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	104	None	replace
538	[BUG]  [BUGGY]  if(newNode!=  null)  {  for(AssertionFailedError:  Expected:  function()  ==  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  for(AssertionFailedError:  Expected:  function()  ==  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  for(AssertionFailedError:  Expected:  function()  ==  var  args=arguments;setTimeout(function()  {  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    for(AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	59	None	replace
539	[BUG]  [BUGGY]  newNodes.addAll(aliasRef,  Arrays.asList(newNode));  [CE]  cannot  find  symbol  Arrays  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef,  Arrays.asList(newNode));  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef,  Arrays.asList(newNode));	  newNodes.addAll(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol  Arrays	66	None	replace
540	[BUG]  [BUGGY]  newNodes.addAll(aliasRef,  i,  newNode);  [CE]  no  suitable  method  found  for  addAll(Reference,int,Node)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef,  i,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef,  i,  newNode);	  newNodes.addAll(aliasRef,    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Reference,int,Node)	66	None	replace
541	[BUG]  [BUGGY]  newNodes.addAll(aliasRef,  args);  [CE]  cannot  find  symbol  args  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef,  args);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef,  args);	  newNodes.addAll(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol  args	66	None	replace
542	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getPrevious();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.getPrevious();  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.getPrevious();  compiler.reportCodeChange();	  Node    newNode    =    aliasRefs.getNext();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	39	None	replace
543	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	147	None	add
544	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	147	None	add
545	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  	non-compiled	[CE]  not  a  statement	147	None	add
546	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  	non-compiled	[CE]  not  a  statement	147	None	add
547	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.getNameNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.getNameNode();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.getNameNode();	  Node    newNode    =    aliasRefs.getNameNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	87	None	replace
548	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.node.cloneTree();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.node.cloneTree();	  Node    newNode    =    aliasRefs.cloneTree();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	41	None	replace
549	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.newNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.newNode();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.newNode();	  Node    newNode    =    aliasRefs.cloneTree();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	41	None	replace
550	[BUG]  [BUGGY]  aliasRefs.getParent().removeChild(newNode,  aliasRefs);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().removeChild(newNode,  aliasRefs);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().removeChild(newNode,  aliasRefs);	  aliasRefs.getParent().removeChild(newNode,    newNode);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
551	[BUG]  [BUGGY]  aliasRefs.getParent().removeChild(newNode,  aliasRef.node);  [CE]  cannot  find  symbol  node  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().removeChild(newNode,  aliasRef.node);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().removeChild(newNode,  aliasRef.node);	  aliasRefs.getParent().removeChild(newNode,    newNode);    	non-compiled	[CE]  cannot  find  symbol  node	79	None	replace
552	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);	  	compilable	  [FE]  NullPointerException  	80	10	add
553	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);	  	compilable	  [FE]  NullPointerException  	80	10	add
554	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode);	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
555	[BUG]  [BUGGY]  Node  aliasNode  =  aliasRefs.getNode();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasNode  =  aliasRefs.getNode();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasNode  =  aliasRefs.getNode();	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasParent.replaceChild(aliasVar,    newNode);    }    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
556	[BUG]  [BUGGY]  Node  aliasNode  =  aliasRefs.getNode(i);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasNode  =  aliasRefs.getNode(i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasNode  =  aliasRefs.getNode(i);	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasParent.replaceChild(aliasVar,    newNode);    }    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
557	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRef.node.removeFirstChild();	  Node    newNode    =    aliasRef.node.cloneTree();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	23	None	replace
558	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(i  +  1,  newNode);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(i  +  1,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(i  +  1,  newNode);	  Node    newNode    =    aliasRefs.get(i    +    1);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	82	None	replace
559	[BUG]  [BUGGY]  newNodes.addAll(newNode,  Collections.  <  Node>emptyList());  [CE]  cannot  find  symbol  Collections  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  Collections.  <  Node>emptyList());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  Collections.  <  Node>emptyList());	  newNodes.addAll(newNode,    Collections.    <    Node>emptySet());    	non-compiled	[CE]  cannot  find  symbol  Collections	134	None	replace
560	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=null;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=null;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=null;setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	19	None	replace
561	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  aliasRef);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  aliasRef);	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
562	[BUG]  [BUGGY]  newNodes.add(i,  aliasRef,  newNode);  [CE]  no  suitable  method  found  for  add(int,Reference,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(i,  aliasRef,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(i,  aliasRef,  newNode);	  newNodes.add(newNode,    aliasRef,    i);    	non-compiled	[CE]  no  suitable  method  found  for  add(int,Reference,Node)	74	None	replace
563	[BUG]  [BUGGY]  newNodes.add(node,  i,  aliasRef);  [CE]  cannot  find  symbol  node  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(node,  i,  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(node,  i,  aliasRef);	  newNodes.add(i,    newNode,    aliasRef);    	non-compiled	[CE]  cannot  find  symbol  node	119	None	replace
564	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  newNode()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  junit.framework.AssertionFailedError:  expected:  newNode()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	junit.framework.AssertionFailedError:  expected:  newNode()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    newNode()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	92	None	replace
565	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getParent(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	aliasRef.getParent().replaceChild(aliasRef.getParent(),  newNode);	  aliasRef.getParent().removeChild(newNode);    	compilable	  [FE]  NullPointerException  	81	10	replace
566	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getParent(),  newNode);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getParent(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef.getParent(),  newNode);	  aliasRef.getParent().removeChild(newNode);    	compilable	  [FE]  NullPointerException  	81	10	replace
567	[BUG]  [BUGGY]  newNodes.add(aliasRef.getNode(),  args);  [CE]  cannot  find  symbol  args  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.getNode(),  args);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.getNode(),  args);	  newNodes.add(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol  args	118	None	replace
568	[BUG]  [BUGGY]  newNodes.add(aliasRef.getNode(),  newNode,  i);  [CE]  no  suitable  method  found  for  add(Node,Node,int)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.getNode(),  newNode,  i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.getNode(),  newNode,  i);	  newNodes.add(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Node,int)	118	None	replace
569	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.getParent();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefs  =  aliasRefs.getParent();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefs  =  aliasRefs.getParent();	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    aliasRefs.getParent();    aliasRefs.replaceChild(aliasRef.getNode(),    newNode);    }    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	102	None	replace
570	[BUG]  [BUGGY]  Node  aliasRefsParent  =  aliasRefs.getParent();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefsParent  =  aliasRefs.getParent();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefsParent  =  aliasRefs.getParent();	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    aliasRefs.getParent();    aliasRefs.replaceChild(aliasRef.getNode(),    newNode);    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
571	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasParent.replaceChild(node,  newNode);  compiler.reportCodeChange();  }  [CE]  cannot  find  symbol  node  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  aliasParent.replaceChild(node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  aliasParent.replaceChild(node,  newNode);  compiler.reportCodeChange();  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  node	27	None	replace
572	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode  ==  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode  ==  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	27	10	replace
573	[BUG]  [BUGGY]  if(newNode  ==  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [FE]  AssertionFailedError  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode  ==  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode  ==  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	27	10	replace
574	[BUG]  [BUGGY]  aliasRefs.removeChild(newNode,  namespace,  newNode);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.removeChild(newNode,  namespace,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.removeChild(newNode,  namespace,  newNode);	  aliasRefs.removeChild(newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
575	[BUG]  [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptyHashSet(),  aliasRefs);  [CE]  cannot  find  symbol  Collections  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptyHashSet(),  aliasRefs);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Collections.  <  Node>emptyHashSet(),  aliasRefs);	  newNodes.add(newNode,    Collections.    <    Node>emptySet(),    aliasRefs);    	non-compiled	[CE]  cannot  find  symbol  Collections	158	None	replace
576	[BUG]  [BUGGY]  newNodes.addAll(newNode,  aliasRefs,  i);  [CE]  no  suitable  method  found  for  addAll(Node,ReferenceCollection,int)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  aliasRefs,  i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  aliasRefs,  i);	  newNodes.addAll(newNode,    aliasRefs);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,ReferenceCollection,int)	133	None	replace
577	[BUG]  [BUGGY]  newNodes.addAll(newNode,  aliasRefs,  inlineAliases);  [CE]  no  suitable  method  found  for  addAll(Node,ReferenceCollection,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  aliasRefs,  inlineAliases);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  aliasRefs,  inlineAliases);	  newNodes.addAll(newNode,    aliasRefs);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,ReferenceCollection,boolean)	133	None	replace
578	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i-1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i-1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i-1);	  Node    aliasRefs    =    aliasRefs.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	69	None	replace
579	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i++);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i++);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i++);	  Node    aliasRefs    =    aliasRefs.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	69	None	replace
580	[BUG]  [BUGGY]  newNodes.addAll(newNode,  aliasRef,  i);  [CE]  no  suitable  method  found  for  addAll(Node,Reference,int)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  aliasRef,  i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  aliasRef,  i);	  newNodes.addAll(newNode,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,Reference,int)	68	None	replace
581	[BUG]  [BUGGY]  aliasRefs.removeChild(newNode,  n);  [CE]  cannot  find  symbol  n  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.removeChild(newNode,  n);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.removeChild(newNode,  n);	  aliasRefs.removeChild(newNode,    var);    	non-compiled	[CE]  cannot  find  symbol  n	6	None	replace
582	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	145	None	add
583	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	145	None	add
584	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  	non-compiled	[CE]  not  a  statement	145	None	add
585	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(aliasRef.getNode(),  newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	                newNodes.add(newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(aliasRef.getNode(),  newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	32	10	add
586	[BUG]  [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(aliasRef.getNode(),  newNode);  compiler.reportCodeChange();  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(aliasRef.getNode(),  newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                newNodes.add(newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(aliasRef.getNode(),  newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	32	10	add
587	[BUG]  [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  Node  newNodes  =  aliasRefs.get(newNode);  compiler.reportCodeChange();  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  Node  newNodes  =  aliasRefs.get(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                newNodes.add(newNode);    compiler.reportCodeChange();    Node  newNodes  =  aliasRefs.get(newNode);  compiler.reportCodeChange();	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	32	None	add
588	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	139	None	add
589	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	139	None	add
590	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	139	None	add
591	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  	non-compiled	[CE]  not  a  statement	139	None	add
592	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  junit.framework.AssertionFailedError:  expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	junit.framework.AssertionFailedError:  expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	21	None	replace
593	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i  +  2);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i  +  2);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefs  =  aliasRefs.get(i  +  2);	  Node    aliasRefs    =    aliasRefs.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	70	None	replace
594	[BUG]  [BUGGY]  newNodes.add(node,  aliasRef,  aliasVar);  [CE]  cannot  find  symbol  node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(node,  aliasRef,  aliasVar);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(node,  aliasRef,  aliasVar);	  newNodes.add(newNode,    aliasVar,    aliasRef);    	non-compiled	[CE]  cannot  find  symbol  node	73	None	replace
595	[BUG]  [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptyList(),  aliasRefs);  [CE]  cannot  find  symbol  Collections  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptyList(),  aliasRefs);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Collections.  <  Node>emptyList(),  aliasRefs);	  newNodes.add(newNode,    Collections.    <    Node>emptyList());    	non-compiled	[CE]  cannot  find  symbol  Collections	3	None	replace
596	[BUG]  [BUGGY]  newNodes.add(node,  Collections.  <  Node>emptyList());  [CE]  cannot  find  symbol  node  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(node,  Collections.  <  Node>emptyList());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(node,  Collections.  <  Node>emptyList());	  newNodes.add(newNode,    Collections.    <    Node>emptyList());    	non-compiled	[CE]  cannot  find  symbol  node	3	None	replace
597	[BUG]  [BUGGY]  newNodes.add(aliasRef.getNode(),  i);  [CE]  no  suitable  method  found  for  add(Node,int)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.getNode(),  i);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.getNode(),  i);	  newNodes.add(newNode,    i);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int)	44	None	replace
598	[BUG]  [BUGGY]  newNodes.add(newNode,  namespace,  compiler);  [CE]  no  suitable  method  found  for  add(Node,GlobalNamespace,AbstractCompiler)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  namespace,  compiler);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  namespace,  compiler);	  newNodes.add(newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,GlobalNamespace,AbstractCompiler)	137	None	replace
599	[BUG]  [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptyHashSet(),  namespace);  [CE]  cannot  find  symbol  Collections  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptyHashSet(),  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Collections.  <  Node>emptyHashSet(),  namespace);	  newNodes.add(newNode,    Collections.    <    Node>emptySet(),    namespace);    	non-compiled	[CE]  cannot  find  symbol  Collections	2	None	replace
600	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasNode.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  aliasNode  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasNode.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasNode.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol  aliasNode	26	None	add
601	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }	  	non-compiled	[CE]  illegal  start  of  type	26	None	add
602	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(i,  newNode  +  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(i,  newNode  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(i,  newNode  +  1);	  Node    newNode    =    aliasRefs.get(i,    newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	89	None	replace
603	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  newNode).cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  newNode).cloneTree();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i,  newNode).cloneTree();	  Node    newNode    =    aliasRefs.references.get(i,    newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	120	None	replace
604	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  +  1,  newNode);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  +  1,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i  +  1,  newNode);	  Node    newNode    =    aliasRefs.references.get(i,    newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	120	None	replace
605	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i,  newNode  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i,  newNode  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRefs  =  aliasRefs.get(i,  newNode  +  1);	  Node    aliasRefs    =    aliasRefs.get(i,    newNode);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	111	None	replace
606	[BUG]  [BUGGY]  aliasRefs.replaceChild(aliasRef.cloneTree(),  newNode);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(aliasRef.cloneTree(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(aliasRef.cloneTree(),  newNode);	  aliasRefs.replaceChild(aliasRef.node,    newNode);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
607	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  aliasRefs.get(i);  setTimeout(function()  {  alert(newNodes)  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Set  <  Node>  newNodes  =  aliasRefs.get(i);  setTimeout(function()  {  alert(newNodes)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Set  <  Node>  newNodes  =  aliasRefs.get(i);  setTimeout(function()  {  alert(newNodes)  }	  AssertionFailedError:    Expected:    function    f()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	22	None	replace
608	[BUG]  [BUGGY]  Preconditions.checkState(newNode!=  null);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Preconditions.checkState(newNode!=  null);  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Preconditions.checkState(newNode!=  null);  setTimeout(function()  {  alert(args)  }	  AssertionFailedError:    Expected:    function    f()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	22	None	replace
609	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	154	None	add
610	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	154	None	add
611	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  	non-compiled	[CE]  not  a  statement	154	None	add
612	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    if(newNodes  ==  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  	non-compiled	[CE]  not  a  statement	154	None	add
613	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  inlineAliases);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  inlineAliases);	  NodeTraversal.traverse(compiler,    newNode,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,boolean)	93	None	replace
614	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasVar,  newNode,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Var,Node,boolean)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasVar,  newNode,  inlineAliases);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasVar,  newNode,  inlineAliases);	  NodeTraversal.traverse(compiler,    newNode,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Var,Node,boolean)	93	None	replace
615	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.cloneTree(),  aliasRef.newNode);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.cloneTree(),  aliasRef.newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.cloneTree(),  aliasRef.newNode);	  newNodes.addAll(aliasRef.cloneTree(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
616	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.ASSIGN)  {  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.ASSIGN)  {  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode.getType()  ==  Token.ASSIGN)  {  setTimeout(function()  {  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	60	None	replace
617	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.NAME)  {  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.NAME)  {  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode.getType()  ==  Token.NAME)  {  setTimeout(function()  {  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	60	None	replace
618	[BUG]  [BUGGY]  aliasRefs.getParent().removeChild(newNode.getNode(),  aliasRefs);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().removeChild(newNode.getNode(),  aliasRefs);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().removeChild(newNode.getNode(),  aliasRefs);	  aliasRefs.getParent().removeChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
619	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    function    f()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	20	None	replace
620	[BUG]  [BUGGY]  Set  <  String>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Set  <  String>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Set  <  String>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    function    f()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	20	None	replace
621	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.getNode(),  aliasRef);  [CE]  no  suitable  method  found  for  addAll(Node,Reference)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.getNode(),  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.getNode(),  aliasRef);	  newNodes.addAll(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,Reference)	126	None	replace
622	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.getNode(),  aliasRef.cloneTree(),  newNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.getNode(),  aliasRef.cloneTree(),  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.getNode(),  aliasRef.cloneTree(),  newNode);	  newNodes.addAll(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
623	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.getNode(),  newNode,  aliasRefs);  [CE]  no  suitable  method  found  for  addAll(Node,Node,ReferenceCollection)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.getNode(),  newNode,  aliasRefs);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.getNode(),  newNode,  aliasRefs);	  newNodes.addAll(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,Node,ReferenceCollection)	126	None	replace
624	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.getNode(),  aliasRef.cloneTree());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.getNode(),  aliasRef.cloneTree());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.getNode(),  aliasRef.cloneTree());	  newNodes.addAll(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
625	[BUG]  [BUGGY]  if(newNode!=  null)  {  for(AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  for(AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  for(AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    for(AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	59	None	replace
626	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	62	1	add
627	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	62	1	add
628	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	62	None	add
629	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	62	1	add
630	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	62	1	add
631	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Node  newNode  =  alias.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Node  newNode  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Node  newNode  =  alias.node.cloneTree();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	62	None	add
632	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	62	None	add
633	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  If(newNode!=  null)  {  newNodes.add(newNode);  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  If(newNode!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=    null)    {    newNodes.add(newNode);    }    If(newNode!=  null)  {  newNodes.add(newNode);  }	  	non-compiled	[CE]  ';'  expected	114	None	add
634	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  Node  newNode  =  alias.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  Node  newNode  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=    null)    {    newNodes.add(newNode);    }    Node  newNode  =  alias.node.cloneTree();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	114	None	add
635	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  Node  newNode  =  aliasRefs.getParent();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  Node  newNode  =  aliasRefs.getParent();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=    null)    {    newNodes.add(newNode);    }    Node  newNode  =  aliasRefs.getParent();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	114	None	add
636	[BUG]  [BUGGY]  aliasRefs.replaceChild(alias.node,  aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(alias.node,  aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(alias.node,  aliasRef.getNode(),  newNode);	  aliasRefs.replaceChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
637	[BUG]  [BUGGY]  aliasRefs.replaceChild(aliasRef.getNode(),  newNode,  var);  [CE]  cannot  find  symbol  var  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(aliasRef.getNode(),  newNode,  var);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(aliasRef.getNode(),  newNode,  var);	  aliasRefs.replaceChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol  var	97	None	replace
638	[BUG]  [BUGGY]  if(node!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(node!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(node!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    newNodes.add(node);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  cannot  find  symbol  node	143	None	replace
639	[BUG]  [BUGGY]  if(node!=  null)  {  newNodes.add(node);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [CE]  cannot  find  symbol  node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(node!=  null)  {  newNodes.add(node);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(node!=  null)  {  newNodes.add(node);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    newNodes.add(node);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  cannot  find  symbol  node	143	None	replace
640	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNode  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	newNode  =  alias.node.cloneTree();	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    newNodes.add(node);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	compilable	  [FE]  AssertionFailedError  	143	10	replace
641	[BUG]  [BUGGY]  newNode  =  alias.node.cloneTree();  [FE]  AssertionFailedError  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNode  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNode  =  alias.node.cloneTree();	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    newNodes.add(node);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	compilable	  [FE]  AssertionFailedError  	143	10	replace
642	[BUG]  [BUGGY]  Node  newNode  =  alias.node.removeChild(newNode);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  alias.node.removeChild(newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  alias.node.removeChild(newNode);	  Node    newNode    =    alias.node.cloneParent();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	24	None	replace
643	[BUG]  [BUGGY]  if(newNode!=  null)  {  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	150	None	replace
644	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	150	None	replace
645	[BUG]  [BUGGY]  if(args!=  null)  {  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(args!=  null)  {  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(args!=  null)  {  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	150	None	replace
646	[BUG]  [BUGGY]  newNodes.addAll(newNode,  namespace,  compiler);  [CE]  no  suitable  method  found  for  addAll(Node,GlobalNamespace,AbstractCompiler)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  namespace,  compiler);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  namespace,  compiler);	  newNodes.addAll(newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,GlobalNamespace,AbstractCompiler)	67	None	replace
647	[BUG]  [BUGGY]  newNodes.addAll(newNode,  namespace,  aliasRefs);  [CE]  no  suitable  method  found  for  addAll(Node,GlobalNamespace,ReferenceCollection)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  namespace,  aliasRefs);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  namespace,  aliasRefs);	  newNodes.addAll(newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,GlobalNamespace,ReferenceCollection)	67	None	replace
648	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.ASSIGN)  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.ASSIGN)  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode.getType()  ==  Token.ASSIGN)  {  compiler.reportCodeChange();  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
649	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.node.cloneTree(),  newNode);  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.node.cloneTree(),  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.node.cloneTree(),  newNode);	  newNodes.addAll(aliasRef.cloneTree(),    newNode);    	non-compiled	[CE]  cannot  find  symbol  node	64	None	replace
650	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.getTree(),  newNode);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.getTree(),  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.getTree(),  newNode);	  newNodes.addAll(aliasRef.cloneTree(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
651	[BUG]  [BUGGY]  if(!namespace.scanNewNodes(alias.scope,  newNodes))  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [CE]  'void'  type  not  allowed  here  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(!namespace.scanNewNodes(alias.scope,  newNodes))  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(!namespace.scanNewNodes(alias.scope,  newNodes))  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  'void'  type  not  allowed  here	27	None	replace
652	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(alias.node!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(alias.node!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  IllegalArgumentException  	27	10	replace
653	[BUG]  [BUGGY]  if(alias.node!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(alias.node!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(alias.node!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  IllegalArgumentException  	27	10	replace
654	[BUG]  [BUGGY]  newNodes.add(newNode,  aliasRef.cloneTree(),  newNode);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  aliasRef.cloneTree(),  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  aliasRef.cloneTree(),  newNode);	  newNodes.add(newNode,    aliasRef.cloneTree());    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
655	[BUG]  [BUGGY]  newNodes.add(newNode,  aliasRef.getParent());  [CE]  no  suitable  method  found  for  add(Node,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  aliasRef.getParent());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  aliasRef.getParent());	  newNodes.add(newNode,    aliasRef.cloneTree());    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Node)	100	None	replace
656	[BUG]  [BUGGY]  newNodes.add(newNode,  i,  size);  [CE]  no  suitable  method  found  for  add(Node,int,int)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  i,  size);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  i,  size);	  newNodes.add(newNode,    size);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,int,int)	138	None	replace
657	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.remove(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	141	1	add
658	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.remove(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	141	1	add
659	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.remove(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	141	None	add
660	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Set  <  Node>  newNodes  =  Sets.newHashSet(arguments);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Set  <  Node>  newNodes  =  Sets.newHashSet(arguments);  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.remove(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Set  <  Node>  newNodes  =  Sets.newHashSet(arguments);  setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	141	None	add
661	[BUG]  [BUGGY]  if(newNode!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasVar.replaceChild(aliasVar,  newNode);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasVar.replaceChild(aliasVar,  newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasVar.replaceChild(aliasVar,  newNode);  }	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasVar.replaceChild(aliasVar,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
662	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  1;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasVar.replaceChild(aliasVar,  newNode);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  1;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasVar.replaceChild(aliasVar,  newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  1;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasVar.replaceChild(aliasVar,  newNode);  }	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasVar.replaceChild(aliasVar,    newNode);    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
663	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  alias.node.getNameNode(),  newNode);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  alias.node.getNameNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(aliasRef,  alias.node.getNameNode(),  newNode);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
664	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  this);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  this);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  this);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
665	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode);  namespace.scanNewNodes(alias.scope,  newNodes);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	newNodes.add(newNode);  namespace.scanNewNodes(alias.scope,  newNodes);	          newNodes.add(newNode);    compiler.reportCodeChange();    	compilable	  [FE]  NullPointerException  	33	10	replace
666	[BUG]  [BUGGY]  newNodes.add(newNode);  namespace.scanNewNodes(alias.scope,  newNodes);  [FE]  NullPointerException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode);  namespace.scanNewNodes(alias.scope,  newNodes);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode);  namespace.scanNewNodes(alias.scope,  newNodes);	          newNodes.add(newNode);    compiler.reportCodeChange();    	compilable	  [FE]  NullPointerException  	33	10	replace
667	[BUG]  [BUGGY]  newNodes.add(aliasRef,  aliasRef);  [CE]  no  suitable  method  found  for  add(Reference,Reference)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef,  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef,  aliasRef);	  newNodes.add(aliasRef,    newNode);    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference,Reference)	45	None	replace
668	[BUG]  [BUGGY]  newNodes.add(newNode,  aliasRefs.references);  [CE]  no  suitable  method  found  for  add(Node,List<Reference>)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  aliasRefs.references);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  aliasRefs.references);	  newNodes.add(newNode,    aliasRef.references);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,List<Reference>)	129	None	replace
669	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  alias.node.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef,  alias.node.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(aliasRef,  alias.node.getNode(),  newNode);	  aliasRefs.getParent().replaceChild(aliasRef,    newNode.getNode(),    aliasRefs);    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
670	[BUG]  [BUGGY]  if(newNode!=  null)  {  Node  newNode  =  aliasRefs.getFirstChild();  compiler.reportCodeChange();  }  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  Node  newNode  =  aliasRefs.getFirstChild();  compiler.reportCodeChange();  }  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  Node  newNode  =  aliasRefs.getFirstChild();  compiler.reportCodeChange();  }	  Node    newNode    =    aliasRefs.getFirstChild();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	85	None	replace
671	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.getFirstChild();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.getFirstChild();  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.getFirstChild();  compiler.reportCodeChange();	  Node    newNode    =    aliasRefs.getFirstChild();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	85	None	replace
672	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  UNSAFE_NAMESPACE_WARNING,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,DiagnosticType,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  UNSAFE_NAMESPACE_WARNING,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  newNode,  UNSAFE_NAMESPACE_WARNING,  namespace);	  NodeTraversal.traverse(compiler,    newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,DiagnosticType,GlobalNamespace)	14	None	replace
673	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  alias.node,  newNode,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  alias.node,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  alias.node,  newNode,  namespace);	  NodeTraversal.traverse(compiler,    newNode,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,GlobalNamespace)	14	None	replace
674	[BUG]  [BUGGY]  newNodes.add(newNode,  aliasRef,  namespace,  collector);  [CE]  no  suitable  method  found  for  add(Node,Reference,GlobalNamespace,ReferenceCollectingCallback)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  aliasRef,  namespace,  collector);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  aliasRef,  namespace,  collector);	  newNodes.add(newNode,    aliasRef,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Reference,GlobalNamespace,ReferenceCollectingCallback)	72	None	replace
675	[BUG]  [BUGGY]  newNodes.add(newNode,  aliasRef,  namespace,  compiler);  [CE]  no  suitable  method  found  for  add(Node,Reference,GlobalNamespace,AbstractCompiler)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  aliasRef,  namespace,  compiler);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  aliasRef,  namespace,  compiler);	  newNodes.add(newNode,    aliasRef,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Reference,GlobalNamespace,AbstractCompiler)	72	None	replace
676	[BUG]  [BUGGY]  newNodes.add(alias.node);  NodeTraversal.traverse(compiler,  alias.node,  newNodes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Set<Node>)  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  NodeTraversal.traverse(compiler,  alias.node,  newNodes);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node);    NodeTraversal.traverse(compiler,  alias.node,  newNodes);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Set<Node>)	49	None	add
677	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  alias.node.removeChild(newNode);  newNodes.add(alias.node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	newNodes.add(alias.node);    alias.node.removeChild(newNode);  newNodes.add(alias.node);	  	compilable	  [FE]  RuntimeException  	49	10	add
678	[BUG]  [BUGGY]  newNodes.add(alias.node);  alias.node.removeChild(newNode);  newNodes.add(alias.node);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  alias.node.removeChild(newNode);  newNodes.add(alias.node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node);    alias.node.removeChild(newNode);  newNodes.add(alias.node);	  	compilable	  [FE]  RuntimeException  	49	10	add
679	[BUG]  [BUGGY]  newNodes.add(alias.node);  NodeTraversal.traverse(compiler,  alias.node,  newNodes);  compiler.reportCodeChange();  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Set<Node>)  [FE]        AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(alias.node);  NodeTraversal.traverse(compiler,  alias.node,  newNodes);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(alias.node);    NodeTraversal.traverse(compiler,  alias.node,  newNodes);  compiler.reportCodeChange();	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Set<Node>)	49	None	add
680	[BUG]  [BUGGY]  setTimeout(function()  {  warning(args)  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  setTimeout(function()  {  warning(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	setTimeout(function()  {  warning(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    warning(args)    }    	non-compiled	[CE]  ')'  expected	124	None	replace
681	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	145	None	add
682	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNode!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	145	1	add
683	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNode!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNode!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	145	1	add
684	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	145	1	add
685	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	145	1	add
686	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Node  newNode  =  alias.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Node  newNode  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Node  newNode  =  alias.node.cloneTree();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	145	None	add
687	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	145	None	add
688	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	112	1	add
689	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	112	1	add
690	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	112	1	add
691	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	112	1	add
692	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Node  newNode  =  alias.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Node  newNode  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    Node  newNode  =  alias.node.cloneTree();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	112	None	add
693	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  newNodes.add(node);  }  else  {  compiler.reportCodeChange();  }  [CE]  cannot  find  symbol  node  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  newNodes.add(node);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(node);  }  else  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  cannot  find  symbol  node	112	None	add
694	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	112	None	add
695	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  return  true;  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  return  true;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	112	1	add
696	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  return  true;  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  return  true;  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  return  true;  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	112	1	add
697	[BUG]  [BUGGY]  newNodes.add(aliasRef.node,  var);  [CE]  cannot  find  symbol  node  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.node,  var);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.node,  var);	  newNodes.add(aliasRef.node,    newNode);    	non-compiled	[CE]  cannot  find  symbol  node	46	None	replace
698	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  ==  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  ==  var  args=arguments;setTimeout(function()  {  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  not  a  statement	63	None	replace
699	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasParent.replaceChild(aliasVar,  newNode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasParent.replaceChild(aliasVar,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasParent.replaceChild(aliasVar,  newNode);	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasParent.replaceChild(aliasVar,    newNode);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
700	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasParent.replaceChild(aliasVar,  newNode  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasParent.replaceChild(aliasVar,  newNode  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasVar  =  aliasRefs.getVar(i);  aliasParent.replaceChild(aliasVar,  newNode	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasVar    =    aliasRefs.getVar(i);    aliasParent.replaceChild(aliasVar,    newNode);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
701	[BUG]  [BUGGY]  newNodes.addAll(newNode,  aliasRefs,  aliasRefs);  [CE]  no  suitable  method  found  for  addAll(Node,ReferenceCollection,ReferenceCollection)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  aliasRefs,  aliasRefs);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  aliasRefs,  aliasRefs);	  newNodes.addAll(newNode,    aliasRefs);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,ReferenceCollection,ReferenceCollection)	133	None	replace
702	[BUG]  [BUGGY]  newNodes.addAll(newNode,  aliasRefs,  args);  [CE]  cannot  find  symbol  args  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  aliasRefs,  args);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  aliasRefs,  args);	  newNodes.addAll(newNode,    aliasRefs);    	non-compiled	[CE]  cannot  find  symbol  args	133	None	replace
703	[BUG]  [BUGGY]  newNodes.addAll(newNode,  aliasRefs,  aliasParent);  [CE]  no  suitable  method  found  for  addAll(Node,ReferenceCollection,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  aliasRefs,  aliasParent);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  aliasRefs,  aliasParent);	  newNodes.addAll(newNode,    aliasRefs);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,ReferenceCollection,Node)	133	None	replace
704	[BUG]  [BUGGY]  newNodes.addAll(newNode,  aliasRefs.cloneTree());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  aliasRefs.cloneTree());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  aliasRefs.cloneTree());	  newNodes.addAll(newNode,    aliasRefs);    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
705	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  alias.node,  newNode,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  alias.node,  newNode,  inlineAliases);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  alias.node,  newNode,  inlineAliases);	  NodeTraversal.traverse(compiler,    newNode,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,boolean)	93	None	replace
706	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  inlineAliases,  collector);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,ReferenceCollectingCallback)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  inlineAliases,  collector);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  newNode,  inlineAliases,  collector);	  NodeTraversal.traverse(compiler,    newNode,    inlineAliases);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean,ReferenceCollectingCallback)	93	None	replace
707	[BUG]  [BUGGY]  newNodes.add(aliasRef.var);  [CE]  cannot  find  symbol  var  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(aliasRef.var);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(aliasRef.var);	  newNodes.add(aliasRef.node);    	non-compiled	[CE]  cannot  find  symbol  var	52	None	replace
708	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  newNode  +  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  newNode  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i,  newNode  +  1);	  Node    newNode    =    aliasRefs.references.get(i,    newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	120	None	replace
709	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(newNode,  IR.nullNode());	  	compilable	  [FE]  NullPointerException  	80	10	add
710	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(newNode,  IR.nullNode());	  	compilable	  [FE]  NullPointerException  	80	10	add
711	[BUG]  [BUGGY]  aliasRefs.remove(newNode);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.remove(newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.remove(newNode);	          aliasRefs.remove(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
712	[BUG]  [BUGGY]  aliasRefs.remove(newNode);  namespace.scanNewNodes(alias.scope,  newNodes);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.remove(newNode);  namespace.scanNewNodes(alias.scope,  newNodes);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.remove(newNode);  namespace.scanNewNodes(alias.scope,  newNodes);	          aliasRefs.remove(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
713	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(newNode,  i);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(newNode,  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(newNode,  i);	  Node    newNode    =    aliasRefs.get(newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	88	None	replace
714	[BUG]  [BUGGY]  aliasRef.replaceChild(alias.node,  newNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.replaceChild(alias.node,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.replaceChild(alias.node,  newNode);	  aliasRefs.replaceChild(alias.node,    newNode);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
715	[BUG]  [BUGGY]  aliasRefs.replaceChild(alias.node,  newNode));  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.replaceChild(alias.node,  newNode));  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.replaceChild(alias.node,  newNode));	  aliasRefs.replaceChild(alias.node,    newNode);    	non-compiled	[CE]  ';'  expected	160	None	replace
716	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  this,  inlines);  [CE]  cannot  find  symbol  inlines  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  this,  inlines);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNode,  this,  inlines);	  NodeTraversal.traverse(compiler,    aliasRef,    newNode,    this);    	non-compiled	[CE]  cannot  find  symbol  inlines	13	None	replace
717	[BUG]  [BUGGY]  newNodes.addAll(newNode,  aliasRef.cloneTree());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  aliasRef.cloneTree());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  aliasRef.cloneTree());	  newNodes.addAll(newNode,    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
718	[BUG]  [BUGGY]  newNodes.addAll(newNode,  aliasRef,  aliasParent);  [CE]  no  suitable  method  found  for  addAll(Node,Reference,Node)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(newNode,  aliasRef,  aliasParent);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(newNode,  aliasRef,  aliasParent);	  newNodes.addAll(newNode,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node,Reference,Node)	68	None	replace
719	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.getParent());  [CE]  no  suitable  method  found  for  addAll(Node)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.getParent());  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.getParent());	  newNodes.addAll(aliasRef.getNode());    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node)	125	None	replace
720	[BUG]  [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet(),  args);  [CE]  cannot  find  symbol  Collections  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet(),  args);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Collections.  <  Node>emptySet(),  args);	  newNodes.add(newNode,    Collections.    <    Node>emptySet(),    aliasRefs);    	non-compiled	[CE]  cannot  find  symbol  Collections	158	None	replace
721	[BUG]  [BUGGY]  if(scope.isScope())  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(scope.isScope())  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(scope.isScope())  {  if(newNode!=  null)  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
722	[BUG]  [BUGGY]  if(args!=  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(args!=  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(args!=  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
723	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.FUNCTION)  {  newNodes.add(newNode);  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.FUNCTION)  {  newNodes.add(newNode);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode.getType()  ==  Token.FUNCTION)  {  newNodes.add(newNode);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
724	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getNameNode(i);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.getNameNode(i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.getNameNode(i);	  Node    newNode    =    aliasRefs.getNameNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	87	None	replace
725	[BUG]  [BUGGY]  if(newNode!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasRef    =    aliasRefs.references.get(i);    aliasRef.getParent().replaceChild(aliasRef.getNode()    	non-compiled	[CE]  not  a  statement	101	None	replace
726	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild(aliasRef.getNode()  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild(aliasRef.getNode()  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  aliasRef  =  aliasRefs.references.get(i);  aliasRef.getParent().replaceChild(aliasRef.getNode()  }	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasRef    =    aliasRefs.references.get(i);    aliasRef.getParent().replaceChild(aliasRef.getNode()    	non-compiled	[CE]  ')'  expected	101	None	replace
727	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	139	1	add
728	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	139	1	add
729	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	139	None	add
730	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	139	1	add
731	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	139	1	add
732	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Node  newNode  =  alias.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Node  newNode  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Node  newNode  =  alias.node.cloneTree();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	139	None	add
733	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        namespace.scanNewNodes(alias.scope,        newNodes);        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	139	None	add
734	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.getNode(size);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.getNode(size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.getNode(size);	  Node    newNode    =    aliasRefs.getNode(i);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	104	None	replace
735	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	90	1	add
736	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.remove(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	90	1	add
737	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(node);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [CE]  cannot  find  symbol  node  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(node);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(node);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	non-compiled	[CE]  cannot  find  symbol  node	90	None	add
738	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Node  newNode  =  alias.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  Node  newNode  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Node  newNode  =  alias.node.cloneTree();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	90	None	add
739	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	90	1	add
740	[BUG]  [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	90	1	add
741	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	149	None	add
742	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	149	1	add
743	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	149	1	add
744	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Node  newNode  =  alias.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Node  newNode  =  alias.node.cloneTree();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    Node  newNode  =  alias.node.cloneTree();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	149	None	add
745	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	149	None	add
746	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Set  <  Node>  newNodes  =  Sets.newHashSet(arguments);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Set  <  Node>  newNodes  =  Sets.newHashSet(arguments);  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    Set  <  Node>  newNodes  =  Sets.newHashSet(arguments);  setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	149	None	add
747	[BUG]  [BUGGY]  Set  <  String>  newNodes  =  Sets.newHashSet();  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Set  <  String>  newNodes  =  Sets.newHashSet();  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Set  <  String>  newNodes  =  Sets.newHashSet();  setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    function    f()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	18	None	replace
748	[BUG]  [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet(),  var);  [CE]  cannot  find  symbol  Collections  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  Collections.  <  Node>emptySet(),  var);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  Collections.  <  Node>emptySet(),  var);	  newNodes.add(newNode,    Collections.    <    Node>emptySet(),    namespace);    	non-compiled	[CE]  cannot  find  symbol  Collections	2	None	replace
749	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	154	None	add
750	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  illegal  start  of  expression	154	None	add
751	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNode!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	154	1	add
752	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNode!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNode!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	154	1	add
753	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  illegal  start  of  expression	154	None	add
754	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNode!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  if(newNodes!=  null)  {  if(newNode!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(null);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  if(newNode!=  null)  {  newNodes.add(null);  }  else  {  compiler.reportCodeChange();  }	  	non-compiled	[CE]  illegal  start  of  expression	154	None	add
755	[BUG]  [BUGGY]  newNodes.add(newNode,  aliasRef,  newNode);  [CE]  no  suitable  method  found  for  add(Node,Reference,Node)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  aliasRef,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  aliasRef,  newNode);	  newNodes.add(i,    newNode,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Reference,Node)	119	None	replace
756	[BUG]  [BUGGY]  newNodes.add(node,  aliasRef,  newNode);  [CE]  cannot  find  symbol  node  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(node,  aliasRef,  newNode);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(node,  aliasRef,  newNode);	  newNodes.add(i,    newNode,    aliasRef);    	non-compiled	[CE]  cannot  find  symbol  node	119	None	replace
757	[BUG]  [BUGGY]  aliasRefs.removeChild(newNode,  IOContext.UNKNOWN);  [CE]  cannot  find  symbol  IOContext  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.removeChild(newNode,  IOContext.UNKNOWN);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.removeChild(newNode,  IOContext.UNKNOWN);	  aliasRefs.removeChild(newNode,    var);    	non-compiled	[CE]  cannot  find  symbol  IOContext	6	None	replace
758	[BUG]  [BUGGY]  if(alias.node!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  alias.node.cloneTree();  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(alias.node!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  alias.node.cloneTree();  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(alias.node!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  alias.node.cloneTree();  compiler.reportCodeChange();  }	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    alias.node.cloneTree();    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
759	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  1;  i  <  size;  i++)  {  Node  aliasParent  =  alias.node.cloneTree();  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  1;  i  <  size;  i++)  {  Node  aliasParent  =  alias.node.cloneTree();  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  1;  i  <  size;  i++)  {  Node  aliasParent  =  alias.node.cloneTree();  compiler.reportCodeChange();  }	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    alias.node.cloneTree();    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
760	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	147	1	add
761	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	147	1	add
762	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	147	None	add
763	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	147	None	add
764	[BUG]  [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Set  <  Node>  newNodes  =  Sets.newHashSet(arguments);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  Set  <  Node>  newNodes  =  Sets.newHashSet(arguments);  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=        null)        {        newNodes.add(newNode);        }        else        {        compiler.reportCodeChange();        }        if(newNodes!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    Set  <  Node>  newNodes  =  Sets.newHashSet(arguments);  setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	147	None	add
765	[BUG]  [BUGGY]  newNodes.addAll(aliasRef.references);  [CE]  cannot  find  symbol  references  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(aliasRef.references);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(aliasRef.references);	  newNodes.addAll(aliasRef.newNode);    	non-compiled	[CE]  cannot  find  symbol  references	65	None	replace
766	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
767	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getFirstChild(),  newNode);  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getFirstChild(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef.getFirstChild(),  newNode);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
768	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.clone();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.clone();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.clone();	  Node    newNode    =    aliasRefs.cloneTree();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	41	None	replace
769	[BUG]  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  alias.node.cloneTree();  setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  alias.node.cloneTree();  setTimeout(function()  {  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	58	None	replace
770	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(size  +  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(size  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(size  +  1);	  Node    newNode    =    aliasRefs.get(i    +    1);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	82	None	replace
771	[BUG]  [BUGGY]  if(newNode!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	9	None	replace
772	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.NAME)  {  setTimeout(function()  {  alarm(args)  }  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.NAME)  {  setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode.getType()  ==  Token.NAME)  {  setTimeout(function()  {  alarm(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alarm(args)    }    	non-compiled	[CE]  ')'  expected	95	None	replace
773	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.ASSIGN)  {  setTimeout(function()  {  alarm(args)  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.ASSIGN)  {  setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode.getType()  ==  Token.ASSIGN)  {  setTimeout(function()  {  alarm(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alarm(args)    }    	non-compiled	[CE]  ')'  expected	95	None	replace
774	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(size  +  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(size  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(size  +  1);	  Node    newNode    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	53	None	replace
775	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(alias.node!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	if(alias.node!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Node    newNode    =    alias.node.cloneTree();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	144	1	replace
776	[BUG]  [BUGGY]  if(alias.node!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(alias.node!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(alias.node!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    Node    newNode    =    alias.node.cloneTree();    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	144	1	replace
777	[BUG]  [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  newNodes.add(newNode);  compiler.reportCodeChange();  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  newNodes.add(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                newNodes.add(newNode);    compiler.reportCodeChange();    Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  newNodes.add(newNode);  compiler.reportCodeChange();	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	32	None	add
778	[BUG]  [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  Node  newNodes  =  Sets.newHashSet(newNode);  compiler.reportCodeChange();  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  Node  newNodes  =  Sets.newHashSet(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                newNodes.add(newNode);    compiler.reportCodeChange();    Node  newNodes  =  Sets.newHashSet(newNode);  compiler.reportCodeChange();	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	32	None	add
779	[BUG]  [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  aliasRefs.remove(newNode);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          newNodes.add(newNode);  compiler.reportCodeChange();  aliasRefs.remove(newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                newNodes.add(newNode);    compiler.reportCodeChange();    aliasRefs.remove(newNode);  compiler.reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	32	None	add
780	[BUG]  [BUGGY]  newNodes.add(number,  aliasRef);  [CE]  cannot  find  symbol  number  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(number,  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(number,  aliasRef);	  newNodes.add(node,    aliasRef);    	non-compiled	[CE]  cannot  find  symbol  number	99	None	replace
781	[BUG]  [BUGGY]  newNodes.add(i,  aliasRef);  [CE]  no  suitable  method  found  for  add(int,Reference)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(i,  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(i,  aliasRef);	  newNodes.add(node,    aliasRef);    	non-compiled	[CE]  no  suitable  method  found  for  add(int,Reference)	99	None	replace
782	[BUG]  [BUGGY]  setTimeout(function()  {  alarm(args)  }  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  setTimeout(function()  {  alarm(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	setTimeout(function()  {  alarm(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    compiler.reportCodeChange();    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alarm(args)    }    	non-compiled	[CE]  ')'  expected	123	None	replace
783	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  this.namespace);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  this.namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRefs.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  this.namespace);	  aliasRefs.getParent().replaceChild(aliasRef.getNameNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
784	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.getNext();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.getNext();  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.getNext();  compiler.reportCodeChange();	  Node    newNode    =    aliasRefs.getNext();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	39	None	replace
785	[BUG]  [BUGGY]  newNodes.add(newNode,  aliasRef,  i  +  1);  [CE]  no  suitable  method  found  for  add(Node,Reference,int)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  aliasRef,  i  +  1);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  aliasRef,  i  +  1);	  newNodes.add(newNode,    aliasRef,    i);    	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Reference,int)	74	None	replace
786	[BUG]  [BUGGY]  if(newNode!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  newNodes.get(i);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  newNodes.get(i);  compiler.reportCodeChange();  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  newNodes.get(i);  compiler.reportCodeChange();  }	          if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    newNodes.get(i);    compiler.reportCodeChange();    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
787	[BUG]  [BUGGY]  newNodes.add(newNode.getNode(),  aliasRef);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode.getNode(),  aliasRef);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode.getNode(),  aliasRef);	  newNodes.add(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
788	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.NAME)  {  setTimeout(function()  {  warning(args)  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.NAME)  {  setTimeout(function()  {  warning(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode.getType()  ==  Token.NAME)  {  setTimeout(function()  {  warning(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    warning(args)    }    	non-compiled	[CE]  ')'  expected	96	None	replace
789	[BUG]  [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.ASSIGN)  {  setTimeout(function()  {  warning(args)  }  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNode!=  null)  {  if(newNode.getType()  ==  Token.ASSIGN)  {  setTimeout(function()  {  warning(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNode!=  null)  {  if(newNode.getType()  ==  Token.ASSIGN)  {  setTimeout(function()  {  warning(args)  }	  if(newNode!=    null)    {    newNodes.add(newNode);    }    else    {    namespace.scanNewNodes(alias.scope,    newNodes);    }    if(newNodes!=    null)    {    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    warning(args)    }    	non-compiled	[CE]  ')'  expected	96	None	replace
790	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(i,  newNode).removeChild(newNode);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(i,  newNode).removeChild(newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(i,  newNode).removeChild(newNode);	  Node    newNode    =    aliasRefs.get(i,    newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	89	None	replace
791	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.get(i,  newNode).replaceChild(alias.node,  newNode);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.get(i,  newNode).replaceChild(alias.node,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.get(i,  newNode).replaceChild(alias.node,  newNode);	  Node    newNode    =    aliasRefs.get(i,    newNode);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	89	None	replace
792	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i,  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	Node  newNode  =  aliasRefs.references.get(i,  1);	  Node    newNode    =    aliasRefs.references.get(i,    size);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	54	None	replace
793	[BUG]  [BUGGY]  newNodes.add(newNode,  aliasRef,  args);  [CE]  cannot  find  symbol  args  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(newNode,  aliasRef,  args);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(newNode,  aliasRef,  args);	  newNodes.add(newNode,    aliasVar,    aliasRef);    	non-compiled	[CE]  cannot  find  symbol  args	73	None	replace
794	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasRef.getParent().replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasRef.getParent().replaceChild(alias.node,  newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	26	10	add
795	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasRef.getParent().replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasRef.getParent().replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasRef.getParent().replaceChild(alias.node,  newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	26	10	add
796	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  alias.node.replaceChild(newNode,  IR.nullNode());  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    alias.node.replaceChild(newNode,  IR.nullNode());  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	26	10	add
797	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  alias.node.replaceChild(newNode,  IR.nullNode());  compiler.reportCodeChange();  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  alias.node.replaceChild(newNode,  IR.nullNode());  compiler.reportCodeChange();  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    alias.node.replaceChild(newNode,  IR.nullNode());  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	26	10	add
798	[BUG]  [BUGGY]  newNodes.add(node,  newNode,  namespace);  [CE]  cannot  find  symbol  node  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.add(node,  newNode,  namespace);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.add(node,  newNode,  namespace);	  newNodes.add(i,    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol  node	48	None	replace
799	[BUG]  [BUGGY]  newNodes.addAll(alias.node);  [CE]  no  suitable  method  found  for  addAll(Node)  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  newNodes.addAll(alias.node);  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	newNodes.addAll(alias.node);	  newNodes.add(alias.node);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Node)	50	None	replace
800	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  aliasRefs.getParent();  aliasRefs.replaceChild(aliasRef.getNode()  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  aliasRefs.getParent();  aliasRefs.replaceChild(aliasRef.getNode()  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  aliasRefs.getParent();  aliasRefs.replaceChild(aliasRef.getNode()	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    aliasRefs.getParent();    aliasRefs.replaceChild(aliasRef.getNode(),    newNode);    }    	non-compiled	[CE]  ')'  expected	102	None	replace
801	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  aliasRefs.getParent();  aliasRefs.replaceChild(aliasRef.getNode(),  new  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  aliasRefs.getParent();  aliasRefs.replaceChild(aliasRef.getNode(),  new  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  aliasRefs.getParent();  aliasRefs.replaceChild(aliasRef.getNode(),  new	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    aliasRefs.getParent();    aliasRefs.replaceChild(aliasRef.getNode(),    newNode);    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
802	[BUG]  [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  aliasRefs.getParent();  aliasRefs.replaceChild(aliasRef.getNode  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  aliasRefs.getParent();  aliasRefs.replaceChild(aliasRef.getNode  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	if(newNodes!=  null)  {  for(int  i  =  0;  i  <  size;  i++)  {  Node  aliasParent  =  aliasRefs.getParent();  aliasRefs.replaceChild(aliasRef.getNode	  if(newNodes!=    null)    {    for(int    i    =    0;    i    <    size;    i++)    {    Node    aliasParent    =    aliasRefs.getParent();    aliasRefs.replaceChild(aliasRef.getNode(),    newNode);    }    	non-compiled	[CE]  ')'  expected	102	None	replace
803	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  return  function()  {  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  return  function()  {  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  return  function()  {  args=arguments;setTimeout(function()  {  alert(args)  }	  junit.framework.AssertionFailedError:    Expected:    newNode()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	92	None	replace
804	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode);	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
805	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	add	aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getParent().replaceChild(newNode,  IR.nullNode());	  	compilable	  [FE]  NullPointerException  	34	10	add
806	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getParent().replaceChild(newNode,  IR.nullNode());	  	compilable	  [FE]  NullPointerException  	34	10	add
807	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().replaceChild(aliasRef.getVar(),  newNode);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().replaceChild(aliasRef.getVar(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  return  true;  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	228	228	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getParent().replaceChild(aliasRef.getVar(),  newNode);	  	non-compiled	[CE]  cannot  find  symbol	34	None	add
