bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	add	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	13	1	replace
2	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	13	1	replace
3	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
4	[BUG]  [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer	13	None	replace
5	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1);	  Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
6	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  aliasRefs.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Collection  <  Node>  newNodes  =  aliasRefs.newHashSetWithExpectedSize(size  -  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  aliasRefs.newHashSetWithExpectedSize(size  -  1);	  Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
7	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1);	  Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
8	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Collection  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  1);	  Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
9	[BUG]  [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);	  if(size    >    0)    {    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer	11	None	replace
10	[BUG]  [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  int  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);	  if(size    >    0)    {    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  int	11	None	replace
11	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();	      if    (aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  Integer  size  =  aliasRefs.references.size();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Integer  size  =  aliasRefs.references.size();  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  size  =  aliasRefs.references.size();	      if    (aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	4	None	replace
13	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  }  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  }  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  }	      if    (aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	4	None	replace
14	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references	      if    (aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.    	non-compiled	[CE]  ';'  expected	4	None	replace
15	[BUG]  [BUGGY]  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);	  ArrayList    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>	5	None	replace
16	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  ArrayList  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1);	  ArrayList    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
17	[BUG]  [BUGGY]  List  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  List  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	List  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1);	  ArrayList    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
18	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  ArrayList  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1);	  ArrayList    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
19	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  +  1;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  int  size  =  aliasRefs.references.size()  +  1;  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  +  1;	      int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	1	None	replace
20	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  -  1;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  int  size  =  aliasRefs.references.size()  -  1;  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  -  1;	      int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	1	None	replace
21	[BUG]  [BUGGY]  int  size  =  aliasRefs.firstReferenceIsAssigningDeclaration();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  int  size  =  aliasRefs.firstReferenceIsAssigningDeclaration();  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.firstReferenceIsAssigningDeclaration();	      int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	1	None	replace
22	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  *  2;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  int  size  =  aliasRefs.references.size()  *  2;  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  *  2;	      int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	1	None	replace
23	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  }  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  }  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  }	      if    (aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	2	None	replace
24	[BUG]  [BUGGY]  int  size  =  alias.references.size();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  int  size  =  alias.references.size();  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  alias.references.size();	      if    (aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.size();    }    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	3	None	replace
25	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	7	None	add
26	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    int  size  =  aliasRefs.references.size();	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	7	None	add
27	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
28	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	7	None	add
29	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	7	None	add
30	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Integer  size  =  aliasRefs.references.size();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Integer  size  =  aliasRefs.references.size();  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Integer  size  =  aliasRefs.references.size();	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	7	None	add
31	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
32	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
33	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  >>  ';'  expected  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  int  size  =  aliasRefs.references.size()  >>  ';'  expected  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  >>  ';'  expected	      if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.size()    	non-compiled	[CE]  ';'  expected	9	None	replace
34	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  >>  ';'  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  int  size  =  aliasRefs.references.size()  >>  ';'  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  >>  ';'	      if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.size()    	non-compiled	[CE]  ';'  expected	9	None	replace
35	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  [Delete]  ';'  expected  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  int  size  =  aliasRefs.references.size()  [Delete]  ';'  expected  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  [Delete]  ';'  expected	      if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.size()    	non-compiled	[CE]  ';'  expected	9	None	replace
36	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	add
37	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  aliasRefs.references.size();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  aliasRefs.references.size();  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    int  size  =  aliasRefs.references.size();	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	add
38	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	add
39	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Set  <  Node>  newNodes  =  Sets.newHashSet(size  /  1);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Set  <  Node>  newNodes  =  Sets.newHashSet(size  /  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Set  <  Node>  newNodes  =  Sets.newHashSet(size  /  1);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	add
40	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  setTimeout(function()  {  alert(args)  }  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	12	None	add
41	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Integer  size  =  aliasRefs.references.size();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Integer  size  =  aliasRefs.references.size();  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Integer  size  =  aliasRefs.references.size();	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	add
42	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	10	None	replace
43	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	10	None	replace
44	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1);  [CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;	10	None	replace
45	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	10	None	replace
46	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	12	None	add
47	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	12	None	add
48	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=null;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=null;setTimeout(function()  {  alert(args)  }  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=null;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	12	None	add
49	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=array;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=array;setTimeout(function()  {  alert(args)  }  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=array;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	12	None	add
50	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm(args)  }	  	non-compiled	[CE]  not  a  statement	12	None	add
51	[BUG]  [BUGGY]  if(aliasRefs!=  null)  {  int  size  =  aliasRefs.references.size();  }  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  if(aliasRefs!=  null)  {  int  size  =  aliasRefs.references.size();  }  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs!=  null)  {  int  size  =  aliasRefs.references.size();  }	      if    (aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	2	None	replace
52	[BUG]  [BUGGY]  Integer  args  =  aliasRefs.references.get(arguments.size()  -  1);  [CE]  cannot  find  symbol  arguments  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Integer  args  =  aliasRefs.references.get(arguments.size()  -  1);  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  aliasRefs.references.get(arguments.size()  -  1);	      if    (aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  cannot  find  symbol  arguments	2	None	replace
53	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  ArrayList  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  1);	  ArrayList    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
54	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	add	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	13	1	replace
55	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	13	1	replace
56	[BUG]  [BUGGY]  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [CE]  cannot  find  symbol  Node  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  cannot  find  symbol  Node	13	None	replace
57	[BUG]  [BUGGY]  if(size  >  1)  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [CE]  cannot  find  symbol  newNodes  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  if(size  >  1)  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(size  >  1)  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }	  if(size    >    0)    {    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  cannot  find  symbol  newNodes	11	None	replace
58	[BUG]  [BUGGY]  if(size  >  0)  {  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  if(size  >  0)  {  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(size  >  0)  {  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }	  if(size    >    0)    {    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>	11	None	replace
59	[BUG]  [BUGGY]  if(size  >  0)  {  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  if(size  >  0)  {  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(size  >  0)  {  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }	  if(size    >    0)    {    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	11	None	replace
60	[BUG]  [BUGGY]  if(size  >  0)  {  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  if(size  >  0)  {  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(size  >  0)  {  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }	  if(size    >    0)    {    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
61	[BUG]  [BUGGY]  Integer  args  =  aliasRefs.references.size();  [CE]  cannot  find  symbol  newNodes  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Integer  args  =  aliasRefs.references.size();  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  aliasRefs.references.size();	      if    (aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.    	non-compiled	[CE]  cannot  find  symbol  newNodes	4	None	replace
62	[BUG]  [BUGGY]  Integer  newNodes  =  aliasRefs.references.size();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Integer  newNodes  =  aliasRefs.references.size();  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  aliasRefs.references.size();	      if    (aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
63	[BUG]  [BUGGY]  Integer  args  =  alias.references.size();  [CE]  cannot  find  symbol  references  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Integer  args  =  alias.references.size();  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  alias.references.size();	      if    (aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.    	non-compiled	[CE]  cannot  find  symbol  references	4	None	replace
64	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  +  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  +  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  +  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	10	None	replace
65	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()!=  ';'  expected  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  int  size  =  aliasRefs.references.size()!=  ';'  expected  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()!=  ';'  expected	      if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.size()    	non-compiled	[CE]  ';'  expected	9	None	replace
66	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  >=  ';'  expected  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  int  size  =  aliasRefs.references.size()  >=  ';'  expected  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  >=  ';'  expected	      if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.size()    	non-compiled	[CE]  ';'  expected	9	None	replace
67	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  type  Node  does  not  take  parameters  [FE]    IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  	non-compiled	[CE]  type  Node  does  not  take  parameters	7	None	add
68	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	7	None	add
69	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Collections.sort(newNodes);  [CE]  cannot  find  symbol  Collections  [FE]        IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Collections.sort(newNodes);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Collections.sort(newNodes);	  	non-compiled	[CE]  cannot  find  symbol  Collections	7	None	add
70	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  -  2;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  int  size  =  aliasRefs.references.size()  -  2;  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  -  2;	      int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	1	None	replace
71	[BUG]  [BUGGY]  int  size  =  aliasRefs.firstReferenceIsWellDefined();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  int  size  =  aliasRefs.firstReferenceIsWellDefined();  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.firstReferenceIsWellDefined();	      int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	1	None	replace
72	[BUG]  [BUGGY]  int  size  =  aliasRefs.getSize();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  int  size  =  aliasRefs.getSize();  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.getSize();	      int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	1	None	replace
73	[BUG]  [BUGGY]  if(size  >  0)  {  Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  if(size  >  0)  {  Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(size  >  0)  {  Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }	  if(size    >    0)    {    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
74	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	10	None	replace
75	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	add	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	8	1	replace
76	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	8	1	replace
77	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [CE]  type  Node  does  not  take  parameters  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);	  	non-compiled	[CE]  type  Node  does  not  take  parameters	12	None	add
78	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
79	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	add
80	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	7	None	add
81	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
82	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  Node  [FE]        IllegalArgumentException    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  	non-compiled	[CE]  cannot  find  symbol  Node	7	None	add
83	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [BUGGY]    for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
84	[BUG]  [BUGGY]  if(aliasRefs.isAssignedOnce())  {  int  size  =  aliasRefs.references.size();  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  if(aliasRefs.isAssignedOnce())  {  int  size  =  aliasRefs.references.size();  }  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isAssignedOnce())  {  int  size  =  aliasRefs.references.size();  }	      if    (aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
85	[BUG]  [BUGGY]  if(aliasRefs.isAssignedOnce()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  if(aliasRefs.isAssignedOnce()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isAssignedOnce()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references	      if    (aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.    	non-compiled	[CE]  ';'  expected	4	None	replace
86	[BUG]  [BUGGY]  if(aliasRefs.isAssignedOnce()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  if(aliasRefs.isAssignedOnce()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isAssignedOnce()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references	      if    (aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.    	non-compiled	[CE]  ';'  expected	4	None	replace
87	[BUG]  [BUGGY]  if(aliasRefs.isAssignedOnce()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();    [BUGGY]  if(aliasRefs.isAssignedOnce()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.  [BUGGY]    Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isAssignedOnce()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.	      if    (aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.    	non-compiled	[CE]  <identifier>  expected	4	None	replace
