bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [CE]  type  Node  does  not  take  parameters  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Node    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  type  Node  does  not  take  parameters	77	None	replace
2	[BUG]  [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Node    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer	77	None	replace
3	[BUG]  [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [CE]  type  Node  does  not  take  parameters  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Node    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  type  Node  does  not  take  parameters	77	None	replace
4	[BUG]  [BUGGY]  Integer  args  =  aliasRefs.references.get(var.size()  -  1);  [CE]  cannot  find  symbol  var  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  args  =  aliasRefs.references.get(var.size()  -  1);  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  aliasRefs.references.get(var.size()  -  1);	  Integer    args    =    aliasRefs.references.get(arguments.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  var	52	None	replace
5	[BUG]  [BUGGY]  Integer  args  =  aliasRefs.references.get(size  -  1);  [CE]  incompatible  types  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  args  =  aliasRefs.references.get(size  -  1);  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  aliasRefs.references.get(size  -  1);	  Integer    args    =    aliasRefs.references.get(arguments.size()    -    1);    	non-compiled	[CE]  incompatible  types	52	None	replace
6	[BUG]  [BUGGY]  Integer  args  =  aliasRefs.references.get(variables.size()  -  1);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  args  =  aliasRefs.references.get(variables.size()  -  1);  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  aliasRefs.references.get(variables.size()  -  1);	  Integer    args    =    aliasRefs.references.get(arguments.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  	52	None	replace
7	[BUG]  [BUGGY]  Integer  args  =  aliasRefs.references.get(namespace.size()  -  1);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  args  =  aliasRefs.references.get(namespace.size()  -  1);  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  aliasRefs.references.get(namespace.size()  -  1);	  Integer    args    =    aliasRefs.references.get(arguments.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
8	[BUG]  [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);	  Integer    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer	4	None	replace
9	[BUG]  [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);	  Integer    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer	4	None	replace
10	[BUG]  [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1);	  Integer    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer	4	None	replace
11	[BUG]  [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  3);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  3);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  3);	  Integer    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer	4	None	replace
12	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSet(size  /  1);  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSet(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSet(size  /  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Set    <    Node>    newNodes    =    Sets.newHashSet(size    /    1);    	non-compiled	[CE]  incompatible  types	39	None	replace
13	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSet(size  /  1);  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSet(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSet(size  /  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Set    <    Node>    newNodes    =    Sets.newHashSet(size    /    1);    	non-compiled	[CE]  incompatible  types	39	None	replace
14	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSet(size  /  1);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSet(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  Sets.newHashSet(size  /  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Set    <    Node>    newNodes    =    Sets.newHashSet(size    /    1);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
15	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Integer  size  =  alias  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Integer  size  =  alias  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Integer  size  =  alias	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  ';'  expected	41	None	replace
16	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Integer  size  =  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Integer  size  =  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Integer  size  =	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
17	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  ';'  expected	41	None	replace
18	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Int  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Int  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Int	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  not  a  statement	41	None	replace
19	[BUG]  [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  Integer    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer	9	None	replace
20	[BUG]  [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1);  [CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1);	  Integer    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;	9	None	replace
21	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	1	None	add
22	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  int  size  =  aliasRefs.references.size();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  int  size  =  aliasRefs.references.size();  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    int  size  =  aliasRefs.references.size();	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	1	None	add
23	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  Set  <  Node>  newNodes  =  Sets.newHashSet(size  /  2);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  Set  <  Node>  newNodes  =  Sets.newHashSet(size  /  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    Set  <  Node>  newNodes  =  Sets.newHashSet(size  /  2);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	1	None	add
24	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	1	None	add
25	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  Integer  size  =  aliasRefs.references.size();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  Integer  size  =  aliasRefs.references.size();  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    Integer  size  =  aliasRefs.references.size();	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	1	None	add
26	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  int  size  =  aliasRefs.references.size();  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  int  size  =  aliasRefs.references.size();  setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    int  size  =  aliasRefs.references.size();  setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	1	None	add
27	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
28	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	46	None	replace
29	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]              IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	28	None	replace
30	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  2);  [CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;	28	None	replace
31	[BUG]  [BUGGY]  List  <  Node>  newNodes  =  Lists.newArrayListWithExpectedSize(size  -  1);  [CE]  method  scanNewNodes  in  class  GlobalNamespace  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  List  <  Node>  newNodes  =  Lists.newArrayListWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	List  <  Node>  newNodes  =  Lists.newArrayListWithExpectedSize(size  -  1);	  List    <    Node>    newNodes    =    Lists.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  method  scanNewNodes  in  class  GlobalNamespace  cannot  be  applied  to  given  types;	17	None	replace
32	[BUG]  [BUGGY]  List  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  List  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	List  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  2);	  List    <    Node>    newNodes    =    Lists.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
33	[BUG]  [BUGGY]  List  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  Collections  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  List  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	List  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1);	  ArrayList    <    Node>    newNodes    =    Collections.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol  Collections	18	None	replace
34	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  Collections  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1);	  ArrayList    <    Node>    newNodes    =    Collections.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol  Collections	18	None	replace
35	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  ArrayList  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);	  ArrayList    <    Node>    newNodes    =    Collections.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
36	[BUG]  [BUGGY]  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);	  ArrayList    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>	83	None	replace
37	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  /  1);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  ArrayList  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  /  1);	  ArrayList    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
38	[BUG]  [BUGGY]  List  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  /  1);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  List  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	List  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  /  1);	  ArrayList    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
39	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  /  1);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  ArrayList  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  /  1);	  ArrayList    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
40	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  2);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  2);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    +    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	43	None	replace
41	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  +  1);  [CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  +  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    +    1);    	non-compiled	[CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;	43	None	replace
42	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  3);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  3);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  3);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    +    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	43	None	replace
43	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);	  Collection    <    Node>    newNodes    =    Collections.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
44	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size,  size  -  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size,  size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size,  size  -  1);	  Collection    <    Node>    newNodes    =    Collections.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
45	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  /  1);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  /  1);	  Collection    <    Node>    newNodes    =    Collections.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
46	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  +  1);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  +  1);	  Collection    <    Node>    newNodes    =    Collections.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
47	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	42	None	replace
48	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	42	None	replace
49	[BUG]  [BUGGY]  int  size  =  alias.references.size()  +  1;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  alias.references.size()  +  1;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  alias.references.size()  +  1;	  int    size    =    alias.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	24	None	replace
50	[BUG]  [BUGGY]  int  size  =  alias.references.size()  -  1;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  alias.references.size()  -  1;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  alias.references.size()  -  1;	  int    size    =    alias.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	24	None	replace
51	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  ArrayList.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  ArrayList  <  Node>  newNodes  =  ArrayList.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  ArrayList.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
52	[BUG]  [BUGGY]  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>  [FE]              IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>	27	None	replace
53	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
54	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  -  ';'  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  -  ';'  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  -  ';'	  int    size    =    aliasRefs.references.size()    >>    ';'    	non-compiled	[CE]  ';'  expected	34	None	replace
55	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  +  ';'  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  +  ';'  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  +  ';'	  int    size    =    aliasRefs.references.size()    >>    ';'    	non-compiled	[CE]  ';'  expected	34	None	replace
56	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  +  1;'  [CE]  illegal  line  end  in  character  literal  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  +  1;'  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  +  1;'	  int    size    =    aliasRefs.references.size()    >>    ';'    	non-compiled	[CE]  illegal  line  end  in  character  literal	34	None	replace
57	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	add	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	55	1	replace
58	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	55	1	replace
59	[BUG]  [BUGGY]  Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);	  if(size    >    0)    {    Collections.    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
60	[BUG]  [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  int  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  int    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  int	10	None	replace
61	[BUG]  [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  int  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1);	  int    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  int	10	None	replace
62	[BUG]  [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1);  [CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1);	  int    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;	10	None	replace
63	[BUG]  [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  int  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);	  int    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  int	10	None	replace
64	[BUG]  [BUGGY]  List  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  Arrays  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  List  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	List  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  1);	  ArrayList    <    Node>    newNodes    =    Arrays.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol  Arrays	53	None	replace
65	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  Arrays  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  1);	  ArrayList    <    Node>    newNodes    =    Arrays.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol  Arrays	53	None	replace
66	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }	  if(size    >    0)    {    List    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>	58	None	replace
67	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1	  if(size    >    0)    {    List    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  ')'  expected	58	None	replace
68	[BUG]  [BUGGY]  Integer  newNodes  =  aliasRefs.firstReferenceIsAssigningDeclaration().references.size();  [CE]  boolean  cannot  be  dereferenced  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  newNodes  =  aliasRefs.firstReferenceIsAssigningDeclaration().references.size();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  aliasRefs.firstReferenceIsAssigningDeclaration().references.size();	  Integer    newNodes    =    aliasRefs.references.size();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	62	None	replace
69	[BUG]  [BUGGY]  Integer  newNodes  =  alias.references.size();  [CE]  cannot  find  symbol  references  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  newNodes  =  alias.references.size();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  alias.references.size();	  Integer    newNodes    =    aliasRefs.references.size();    	non-compiled	[CE]  cannot  find  symbol  references	62	None	replace
70	[BUG]  [BUGGY]  Integer  newNodes  =  aliasRefs.node.references.size();  [CE]  cannot  find  symbol  node  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  newNodes  =  aliasRefs.node.references.size();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  aliasRefs.node.references.size();	  Integer    newNodes    =    aliasRefs.references.size();    	non-compiled	[CE]  cannot  find  symbol  node	62	None	replace
71	[BUG]  [BUGGY]  timeout  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	add	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size);    	compilable	timeout	76	1	replace
72	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1);  timeout  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size);    	compilable	timeout	76	1	replace
73	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
74	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
75	[BUG]  [BUGGY]  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>	76	None	replace
76	[BUG]  [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]  [FE]        IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    List    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]	80	None	replace
77	[BUG]  [BUGGY]  float  size  =  aliasRefs.references.size();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  float  size  =  aliasRefs.references.size();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	float  size  =  aliasRefs.references.size();	  int    size    =    aliasRefs.references.size()    -    2;    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	70	None	replace
78	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    int    size    =    aliasRefs.references.size();    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	68	None	replace
79	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	54	None	add
80	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  int  size  =  aliasRefs.references.size();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  int  size  =  aliasRefs.references.size();  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    int  size  =  aliasRefs.references.size();	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	54	None	add
81	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	54	None	add
82	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  Integer  size  =  aliasRefs.references.size();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  Integer  size  =  aliasRefs.references.size();  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    Integer  size  =  aliasRefs.references.size();	  	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	54	None	add
83	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	54	None	add
84	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  Integer  args  =  Sets.newHashSetWithExpectedSize(size  *  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  Integer  args  =  Sets.newHashSetWithExpectedSize(size  *  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    Integer  args  =  Sets.newHashSetWithExpectedSize(size  *  1);	  	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer	54	None	add
85	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  +  2;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  +  2;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  +  2;	  int    size    =    aliasRefs.references.size()    *    2;    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	22	None	replace
86	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=null;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	48	None	replace
87	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(namespace,  size  -  1);  [CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(namespace,  size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(namespace,  size  -  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size,    size    -    1);    	non-compiled	[CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;	44	None	replace
88	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  aliasRefs.length  -  1);  [CE]  cannot  find  symbol  length  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  aliasRefs.length  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  aliasRefs.length  -  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size,    size    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	44	None	replace
89	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1,  aliasRefs.node);  [CE]  cannot  find  symbol  node  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1,  aliasRefs.node);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1,  aliasRefs.node);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size,    size    -    1);    	non-compiled	[CE]  cannot  find  symbol  node	44	None	replace
90	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  aliasRefs.references  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  aliasRefs.references  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  aliasRefs.references  -  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size,    size    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	44	None	replace
91	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  aliasRefs.references.size  -  1);  [CE]  cannot  find  symbol  size  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  aliasRefs.references.size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  aliasRefs.references.size  -  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size,    size    -    1);    	non-compiled	[CE]  cannot  find  symbol  size	44	None	replace
92	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.getSize();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.getSize();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.getSize();	  int    size    =    aliasRefs.getSize();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	72	None	replace
93	[BUG]  [BUGGY]  int  size  =  aliasRefs.getSize()  +  1;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.getSize()  +  1;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.getSize()  +  1;	  int    size    =    aliasRefs.getSize();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	72	None	replace
94	[BUG]  [BUGGY]  int  size  =  aliasRefs.getSize()  -  1;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.getSize()  -  1;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.getSize()  -  1;	  int    size    =    aliasRefs.getSize();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	72	None	replace
95	[BUG]  [BUGGY]  Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Collections.    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
96	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  ArrayList  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  2);	  ArrayList    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
97	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  2);	  Collection    <    Node>    newNodes    =    Arrays.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
98	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Lists.newArrayListWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Lists.newArrayListWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Lists.newArrayListWithExpectedSize(size  -  1);	  Collection    <    Node>    newNodes    =    Arrays.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
99	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionF  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionF  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionF	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=array;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	49	None	replace
100	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.firstReferenceIsWellDefined();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.firstReferenceIsWellDefined();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.firstReferenceIsWellDefined();	  int    size    =    aliasRefs.firstReferenceIsWellDefined();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	71	None	replace
101	[BUG]  [BUGGY]  int  size  =  aliasRefs.firstReferenceIsWellDefined()  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.firstReferenceIsWellDefined()  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.firstReferenceIsWellDefined()  &&  aliasRefs.isAssignedOnceInLifetime();	  int    size    =    aliasRefs.firstReferenceIsWellDefined();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	71	None	replace
102	[BUG]  [BUGGY]  int  size  =  aliasRefs.firstReferenceIsWellDefined()  -  1;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.firstReferenceIsWellDefined()  -  1;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.firstReferenceIsWellDefined()  -  1;	  int    size    =    aliasRefs.firstReferenceIsWellDefined();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	71	None	replace
103	[BUG]  [BUGGY]  int  size  =  aliasRefs.firstReferenceIsAssignedOnceInLifetime();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.firstReferenceIsAssignedOnceInLifetime();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.firstReferenceIsAssignedOnceInLifetime();	  int    size    =    aliasRefs.firstReferenceIsWellDefined();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	71	None	replace
104	[BUG]  [BUGGY]  Integer  args  =  aliasRefs.firstReferenceIsAssigningDeclaration().references.size();  [CE]  boolean  cannot  be  dereferenced  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  args  =  aliasRefs.firstReferenceIsAssigningDeclaration().references.size();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  aliasRefs.firstReferenceIsAssigningDeclaration().references.size();	  Integer    args    =    alias.references.size();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	63	None	replace
105	[BUG]  [BUGGY]  Integer  args  =  alias.refs.size();  [CE]  cannot  find  symbol  refs  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  args  =  alias.refs.size();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  alias.refs.size();	  Integer    args    =    alias.references.size();    	non-compiled	[CE]  cannot  find  symbol  refs	63	None	replace
106	[BUG]  [BUGGY]  Integer  args  =  aliasRefs.firstReferenceIsAssigningDeclaration();  [CE]  incompatible  types  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  args  =  aliasRefs.firstReferenceIsAssigningDeclaration();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  aliasRefs.firstReferenceIsAssigningDeclaration();	  Integer    args    =    alias.references.size();    	non-compiled	[CE]  incompatible  types	63	None	replace
107	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
108	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.firstReferenceIsAssigningDeclaration();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.firstReferenceIsAssigningDeclaration();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.firstReferenceIsAssigningDeclaration();	  int    size    =    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	21	None	replace
109	[BUG]  [BUGGY]  int  size  =  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();	  int    size    =    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	21	None	replace
110	[BUG]  [BUGGY]  int  size  =  aliasRefs.firstReferenceIsAssigningDeclaration()  -  1;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.firstReferenceIsAssigningDeclaration()  -  1;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.firstReferenceIsAssigningDeclaration()  -  1;	  int    size    =    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	21	None	replace
111	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  int  size  =  aliasRefs.references.size();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  int  size  =  aliasRefs.references.size();  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  int  size  =  aliasRefs.references.size();	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	26	None	replace
112	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
113	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  int  size  =  aliasRefs.references.size();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]              IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  int  size  =  aliasRefs.references.size();  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  int  size  =  aliasRefs.references.size();	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	26	None	replace
114	[BUG]  [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]  [FE]                IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]	26	None	replace
115	[BUG]  [BUGGY]  Integer  args  =  aliasRefs.references.size()  +  1;  [CE]  cannot  find  symbol  newNodes  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  args  =  aliasRefs.references.size()  +  1;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  aliasRefs.references.size()  +  1;	  Integer    args    =    aliasRefs.references.size();    	non-compiled	[CE]  cannot  find  symbol  newNodes	61	None	replace
116	[BUG]  [BUGGY]  Integer  args  =  aliasRefs.firstReferenceIsAssigningDeclaration().size();  [CE]  boolean  cannot  be  dereferenced  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  args  =  aliasRefs.firstReferenceIsAssigningDeclaration().size();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  aliasRefs.firstReferenceIsAssigningDeclaration().size();	  Integer    args    =    aliasRefs.references.size();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	61	None	replace
117	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size);    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	75	None	add
118	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size);    Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);	  	non-compiled	[CE]  cannot  find  symbol	75	None	add
119	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size);    List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	75	None	add
120	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size);    Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	75	None	add
121	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size);    Node  newNodes  =  Sets.newHashSetWithExpectedSize(size);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	75	None	add
122	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size);    Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
123	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1);	  ArrayList    <    Node>    newNodes    =    Lists.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
124	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references	  if(aliasRefs.isAssignedOnce()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references    	non-compiled	[CE]  ';'  expected	86	None	replace
125	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1  +  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1  +  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1    +    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	64	None	replace
126	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1,  size  +  1);  [CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1,  size  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1,  size  +  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1    +    1);    	non-compiled	[CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;	64	None	replace
127	[BUG]  [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  type  Node  does  not  take  parameters  [FE]        IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  type  Node  does  not  take  parameters	67	None	replace
128	[BUG]  [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [CE]  type  Node  does  not  take  parameters  [FE]          IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  type  Node  does  not  take  parameters	67	None	replace
129	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  alias  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  alias  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  alias	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  ';'  expected	37	None	replace
130	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
131	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  ')'  expected	37	None	replace
132	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node[]    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
133	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node[]    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
134	[BUG]  [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]  [FE]                    IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node[]    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]	29	None	replace
135	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node[]    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	29	None	replace
136	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  +  ';'  expected  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  +  ';'  expected  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  +  ';'  expected	  int    size    =    aliasRefs.references.size()    >>    ';'    expected    	non-compiled	[CE]  ';'  expected	33	None	replace
137	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  >  ';'  expected  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  >  ';'  expected  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  >  ';'  expected	  int    size    =    aliasRefs.references.size()    >>    ';'    expected    	non-compiled	[CE]  ';'  expected	33	None	replace
138	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  +  1;'  expected  [CE]  unclosed  character  literal  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  +  1;'  expected  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  +  1;'  expected	  int    size    =    aliasRefs.references.size()    >>    ';'    expected    	non-compiled	[CE]  unclosed  character  literal	33	None	replace
139	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  +  1);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  +  1);	  Collection    <    Node>    newNodes    =    Lists.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
140	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  list.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  list.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  list.newHashSetWithExpectedSize(size  -  1);	  Collection    <    Node>    newNodes    =    Lists.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
141	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
142	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  aliasRefs.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  aliasRefs.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  aliasRefs.newHashSetWithExpectedSize(size  -  2);	  Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
143	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  alias.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  alias.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  alias.newHashSetWithExpectedSize(size  -  1);	  Collection    <    Node>    newNodes    =    aliasRefs.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
144	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  aliasRefs.references.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  aliasRefs.references.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  aliasRefs.references.newHashSetWithExpectedSize(size  -  1);	  Collection    <    Node>    newNodes    =    aliasRefs.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
145	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  aliasRefs.newHashSetWithExpectedSize(size  +  1);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  aliasRefs.newHashSetWithExpectedSize(size  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  aliasRefs.newHashSetWithExpectedSize(size  +  1);	  Collection    <    Node>    newNodes    =    aliasRefs.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
146	[BUG]  [BUGGY]  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  Node  [FE]            IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  cannot  find  symbol  Node	82	None	replace
147	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  Collections.sort(newNodes);  [CE]  cannot  find  symbol  Collections  [FE]            IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  Collections.sort(newNodes);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  Collections.sort(newNodes);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Collections.sort(newNodes);    	non-compiled	[CE]  cannot  find  symbol  Collections	69	None	replace
148	[BUG]  [BUGGY]  Collections.sort(newNodes);  [CE]  cannot  find  symbol  newNodes  [FE]              IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collections.sort(newNodes);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collections.sort(newNodes);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Collections.sort(newNodes);    	non-compiled	[CE]  cannot  find  symbol  newNodes	69	None	replace
149	[BUG]  [BUGGY]  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Collections.sort(newNodes);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>  [FE]                IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Collections.sort(newNodes);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Collections.sort(newNodes);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Collections.sort(newNodes);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>	69	None	replace
150	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  Integer  size  =  aliasRefs.references.size();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]                  IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  Integer  size  =  aliasRefs.references.size();  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  Integer  size  =  aliasRefs.references.size();	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	30	None	replace
151	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  Integer  size  =  aliasRefs.references.size();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  Integer  size  =  aliasRefs.references.size();  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  Integer  size  =  aliasRefs.references.size();	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	30	None	replace
152	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Integer  size  =  aliasRefs.references.size();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]                      IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Integer  size  =  aliasRefs.references.size();  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Integer  size  =  aliasRefs.references.size();	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	30	None	replace
153	[BUG]  [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Integer  size  =  aliasRefs.references.get(0);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]  [FE]                        IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Integer  size  =  aliasRefs.references.get(0);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Integer  size  =  aliasRefs.references.get(0);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]	30	None	replace
154	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  -  ';'  expected  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  -  ';'  expected  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  -  ';'  expected	  int    size    =    aliasRefs.references.size()    >=    ';'    expected    	non-compiled	[CE]  ';'  expected	66	None	replace
155	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=length;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	47	None	replace
156	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	add	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    	compilable	  [FE]  IllegalArgumentException  	2	3	replace
157	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  1);  [FE]  IllegalArgumentException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    	compilable	  [FE]  IllegalArgumentException  	2	3	replace
158	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	add	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  size);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    	compilable	  [FE]  IllegalArgumentException  	2	12	replace
159	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  size);  [FE]  IllegalArgumentException  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  size);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    	compilable	  [FE]  IllegalArgumentException  	2	12	replace
160	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	add	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  +  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	2	1	replace
161	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  +  1);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  +  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	2	1	replace
162	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  *  ';'  expected  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  *  ';'  expected  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  *  ';'  expected	  int    size    =    aliasRefs.references.size()!=    ';'    expected    	non-compiled	[CE]  ';'  expected	65	None	replace
163	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);	  Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
164	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  aliasRefs.newHashSetWithExpectedSize(size  /  1);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  aliasRefs.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  aliasRefs.newHashSetWithExpectedSize(size  /  1);	  Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
165	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  /  2);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  /  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  /  2);	  Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
166	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  /  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  /  1);	  Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
167	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  3);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  3);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  3);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	45	None	replace
168	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  *  1);  [CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  *  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  *  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    	non-compiled	[CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;	74	None	replace
169	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  ArrayList.newHashSetWithExpectedSize(size  /  1);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  ArrayList  <  Node>  newNodes  =  ArrayList.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  ArrayList.newHashSetWithExpectedSize(size  /  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
170	[BUG]  [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]	78	None	replace
171	[BUG]  [BUGGY]  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  1);  [CE]  cannot  find  symbol  Node  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  1);	  Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    	non-compiled	[CE]  cannot  find  symbol  Node	56	None	replace
172	[BUG]  [BUGGY]  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  size);  [CE]  cannot  find  symbol  Node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  -  size);	  Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    	non-compiled	[CE]  cannot  find  symbol  Node	56	None	replace
173	[BUG]  [BUGGY]  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  +  1);  [CE]  cannot  find  symbol  Node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2  +  1);	  Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    	non-compiled	[CE]  cannot  find  symbol  Node	56	None	replace
174	[BUG]  [BUGGY]  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);  [CE]  cannot  find  symbol  Node  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);	  Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    	non-compiled	[CE]  cannot  find  symbol  Node	56	None	replace
175	[BUG]  [BUGGY]  Integer  size  =  aliasRefs.references.size()  +  1;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  size  =  aliasRefs.references.size()  +  1;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  size  =  aliasRefs.references.size()  +  1;	  Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	replace
176	[BUG]  [BUGGY]  Integer  size  =  aliasRefs.firstReferenceIsAssigningDeclaration();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  size  =  aliasRefs.firstReferenceIsAssigningDeclaration();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  size  =  aliasRefs.firstReferenceIsAssigningDeclaration();	  Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	replace
177	[BUG]  [BUGGY]  Integer  size  =  aliasRefs.references.size()  -  1;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  size  =  aliasRefs.references.size()  -  1;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  size  =  aliasRefs.references.size()  -  1;	  Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	replace
178	[BUG]  [BUGGY]  Integer  size  =  aliasRefs.references.size()  *  2;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  size  =  aliasRefs.references.size()  *  2;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  size  =  aliasRefs.references.size()  *  2;	  Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	replace
179	[BUG]  [BUGGY]  Integer  size  =  aliasRefs.references.get(0);  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  size  =  aliasRefs.references.get(0);  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  size  =  aliasRefs.references.get(0);	  Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	replace
180	[BUG]  [BUGGY]  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1);  [CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1);	  List    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;	15	None	replace
181	[BUG]  [BUGGY]  if(size  >  1)  {  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(size  >  1)  {  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(size  >  1)  {  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }	  if(size    >    0)    {    Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
182	[BUG]  [BUGGY]  if(size  >  0)  {  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1);  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(size  >  0)  {  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1);  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(size  >  0)  {  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1);  }	  if(size    >    0)    {    Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
183	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  4);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  4);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  4);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	74	None	replace
184	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  3);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  3);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  3);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	74	None	replace
185	[BUG]  [BUGGY]  Integer  newNodes  =  aliasrefs.references.size();  [CE]  package  aliasrefs  does  not  exist  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  newNodes  =  aliasrefs.references.size();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  aliasrefs.references.size();	  Integer    newNodes    =    aliasRefs.references.size();    	non-compiled	[CE]  package  aliasrefs  does  not  exist	62	None	replace
186	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  }  [CE]  cannot  find  symbol  newNodes  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  }	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=array;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  cannot  find  symbol  newNodes	49	None	replace
187	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpected  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpected  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpected	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=array;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ';'  expected	49	None	replace
188	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  aliasRefs.references.size();  }  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  aliasRefs.references.size();  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  aliasRefs.references.size();  }	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	37	None	replace
189	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  aliasRefs.references.size();  }  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  aliasRefs.references.size();  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  aliasRefs.references.size();  }	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	37	None	replace
190	[BUG]  [BUGGY]  Integer  args  =  aliasRefs.references.size()  -  1;  [CE]  cannot  find  symbol  newNodes  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  args  =  aliasRefs.references.size()  -  1;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  aliasRefs.references.size()  -  1;	  Integer    args    =    aliasRefs.references.size();    	non-compiled	[CE]  cannot  find  symbol  newNodes	61	None	replace
191	[BUG]  [BUGGY]  Integer  args  =  aliasRefs.firstReferenceIsWellDefined();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  args  =  aliasRefs.firstReferenceIsWellDefined();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  aliasRefs.firstReferenceIsWellDefined();	  Integer    args    =    aliasRefs.references.size();    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
192	[BUG]  [BUGGY]  if(size  >  1)  {  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(size  >  1)  {  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(size  >  1)  {  List  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }	  if(size    >    0)    {    List    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  List<Node>	58	None	replace
193	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1  -  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  +  1  -  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    +    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	43	None	replace
194	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  aliasrefs.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  aliasrefs.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  aliasrefs.newHashSetWithExpectedSize(size  -  1);	  Collection    <    Node>    newNodes    =    aliasRefs.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
195	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Integer  size  =  aliasRefs.references.size();  }  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Integer  size  =  aliasRefs.references.size();  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Integer  size  =  aliasRefs.references.size();  }	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	41	None	replace
196	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  In  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  In  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  In	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  not  a  statement	41	None	replace
197	[BUG]  [BUGGY]  Node[]  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  Collections  [FE]                IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node[]  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node[]  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node[]    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  cannot  find  symbol  Collections	29	None	replace
198	[BUG]  [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  3);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]  [FE]                  IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  3);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  3);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node[]    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]	29	None	replace
199	[BUG]  [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]  [FE]                    IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node[]    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]	29	None	replace
200	[BUG]  [BUGGY]  Integer  args  =  aliasrefs.references.size();  [CE]  package  aliasrefs  does  not  exist  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  args  =  aliasrefs.references.size();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  aliasrefs.references.size();	  Integer    args    =    alias.references.size();    	non-compiled	[CE]  package  aliasrefs  does  not  exist	63	None	replace
201	[BUG]  [BUGGY]  Integer  args  =  aliasRefs.references.get(size);  [CE]  incompatible  types  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  args  =  aliasRefs.references.get(size);  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  aliasRefs.references.get(size);	  Integer    args    =    alias.references.size();    	non-compiled	[CE]  incompatible  types	63	None	replace
202	[BUG]  [BUGGY]  if(size!=  1)  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  }  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(size!=  1)  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(size!=  1)  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  }	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	38	None	replace
203	[BUG]  [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [CE]  type  Node  does  not  take  parameters  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    	non-compiled	[CE]  type  Node  does  not  take  parameters	79	None	replace
204	[BUG]  [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]	79	None	replace
205	[BUG]  [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  int  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);	  int    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  int	10	None	replace
206	[BUG]  [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  +  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  int  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  +  1);	  int    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  int	10	None	replace
207	[BUG]  [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  -  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  int  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  -  1);	  int    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  int	10	None	replace
208	[BUG]  [BUGGY]  int  size  =  aliasRefs.getFirstReferenceIsAssigningDeclaration();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.getFirstReferenceIsAssigningDeclaration();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.getFirstReferenceIsAssigningDeclaration();	  int    size    =    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	21	None	replace
209	[BUG]  [BUGGY]  int  size  =  aliasRefs.lastReferenceIsWellDefined();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.lastReferenceIsWellDefined();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.lastReferenceIsWellDefined();	  int    size    =    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	21	None	replace
210	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references    	non-compiled	[CE]  ';'  expected	14	None	replace
211	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	1	None	add
212	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	1	None	add
213	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=null;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=null;setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=null;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	1	None	add
214	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=0;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=0;setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=0;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	1	None	add
215	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=array;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=array;setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=array;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	1	None	add
216	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alarm(args)    }    	non-compiled	[CE]  not  a  statement	50	None	replace
217	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(!aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(!aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alarm	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alarm(args)    }    	non-compiled	[CE]  not  a  statement	50	None	replace
218	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedEr  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedEr  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedEr	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alarm(args)    }    	non-compiled	[CE]  not  a  statement	50	None	replace
219	[BUG]  [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  +  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  +  1);	  Integer    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer	9	None	replace
220	[BUG]  [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  -  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1  -  1);	  Integer    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Integer	9	None	replace
221	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  int  size  =  aliasRefs.references.size();  }  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined())  {  int  size  =  aliasRefs.references.size();  }  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined())  {  int  size  =  aliasRefs.references.size();  }	  if(aliasRefs.isAssignedOnce())    {    int    size    =    aliasRefs.references.size();    }    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	84	None	replace
222	[BUG]  [BUGGY]  if(size  ==  0)  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(size  ==  0)  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(size  ==  0)  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  setTimeout(function()  {  alert(args)  }	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	40	None	replace
223	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  setTimeout(function()  {  alert(args)  }	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	40	None	replace
224	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2  -  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2  -  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	42	None	replace
225	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Collections.sort(newNodes);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Collections.sort(newNodes);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Collections.sort(newNodes);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Collections.sort(newNodes);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
226	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	54	None	add
227	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	54	None	add
228	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=null;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=null;setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=null;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	54	None	add
229	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	54	None	add
230	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=array;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=array;setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=array;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	54	None	add
231	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  =  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  =  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  =	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    int    size    =    aliasRefs.references.size();    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
232	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    int    size    =    aliasRefs.references.size();    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
233	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  =  Sets.new  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  =  Sets.new  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  =  Sets.new	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    int    size    =    aliasRefs.references.size();    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
234	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.reference  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.reference  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.reference	  if(aliasRefs.isAssignedOnce()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references    	non-compiled	[CE]  ';'  expected	86	None	replace
235	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1,  aliasRefs.references);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1,  aliasRefs.references);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1,  aliasRefs.references);	  Collection    <    Node>    newNodes    =    Collections.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
236	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1  +  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  1  +  1);	  Collection    <    Node>    newNodes    =    Collections.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
237	[BUG]  [BUGGY]  Integer  size  =  aliasRefs.getReferences().size();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  size  =  aliasRefs.getReferences().size();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  size  =  aliasRefs.getReferences().size();	  Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	replace
238	[BUG]  [BUGGY]  Integer  size  =  aliasRefs.references.get(i);  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  size  =  aliasRefs.references.get(i);  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  size  =  aliasRefs.references.get(i);	  Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	replace
239	[BUG]  [BUGGY]  Int  size  =  aliasRefs.references.size();  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Int  size  =  aliasRefs.references.size();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Int  size  =  aliasRefs.references.size();	  int    size    =    aliasRefs.references.size()    +    1;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
240	[BUG]  [BUGGY]  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [CE]  cannot  find  symbol  Node  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  cannot  find  symbol  Node	78	None	replace
241	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1  +  1);  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1  +  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1  +  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1    +    1);    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	64	None	replace
242	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1,  size  -  1);  [CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1,  size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1,  size  -  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1    +    1);    	non-compiled	[CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;	64	None	replace
243	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]          IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	26	None	replace
244	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  }  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  }	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	26	None	replace
245	[BUG]  [BUGGY]  if(size  ==  0)  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(size  ==  0)  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(size  ==  0)  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=length;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	47	None	replace
246	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=length;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	47	None	replace
247	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  +  1;'  expected  +  1;  [CE]  unclosed  character  literal  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  +  1;'  expected  +  1;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  +  1;'  expected  +  1;	  int    size    =    aliasRefs.references.size()!=    ';'    expected    	non-compiled	[CE]  unclosed  character  literal	65	None	replace
248	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  1,  aliasRefs.references);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  1,  aliasRefs.references);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  -  1,  aliasRefs.references);	  Collection    <    Node>    newNodes    =    Arrays.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
249	[BUG]  [BUGGY]  if(size  >  1)  {  Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(size  >  1)  {  Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(size  >  1)  {  Collections.  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }	  if(size    >    1)    {    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
250	[BUG]  [BUGGY]  Node  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  Collections  [FE]              IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  cannot  find  symbol  Collections	28	None	replace
251	[BUG]  [BUGGY]  int  size  =  aliasRefs.getReferences().size();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.getReferences().size();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.getReferences().size();	  int    size    =    aliasRefs.references.size()    -    1;    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	20	None	replace
252	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  +  1;'  >>  ';'  [CE]  unclosed  character  literal  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  +  1;'  >>  ';'  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  +  1;'  >>  ';'	  int    size    =    aliasRefs.references.size()    >>    ';'    	non-compiled	[CE]  unclosed  character  literal	34	None	replace
253	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  -  1;'  >>  ';'  [CE]  unclosed  character  literal  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  -  1;'  >>  ';'  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  -  1;'  >>  ';'	  int    size    =    aliasRefs.references.size()    >>    ';'    	non-compiled	[CE]  unclosed  character  literal	34	None	replace
254	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  >  ';'  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  >  ';'  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  >  ';'	  int    size    =    aliasRefs.references.size()    >>    ';'    	non-compiled	[CE]  ';'  expected	34	None	replace
255	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  *  2  +  1;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  *  2  +  1;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  *  2  +  1;	  int    size    =    aliasRefs.references.size()    *    2;    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	22	None	replace
256	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  /  2;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  /  2;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  /  2;	  int    size    =    aliasRefs.references.size()    *    2;    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	22	None	replace
257	[BUG]  [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [CE]  type  Node  does  not  take  parameters  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Node    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  type  Node  does  not  take  parameters	77	None	replace
258	[BUG]  [BUGGY]  Node  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  /  1);  [CE]  type  Node  does  not  take  parameters  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  /  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Node    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  type  Node  does  not  take  parameters	77	None	replace
259	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  /  1);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Arrays.newHashSetWithExpectedSize(size  /  1);	  Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
260	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  i  -  1);  [CE]  cannot  find  symbol  i  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  i  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  i  -  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size,    size    -    1);    	non-compiled	[CE]  cannot  find  symbol  i	44	None	replace
261	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  aliasRefs.node  -  1);  [CE]  cannot  find  symbol  node  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  aliasRefs.node  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  aliasRefs.node  -  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size,    size    -    1);    	non-compiled	[CE]  cannot  find  symbol  node	44	None	replace
262	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  aliasRefs.size  -  1);  [CE]  cannot  find  symbol  size  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  aliasRefs.size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  aliasRefs.size  -  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size,    size    -    1);    	non-compiled	[CE]  cannot  find  symbol  size	44	None	replace
263	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [CE]  type  Node  does  not  take  parameters  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size);    Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);	  	non-compiled	[CE]  type  Node  does  not  take  parameters	75	None	add
264	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  Collections.sort(newNodes);  [CE]  cannot  find  symbol  Collections  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size);  Collections.sort(newNodes);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size);    Collections.sort(newNodes);	  	non-compiled	[CE]  cannot  find  symbol  Collections	75	None	add
265	[BUG]  [BUGGY]  int  size  =  aliasRefs.firstReferenceIsWellDefined()  +  1;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.firstReferenceIsWellDefined()  +  1;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.firstReferenceIsWellDefined()  +  1;	  int    size    =    aliasRefs.firstReferenceIsWellDefined();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	71	None	replace
266	[BUG]  [BUGGY]  int  size  =  aliasRefs.references.size()  -  ';'  expected  +  ';'  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references.size()  -  ';'  expected  +  ';'  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references.size()  -  ';'  expected  +  ';'	  int    size    =    aliasRefs.references.size()    >=    ';'    expected    	non-compiled	[CE]  ';'  expected	66	None	replace
267	[BUG]  [BUGGY]  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  /  2);  [CE]  cannot  find  symbol  Node  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  /  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  /  2);	  Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    	non-compiled	[CE]  cannot  find  symbol  Node	56	None	replace
268	[BUG]  [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Integer  size  =  aliasRefs.references.size();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]  [FE]                  IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Integer  size  =  aliasRefs.references.size();  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node[]  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  Integer  size  =  aliasRefs.references.size();	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node[]	30	None	replace
269	[BUG]  [BUGGY]  Node  newNodes  =  aliasRefs.newHashSetWithExpectedSize(size  -  2);  Integer  size  =  aliasRefs.references.size();  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  aliasRefs.newHashSetWithExpectedSize(size  -  2);  Integer  size  =  aliasRefs.references.size();  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  aliasRefs.newHashSetWithExpectedSize(size  -  2);  Integer  size  =  aliasRefs.references.size();	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
270	[BUG]  [BUGGY]  Node  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);  [CE]  type  Node  does  not  take  parameters  [FE]        IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  type  Node  does  not  take  parameters	67	None	replace
271	[BUG]  [BUGGY]  Node  <  Node>  nodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [CE]  type  Node  does  not  take  parameters  [FE]          IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  <  Node>  nodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  <  Node>  nodes  =  Sets.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  type  Node  does  not  take  parameters	67	None	replace
272	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  alias.references.newHashSetWithExpectedSize(size  -  1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  alias.references.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  alias.references.newHashSetWithExpectedSize(size  -  1);	  Collection    <    Node>    newNodes    =    aliasRefs.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
273	[BUG]  [BUGGY]  int  size  =  aliasRefs.references!=  ';'  expected  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references!=  ';'  expected  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references!=  ';'  expected	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references    	non-compiled	[CE]  ';'  expected	14	None	replace
274	[BUG]  [BUGGY]  int  size  =  aliasRefs.references  >>  ';'  expected  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references  >>  ';'  expected  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references  >>  ';'  expected	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references    	non-compiled	[CE]  ';'  expected	14	None	replace
275	[BUG]  [BUGGY]  int  size  =  aliasRefs.references!=  ';'  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references!=  ';'  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references!=  ';'	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references    	non-compiled	[CE]  ';'  expected	14	None	replace
276	[BUG]  [BUGGY]  int  size  =  aliasRefs.references  >>  ';'  [CE]  ';'  expected  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.references  >>  ';'  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.references  >>  ';'	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references    	non-compiled	[CE]  ';'  expected	14	None	replace
277	[BUG]  [BUGGY]  if(size  >  0)  {  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1,  aliasRefs.references);  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(size  >  0)  {  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1,  aliasRefs.references);  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(size  >  0)  {  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1,  aliasRefs.references);  }	  if(size    >    0)    {    Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
278	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.  [CE]  <identifier>  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
279	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  2);  int  size  =  aliasRefs.references.size();  Set  <  Node>  newNodes	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    int    size    =    aliasRefs.references.size();    Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  ';'  expected	68	None	replace
280	[BUG]  [BUGGY]  int  size  =  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  int  size  =  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	int  size  =  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();	  int    size    =    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	21	None	replace
281	[BUG]  [BUGGY]  Integer  size  =  aliasRefs.references.size()  -  2;  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  size  =  aliasRefs.references.size()  -  2;  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  size  =  aliasRefs.references.size()  -  2;	  Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	replace
282	[BUG]  [BUGGY]  Integer  args  =  aliasRefs.references.get(array.size()  -  1);  [CE]  cannot  find  symbol  array  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Integer  args  =  aliasRefs.references.get(array.size()  -  1);  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Integer  args  =  aliasRefs.references.get(array.size()  -  1);	  Integer    args    =    aliasRefs.references.get(arguments.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol  array	52	None	replace
283	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.  [CE]  <identifier>  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.size();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
284	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references.size();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
285	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  alia  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  alia  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  int  size  =  alia	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  ';'  expected	37	None	replace
286	[BUG]  [BUGGY]  List  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  2);  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  List  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  2);  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	List  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  2);  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
287	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSet(size);  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSet(size);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSet(size);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Set    <    Node>    newNodes    =    Sets.newHashSet(size    /    1);    	non-compiled	[CE]  incompatible  types	39	None	replace
288	[BUG]  [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSet(size  /  1);  [CE]  type  Node  does  not  take  parameters  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSet(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  <  Node>  newNodes  =  Sets.newHashSet(size  /  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Set    <    Node>    newNodes    =    Sets.newHashSet(size    /    1);    	non-compiled	[CE]  type  Node  does  not  take  parameters	39	None	replace
289	[BUG]  [BUGGY]  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);  [CE]  cannot  find  symbol  Node  [FE]            IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  2);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    	non-compiled	[CE]  cannot  find  symbol  Node	82	None	replace
290	[BUG]  [BUGGY]  ArrayList  <  Node>  newNodes  =  ArrayLists.newHashSetWithExpectedSize(size  /  1);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  ArrayList  <  Node>  newNodes  =  ArrayLists.newHashSetWithExpectedSize(size  /  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	ArrayList  <  Node>  newNodes  =  ArrayLists.newHashSetWithExpectedSize(size  /  1);	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Collection    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
291	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1  -  1);  [CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1  -  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1  -  1);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size,    size    -    1);    	non-compiled	[CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;	44	None	replace
292	[BUG]  [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1,  aliasRefs.references);  [CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1,  aliasRefs.references);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  newNodes  =  Sets.newHashSetWithExpectedSize(size,  size  -  1,  aliasRefs.references);	  Node    newNodes    =    Sets.newHashSetWithExpectedSize(size,    size    -    1);    	non-compiled	[CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;	44	None	replace
293	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1,  size);  int  size  =  aliasRefs.references.size();  [CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1,  size);  int  size  =  aliasRefs.references.size();  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1,  size);  int  size  =  aliasRefs.references.size();	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    2);    int    size    =    aliasRefs.references.size();    	non-compiled	[CE]  method  newHashSetWithExpectedSize  in  class  Sets  cannot  be  applied  to  given  types;	26	None	replace
294	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.	  if(aliasRefs.isAssignedOnce()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    int    size    =    aliasRefs.references    	non-compiled	[CE]  <identifier>  expected	86	None	replace
295	[BUG]  [BUGGY]  List  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1,  aliasRefs.references);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  List  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1,  aliasRefs.references);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	List  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1,  aliasRefs.references);	  List    <    Node>    newNodes    =    Lists.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
296	[BUG]  [BUGGY]  if(size  >  1)  {  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(size  >  1)  {  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(size  >  1)  {  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  }	  if(size    >    0)    {    Node    newNodes    =    Sets.newHashSetWithExpectedSize(size    -    1);    }    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  E  exist  so  that  HashSet<E>  conforms  to  Node	59	None	replace
297	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  3);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  3);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Collections.newHashSetWithExpectedSize(size  -  3);	  Collection    <    Node>    newNodes    =    Collections.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
298	[BUG]  [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  setTimeout(function()  {  alert(args)  }	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	40	None	replace
299	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [CE]  type  Node  does  not  take  parameters  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);	  	non-compiled	[CE]  type  Node  does  not  take  parameters	54	None	add
300	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    *    1);    Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  1);	  	non-compiled	[CE]  cannot  find  symbol	54	None	add
301	[BUG]  [BUGGY]  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1,  aliasRefs.references);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1,  aliasRefs.references);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Collection  <  Node>  newNodes  =  Lists.newHashSetWithExpectedSize(size  -  1,  aliasRefs.references);	  Collection    <    Node>    newNodes    =    Lists.newHashSetWithExpectedSize(size    -    1);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
302	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [CE]  type  Node  does  not  take  parameters  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    Node  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);	  	non-compiled	[CE]  type  Node  does  not  take  parameters	1	None	add
303	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    Collection  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
304	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  setTimeout(function()  {  alert(aliasRefs)  }  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  setTimeout(function()  {  alert(aliasRefs)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  setTimeout(function()  {  alert(aliasRefs)  }	  	non-compiled	[CE]  ')'  expected	1	None	add
305	[BUG]  [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  2);  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    2);    Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  *  2);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	1	None	add
306	[BUG]  [BUGGY]  if(size  ==  1)  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(size  ==  1)  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(size  ==  1)  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  junit.framework.AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=length;setTimeout(function()  {  alert(args)  }	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    junit.framework.AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=length;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	47	None	replace
307	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Integer  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Integer  [BUGGY]      for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  Set  <  Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  /  1);  Integer	  Set    <    Node>    newNodes    =    Sets.newHashSetWithExpectedSize(size    /    1);    Integer    size    =    aliasRefs.references.size();    	non-compiled	[CE]  not  a  statement	41	None	replace
308	[BUG]  [BUGGY]  if(aliasRefs!=  null  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  }  [CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs!=  null  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  }  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs!=  null  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  }	  if(aliasRefs!=    null)    {    int    size    =    aliasRefs.references.size();    }    	non-compiled	[CE]  variable  size  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	51	None	replace
309	[BUG]  [BUGGY]  if(aliasRefs!=  null  &&  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs!=  null  &&  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs!=  null  &&  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references	  if(aliasRefs!=    null)    {    int    size    =    aliasRefs.references.size();    }    	non-compiled	[CE]  ';'  expected	51	None	replace
310	[BUG]  [BUGGY]  if(aliasRefs!=  null  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs!=  null  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs!=  null  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.	  if(aliasRefs!=    null)    {    int    size    =    aliasRefs.references.size();    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
311	[BUG]  [BUGGY]  if(aliasRefs!=  null  &&  aliasRefs.referenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  }  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();      [BUGGY]  if(aliasRefs!=  null  &&  aliasRefs.referenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  }  [BUGGY]      Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }    [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	221	221	1	replace	if(aliasRefs!=  null  &&  aliasRefs.referenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  }	  if(aliasRefs!=    null)    {    int    size    =    aliasRefs.references.size();    }    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
