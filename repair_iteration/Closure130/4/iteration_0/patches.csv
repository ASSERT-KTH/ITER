bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode);  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode);	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
2	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode);	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
3	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode.getNode(),  aliasRef);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]  aliasRef.getParent().replaceChild(newNode.getNode(),  aliasRef);  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode.getNode(),  aliasRef);	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
4	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace);  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace);	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	7	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]    [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	  	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  	compilable	  [FE]  AssertionFailedError  	7	10	replace
6	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]    [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	  	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  	compilable	  [FE]  AssertionFailedError  	7	10	replace
7	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]    aliasRef.getParent().removeChild(newNode);  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	    aliasRef.getParent().removeChild(newNode);		compilable	  [FE]  RuntimeException  	8	10	add
8	[BUG]  [BUGGY]    aliasRef.getParent().removeChild(newNode);  [FE]  RuntimeException  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]    aliasRef.getParent().removeChild(newNode);  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	    aliasRef.getParent().removeChild(newNode);		compilable	  [FE]  RuntimeException  	8	10	add
9	[BUG]  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime());  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime());		non-compiled	[CE]  not  a  statement	8	None	add
10	[BUG]  [BUGGY]    Node  newNode  =  aliasRef.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]    Node  newNode  =  aliasRef.node.cloneTree();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	    Node  newNode  =  aliasRef.node.cloneTree();		non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	8	None	add
11	[BUG]  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());		non-compiled	[CE]  not  a  statement	8	None	add
12	[BUG]  [BUGGY]    Node  newNode  =  aliasRef.getParent();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]    Node  newNode  =  aliasRef.getParent();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	    Node  newNode  =  aliasRef.getParent();		non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	8	None	add
13	[BUG]  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);		non-compiled	[CE]  not  a  statement	8	None	add
14	[BUG]  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {		non-compiled	[CE]  not  a  statement	8	None	add
15	[BUG]  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();		non-compiled	[CE]  not  a  statement	8	None	add
16	[BUG]  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);		non-compiled	[CE]  not  a  statement	8	None	add
17	[BUG]  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	    aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();		non-compiled	[CE]  not  a  statement	8	None	add
18	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode);	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
19	[BUG]  [BUGGY]    Node  newNode  =  alias.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]    Node  newNode  =  alias.node.cloneTree();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	    Node  newNode  =  alias.node.cloneTree();		non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	8	None	add
20	[BUG]  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]    aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	    aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());		non-compiled	[CE]  not  a  statement	8	None	add
21	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getFirstChild(),  newNode);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getFirstChild(),  newNode);  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getFirstChild(),  newNode);	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
22	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode);  [BUGGY]  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode);	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
