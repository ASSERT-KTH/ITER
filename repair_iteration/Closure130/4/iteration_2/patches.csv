bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getNode(),  size);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getNode(),  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getNode(),  size);	  aliasRef.getNamespace().replaceChild(aliasRef,    newNode.getNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
2	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getNode(),  namespace);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getNode(),  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getNode(),  namespace);	  aliasRef.getNamespace().replaceChild(aliasRef,    newNode.getNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
3	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(newNode,  aliasRef.getNode(),  size);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(newNode,  aliasRef.getNode(),  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(newNode,  aliasRef.getNode(),  size);	  aliasRef.getNamespace().replaceChild(aliasRef,    newNode.getNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node,CollapseProperties)  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode,  this);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNode,  this);	          NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node,CollapseProperties)	96	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GlobalNamespace)  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	NodeTraversal.traverse(compiler,  newNode,  namespace);	          NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GlobalNamespace)	96	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties)  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  this);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  this);	          NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,CollapseProperties)	96	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,CollapseProperties,GlobalNamespace)  [FE]              AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  namespace);	          NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,CollapseProperties,GlobalNamespace)	96	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,CollapseProperties,boolean)  [FE]                AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  inlineAliases);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  inlineAliases);	          NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,CollapseProperties,boolean)	96	None	replace
9	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(scope.getNode(),  newNode,  namespace,  aliasRef);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(scope.getNode(),  newNode,  namespace,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(scope.getNode(),  newNode,  namespace,  aliasRef);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    scope);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
10	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  scope,  namespace);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  scope,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  scope,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    scope);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	52	None	replace
11	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  compiler);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  compiler);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  compiler);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    scope);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	52	None	replace
12	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  scope);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  scope);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  scope);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    scope);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	52	None	replace
13	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  inlineAliasVar);  [CE]  cannot  find  symbol  inlineAliasVar  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  inlineAliasVar);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  inlineAliasVar);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    scope);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasVar	52	None	replace
14	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.removeChild(newNode);  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasParent.removeChild(newNode);    compiler.reportCodeChange();    aliasParent.removeChild(newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  RuntimeException  	47	10	add
15	[BUG]  [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.removeChild(newNode);  compiler.reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.removeChild(newNode);  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.removeChild(newNode);    compiler.reportCodeChange();    aliasParent.removeChild(newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  RuntimeException  	47	10	add
16	[BUG]  [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(aliasRef,  newNode);  compiler.reportCodeChange();  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(aliasRef,  newNode);  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.removeChild(newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(aliasRef,  newNode);  compiler.reportCodeChange();	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	47	None	add
17	[BUG]  [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  Node  aliasParent.removeChild(newNode);  compiler.reportCodeChange();  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  Node  aliasParent.removeChild(newNode);  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.removeChild(newNode);    compiler.reportCodeChange();    Node  aliasParent.removeChild(newNode);  compiler.reportCodeChange();	  	non-compiled	[CE]  ';'  expected	47	None	add
18	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.removeChild(newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasParent.removeChild(newNode);    compiler.reportCodeChange();    aliasParent.removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	47	10	add
19	[BUG]  [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.removeChild(newNode);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.removeChild(newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.removeChild(newNode);    compiler.reportCodeChange();    aliasParent.removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	47	10	add
20	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	33	10	add
21	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	33	10	add
22	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode);  aliasRef.getParent().removeChild(newNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(newNode);  aliasRef.getParent().removeChild(newNode);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	33	None	add
23	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	33	10	add
24	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	33	10	add
25	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getName().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getName().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().removeChild(newNode);    aliasRef.getName().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);	  	non-compiled	[CE]  cannot  find  symbol	33	None	add
26	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.getLastChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.node.getLastChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.node.getLastChild();	  Node    newNode    =    aliasRef.node.getFirstChild();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	71	None	replace
27	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getNameNode(),  newNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getNameNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode,  aliasRef.getNameNode(),  newNode);	  aliasRef.getParent().replaceChild(newNode.getNameNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
28	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	5	None	replace
29	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime();	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	5	None	replace
30	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime();	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	5	None	replace
31	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	116	None	replace
32	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	116	None	replace
33	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	116	None	replace
34	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  newNodes.add(newNode);	  aliasRefs.firstReferenceIsAssigningDeclaration())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	29	None	replace
35	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.contains(newNode);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.contains(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.contains(newNode);	  aliasRefs.firstReferenceIsAssigningDeclaration())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	29	None	replace
36	[BUG]  [BUGGY]  aliasRefs.referenceIsAssigningDeclaration())  {  newNodes.add(newNode);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.referenceIsAssigningDeclaration())  {  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.referenceIsAssigningDeclaration())  {  newNodes.add(newNode);	  aliasRefs.firstReferenceIsAssigningDeclaration())    {    newNodes.add(newNode);    	non-compiled	[CE]  ';'  expected	29	None	replace
37	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode,  size);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode,  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode,  size);	  aliasRef.getParent().replaceChild(aliasRef.getPosition(),    newNode,    i);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
38	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode.getPosition(),  aliasRef,  i);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode.getPosition(),  aliasRef,  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode.getPosition(),  aliasRef,  i);	  aliasRef.getParent().replaceChild(aliasRef.getPosition(),    newNode,    i);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
39	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  this,  scope);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  this,  scope);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  this,  scope);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	56	None	replace
40	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  this);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  this);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	56	None	replace
41	[BUG]  [BUGGY]  aliasRefs.lastReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.lastReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.lastReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRefs.lastReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	73	None	replace
42	[BUG]  [BUGGY]  aliasRef.lastReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.lastReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.lastReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRefs.lastReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	73	None	replace
43	[BUG]  [BUGGY]  aliasRefs.removeFirstReferenceIsAssigningDeclaration();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.removeFirstReferenceIsAssigningDeclaration();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.removeFirstReferenceIsAssigningDeclaration();	  aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
44	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode,  aliasRef.getNext().removeChild(newNode);  [CE]  ')'  expected  [FE]              RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().removeChild(newNode,  aliasRef.getNext().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().removeChild(newNode,  aliasRef.getNext().removeChild(newNode);	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNext().removeChild(newNode);    	non-compiled	[CE]  ')'  expected	38	None	replace
45	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getNext().removeChild(newNode,  newNode);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getNext().removeChild(newNode,  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().removeChild(newNode);  aliasRef.getNext().removeChild(newNode,  newNode);	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNext().removeChild(newNode);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
46	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getNext().removeChild(node);  [CE]  cannot  find  symbol  node  [FE]                  RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getNext().removeChild(node);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().removeChild(newNode);  aliasRef.getNext().removeChild(node);	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNext().removeChild(newNode);    	non-compiled	[CE]  cannot  find  symbol  node	38	None	replace
47	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getPosition(),  newNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getPosition(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode,  aliasRef.getPosition(),  newNode);	  aliasRef.getParent().replaceChild(newNode.getPosition(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
48	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode,  newNode.getPosition(),  aliasRef);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode,  newNode.getPosition(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode,  newNode.getPosition(),  aliasRef);	  aliasRef.getParent().replaceChild(newNode.getPosition(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
49	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasParent.removeChild(newNode);  compiler.reportCodeChange();  }  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode!=  null)  {  aliasParent.removeChild(newNode);  compiler.reportCodeChange();  }	          aliasParent.removeChild(newNode);    compiler.reportCodeChange();    	compilable	  [FE]  RuntimeException  	48	10	replace
50	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasParent.removeChild(newNode);  compiler.reportCodeChange();  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasParent.removeChild(newNode);  compiler.reportCodeChange();  }  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasParent.removeChild(newNode);  compiler.reportCodeChange();  }	          aliasParent.removeChild(newNode);    compiler.reportCodeChange();    	compilable	  [FE]  RuntimeException  	48	10	replace
51	[BUG]  [BUGGY]  aliasParent.replaceChild(aliasRef,  newNode);  compiler.reportCodeChange();  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasParent.replaceChild(aliasRef,  newNode);  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasParent.replaceChild(aliasRef,  newNode);  compiler.reportCodeChange();	          aliasParent.removeChild(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	48	None	replace
52	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasParent.removeChild(newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode!=  null)  {  aliasParent.removeChild(newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	          aliasParent.removeChild(newNode);    compiler.reportCodeChange();    	compilable	  [FE]  RuntimeException  	48	10	replace
53	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasParent.removeChild(newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasParent.removeChild(newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasParent.removeChild(newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	          aliasParent.removeChild(newNode);    compiler.reportCodeChange();    	compilable	  [FE]  RuntimeException  	48	10	replace
54	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  size);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  size);	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode,    i);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
55	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode.getNameNode(),  aliasRef,  i);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode.getNameNode(),  aliasRef,  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode.getNameNode(),  aliasRef,  i);	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode,    i);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
56	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);    	compilable	  [FE]  RuntimeException  	34	10	replace
57	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);    	compilable	  [FE]  RuntimeException  	34	10	replace
58	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);    	compilable	  [FE]  RuntimeException  	34	10	replace
59	[BUG]  [BUGGY]  if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);    	compilable	  [FE]  RuntimeException  	34	10	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode  ==  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode  ==  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);    	compilable	  [FE]  AssertionFailedError  	34	10	replace
61	[BUG]  [BUGGY]  if(newNode  ==  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode  ==  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode  ==  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);    	compilable	  [FE]  AssertionFailedError  	34	10	replace
62	[BUG]  [BUGGY]  Node  newNode  =  alias.node.cloneTree();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  alias.node.cloneTree();  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  alias.node.cloneTree();  compiler.reportCodeChange();	          Node    newNode    =    aliasRef.node.cloneTree();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	43	None	replace
63	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.getNext();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.node.getNext();  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.node.getNext();  compiler.reportCodeChange();	          Node    newNode    =    aliasRef.node.cloneTree();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	43	None	replace
64	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isStatementOnceInLifetime());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isStatementOnceInLifetime());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isStatementOnceInLifetime());	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isStatementOnceInLifetime());    	non-compiled	[CE]  not  a  statement	118	None	replace
65	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isStatementOnceInLifetime());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isStatementOnceInLifetime());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isStatementOnceInLifetime());	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isStatementOnceInLifetime());    	non-compiled	[CE]  not  a  statement	118	None	replace
66	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNode.isStatementOnceInLifetime());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNode.isStatementOnceInLifetime());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNode.isStatementOnceInLifetime());	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isStatementOnceInLifetime());    	non-compiled	[CE]  not  a  statement	118	None	replace
67	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  i);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  i);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    i,    namespace);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	114	None	replace
68	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  size);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  size);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    i,    namespace);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	114	None	replace
69	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getNameNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  alias.node.getNameNode();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  alias.node.getNameNode();	  Node    newNode    =    aliasRef.getNameNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	78	None	replace
70	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.getNameNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.node.getNameNode();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.node.getNameNode();	  Node    newNode    =    aliasRef.getNameNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	78	None	replace
71	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime();	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	4	None	replace
72	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  compiler,  namespace);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  compiler,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  compiler,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    compiler);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	53	None	replace
73	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  compiler,  newNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  compiler,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  compiler,  newNode);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    compiler);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	53	None	replace
74	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  compiler,  newNode,  namespace);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  compiler,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  compiler,  newNode,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    compiler);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	53	None	replace
75	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  compiler,  scope);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  compiler,  scope);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  compiler,  scope);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    compiler);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	53	None	replace
76	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(compiler.getNode(),  newNode,  namespace,  aliasRef);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(compiler.getNode(),  newNode,  namespace,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(compiler.getNode(),  newNode,  namespace,  aliasRef);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    compiler);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
77	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  i,  size);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  i,  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  i,  size);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getFirstChild(),    i);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
78	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  i,  namespace);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  i,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  i,  namespace);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getFirstChild(),    i);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
79	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  namespace);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  namespace);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getFirstChild(),    i);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
80	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  args,  i);  [CE]  cannot  find  symbol  args  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  args,  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  args,  i);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getFirstChild(),    i);    	non-compiled	[CE]  cannot  find  symbol  args	1	None	replace
81	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  var,  i);  [CE]  cannot  find  symbol  var  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  var,  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  var,  i);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getFirstChild(),    i);    	non-compiled	[CE]  cannot  find  symbol  var	1	None	replace
82	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(newNode,  aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(newNode,  aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(newNode,  aliasRef.getNode(),  newNode);	  aliasRef.getNamespace().replaceChild(newNode.getNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
83	[BUG]  [BUGGY]  aliasRef,  newNode.getNamespace().replaceChild(aliasRef.getNode(),  aliasRef);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef,  newNode.getNamespace().replaceChild(aliasRef.getNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef,  newNode.getNamespace().replaceChild(aliasRef.getNode(),  aliasRef);	  aliasRef.getNamespace().replaceChild(newNode.getNode(),    aliasRef);    	non-compiled	[CE]  not  a  statement	11	None	replace
84	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	98	1	add
85	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	98	1	add
86	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  Node  newNode  =  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  Node  newNode  =  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    Node  newNode  =  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	98	None	add
87	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  Node  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  Node  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    Node  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);	  	non-compiled	[CE]  ';'  expected	98	None	add
88	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  aliasRefs.FirstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  aliasRefs.FirstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    aliasRefs.FirstReferenceIsAssigningDeclaration();  newNodes.add(newNode);	  	non-compiled	[CE]  cannot  find  symbol	98	None	add
89	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  aliasRefs.firstReferenceIsAssignedDeclaration();  newNodes.add(newNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  aliasRefs.firstReferenceIsAssignedDeclaration();  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    aliasRefs.firstReferenceIsAssignedDeclaration();  newNodes.add(newNode);	  	non-compiled	[CE]  cannot  find  symbol	98	None	add
90	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  aliasRefs.firstReferenceIsAssigningDeclaration();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	aliasRefs.firstReferenceIsAssigningDeclaration();    aliasRefs.firstReferenceIsAssigningDeclaration();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	89	1	add
91	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  aliasRefs.firstReferenceIsAssigningDeclaration();  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  aliasRefs.firstReferenceIsAssigningDeclaration();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();    aliasRefs.firstReferenceIsAssigningDeclaration();	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	89	1	add
92	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  Node  newNode  =  aliasRefs.firstReferenceIsAssigningDeclaration();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  Node  newNode  =  aliasRefs.firstReferenceIsAssigningDeclaration();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();    Node  newNode  =  aliasRefs.firstReferenceIsAssigningDeclaration();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	89	None	add
93	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  aliasRefs.firstReferenceIsAssignedDeclaration();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  aliasRefs.firstReferenceIsAssignedDeclaration();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();    aliasRefs.firstReferenceIsAssignedDeclaration();	  	non-compiled	[CE]  cannot  find  symbol	89	None	add
94	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  aliasRefs.FirstReferenceIsAssigningDeclaration();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  aliasRefs.FirstReferenceIsAssigningDeclaration();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();    aliasRefs.FirstReferenceIsAssigningDeclaration();	  	non-compiled	[CE]  cannot  find  symbol	89	None	add
95	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.getNode(),  size);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.getNode(),  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef,  newNode.getNode(),  size);	  aliasRef.getName().replaceChild(aliasRef,    newNode.getNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
96	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.getNode(),  namespace);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.getNode(),  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef,  newNode.getNode(),  namespace);	  aliasRef.getName().replaceChild(aliasRef,    newNode.getNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
97	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(alias.node,  newNode.getNode(),  i);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(alias.node,  newNode.getNode(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(alias.node,  newNode.getNode(),  i);	  aliasRef.getName().replaceChild(aliasRef,    newNode.getNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
98	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(alias.getFirstChild(),  newNode);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(alias.getFirstChild(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(alias.getFirstChild(),  newNode);	  aliasRef.getParent().replaceChild(newNode.getFirstChild(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
99	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getLastChild(),  i);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getLastChild(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getLastChild(),  i);	  aliasRef.getParent().replaceChild(aliasRef.getLastChild(),    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	3	None	replace
100	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode.getLastChild(),  aliasRef);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode.getLastChild(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode.getLastChild(),  aliasRef);	  aliasRef.getParent().replaceChild(aliasRef.getLastChild(),    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	3	None	replace
101	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(newNode,  aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(newNode,  aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(newNode,  aliasRef.getNode(),  newNode);	  aliasRef.getName().replaceChild(newNode.getNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
102	[BUG]  [BUGGY]  aliasRef.getName(),  newNode.replaceChild(aliasRef.getNode(),  aliasRef);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName(),  newNode.replaceChild(aliasRef.getNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName(),  newNode.replaceChild(aliasRef.getNode(),  aliasRef);	  aliasRef.getName().replaceChild(newNode.getNode(),    aliasRef);    	non-compiled	[CE]  ';'  expected	51	None	replace
103	[BUG]  [BUGGY]  aliasRef.node.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.node.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.node.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());	  aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	16	None	replace
104	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null  ||  newNode.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null  ||  newNode.isAssignedOnceInLifetime());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null  ||  newNode.isAssignedOnceInLifetime());	  aliasRef.firstReferenceIsAssigningDeclaration()    &&    newNode.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	31	None	replace
105	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(newNode.getNode(),  aliasRef,  namespace);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(newNode.getNode(),  aliasRef,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(newNode.getNode(),  aliasRef,  namespace);	  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
106	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(namespace.getNode(),  newNode,  aliasRef);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(namespace.getNode(),  newNode,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(namespace.getNode(),  newNode,  aliasRef);	  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
107	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode,  namespace);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(aliasRef,  newNode,  namespace);	  aliasRef.getNamespace().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
108	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(newNode,  aliasRef);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(newNode,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(newNode,  aliasRef);	  aliasRef.getNamespace().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
109	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().addChildToFront(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);	  	compilable	  [FE]  RuntimeException  	104	10	add
110	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().addChildToFront(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);	  	compilable	  [FE]  RuntimeException  	104	10	add
111	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  aliasRef.getName().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  aliasRef.getName().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().addChildToFront(newNode);    aliasRef.getName().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);	  	non-compiled	[CE]  cannot  find  symbol	104	None	add
112	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  newNode.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().addChildToFront(newNode);    newNode.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);	  	compilable	  [FE]  RuntimeException  	104	10	add
113	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  newNode.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  newNode.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().addChildToFront(newNode);    newNode.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);	  	compilable	  [FE]  RuntimeException  	104	10	add
114	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().addChildToFront(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);	  	compilable	  [FE]  RuntimeException  	104	10	add
115	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().addChildToFront(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);	  	compilable	  [FE]  RuntimeException  	104	10	add
116	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.clone();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.clone();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.clone();	  Node    newNode    =    aliasRef.cloneTree();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	58	None	replace
117	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode,  namespace);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef,  newNode,  namespace);	  aliasRef.getName().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
118	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(newNode,  aliasRef);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(newNode,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(newNode,  aliasRef);	  aliasRef.getName().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
119	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	28	None	replace
120	[BUG]  [BUGGY]  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
121	[BUG]  [BUGGY]  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration())  {  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration())  {	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
122	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNode);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	94	None	add
123	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);	  	compilable	  [FE]  RuntimeException  	94	10	add
124	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);	  	compilable	  [FE]  RuntimeException  	94	10	add
125	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getName().removeChild(newNode);  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getName().removeChild(newNode);  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getName().removeChild(newNode);  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNode);	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
126	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNode.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNode.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    newNode.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNode);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	94	None	add
127	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode.getPosition(),  aliasRef,  namespace);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode.getPosition(),  aliasRef,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode.getPosition(),  aliasRef,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getPosition(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
128	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getPosition(),  namespace);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getPosition(),  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getPosition(),  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getPosition(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
129	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(namespace.getPosition(),  newNode,  aliasRef);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(namespace.getPosition(),  newNode,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(namespace.getPosition(),  newNode,  aliasRef);	  aliasRef.getParent().replaceChild(aliasRef.getPosition(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
130	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  collector,  namespace);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  collector,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  collector,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    collector);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	54	None	replace
131	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  collector,  newNode,  namespace);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  collector,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  collector,  newNode,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    collector);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	54	None	replace
132	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  collection,  namespace);  [CE]  cannot  find  symbol  collection  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  collection,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  collection,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    collector);    	non-compiled	[CE]  cannot  find  symbol  collection	54	None	replace
133	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(scope.getNode(),  newNode,  namespace,  collector);  [CE]  cannot  find  symbol  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(scope.getNode(),  newNode,  namespace,  collector);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(scope.getNode(),  newNode,  namespace,  collector);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    collector);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
134	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  collector,  collector);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  collector,  collector);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  collector,  collector);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    collector);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	54	None	replace
135	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);    	compilable	  [FE]  RuntimeException  	105	10	replace
136	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);    	compilable	  [FE]  RuntimeException  	105	10	replace
137	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode  ==  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode  ==  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);    	compilable	  [FE]  AssertionFailedError  	105	10	replace
138	[BUG]  [BUGGY]  if(newNode  ==  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode  ==  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode  ==  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);    	compilable	  [FE]  AssertionFailedError  	105	10	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);    	compilable	  [FE]  AssertionFailedError  	105	10	replace
140	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);    	compilable	  [FE]  AssertionFailedError  	105	10	replace
141	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  namespace);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode,  namespace);	  aliasRef.getParent().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	88	None	replace
142	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  IR.nullNode());  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode,  IR.nullNode());	  aliasRef.getParent().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	88	None	replace
143	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  i);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode,  i);	  aliasRef.getParent().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	88	None	replace
144	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode,  aliasRef);	  aliasRef.getParent().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	88	None	replace
145	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  this);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode,  this);	  aliasRef.getParent().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	88	None	replace
146	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getNameNode(),  n);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getNameNode(),  n);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode,  aliasRef.getNameNode(),  n);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    n);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
147	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  namespace);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  namespace);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    n);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
148	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(n,  newNode.getNameNode(),  aliasRef);  [CE]  cannot  find  symbol  n  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(n,  newNode.getNameNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(n,  newNode.getNameNode(),  aliasRef);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    n);    	non-compiled	[CE]  cannot  find  symbol  n	80	None	replace
149	[BUG]  [BUGGY]  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  ';'  expected	27	None	replace
150	[BUG]  [BUGGY]  aliasRefs.lastReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.lastReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.lastReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.lastReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	111	None	replace
151	[BUG]  [BUGGY]  aliasRefs.lastReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.lastReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.lastReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime();	  aliasRefs.lastReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	111	None	replace
152	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  newNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  newNode);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    IR.nullNode());    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	91	None	replace
153	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  namespace);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    IR.nullNode());    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	91	None	replace
154	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  scope);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  scope);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  scope);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    IR.nullNode());    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	91	None	replace
155	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  newNodes);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  newNodes);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  newNodes);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    IR.nullNode());    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	91	None	replace
156	[BUG]  [BUGGY]  aliasRef.getNext().removeChild(newNode,  newNode);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNext().removeChild(newNode,  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNext().removeChild(newNode,  newNode);	  aliasRef.getNext().removeChild(newNode);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
157	[BUG]  [BUGGY]  aliasRef.getNext().removeChild(newNode,  i);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNext().removeChild(newNode,  i);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNext().removeChild(newNode,  i);	  aliasRef.getNext().removeChild(newNode);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
158	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	23	None	replace
159	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	23	None	replace
160	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&!aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&!aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  &&!aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	23	None	replace
161	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRefs.references.get(i);	  Node    newNode    =    aliasRef.references.get(i);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
162	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.references.get(i  +  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.references.get(i  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.references.get(i  +  1);	  Node    newNode    =    aliasRef.references.get(i);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
163	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.references.get(i,  size);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.references.get(i,  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.references.get(i,  size);	  Node    newNode    =    aliasRef.references.get(i);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
164	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.references.get(i,  namespace);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.references.get(i,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.references.get(i,  namespace);	  Node    newNode    =    aliasRef.references.get(i);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
165	[BUG]  [BUGGY]  aliasRef.getParent().referenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().referenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().referenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRef.firstReferenceIsAssigningDeclaration()    &&    newNode.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	26	None	replace
166	[BUG]  [BUGGY]  aliasRef.node.firstReferenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.node.firstReferenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.node.firstReferenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRef.firstReferenceIsAssigningDeclaration()    &&    newNode.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	26	None	replace
167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  aliasRef);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reference)  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	NodeTraversal.traverse(compiler,  newNode,  aliasRef);	          NodeTraversal.traverse(compiler,    newNode,    compiler);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reference)	119	None	replace
168	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node)  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRef,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	NodeTraversal.traverse(compiler,  aliasRef,  newNode);	          NodeTraversal.traverse(compiler,    newNode,    compiler);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reference,Node)	119	None	replace
169	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	22	None	replace
170	[BUG]  [BUGGY]  aliasRefs.getFirstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.getFirstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.getFirstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRefs.getFirstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	115	None	replace
171	[BUG]  [BUGGY]  aliasRef.getFirstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getFirstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getFirstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRefs.getFirstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	115	None	replace
172	[BUG]  [BUGGY]  aliasRefs.getLastReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.getLastReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.getLastReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRefs.getFirstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	115	None	replace
173	[BUG]  [BUGGY]  aliasRefs.getFirstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.getFirstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.getFirstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRefs.getFirstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	115	None	replace
174	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);    	compilable	  [FE]  RuntimeException  	37	10	replace
175	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);    	compilable	  [FE]  RuntimeException  	37	10	replace
176	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);    	compilable	  [FE]  RuntimeException  	37	10	replace
177	[BUG]  [BUGGY]  if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);    	compilable	  [FE]  RuntimeException  	37	10	replace
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);    	compilable	  [FE]  AssertionFailedError  	37	10	replace
179	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);    	compilable	  [FE]  AssertionFailedError  	37	10	replace
180	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNode().removeChild(newNode);	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);    	compilable	  [FE]  NullPointerException  	37	10	replace
181	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNode().removeChild(newNode);  [FE]  NullPointerException  [FE]          RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNode().removeChild(newNode);	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);    	compilable	  [FE]  NullPointerException  	37	10	replace
182	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode,  aliasRef.getName().removeChild(newNode);  [CE]  ')'  expected  [FE]          RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().removeChild(newNode,  aliasRef.getName().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().removeChild(newNode,  aliasRef.getName().removeChild(newNode);	          aliasRef.getParent().removeChild(newNode);    aliasRef.getName().removeChild(newNode);    	non-compiled	[CE]  ')'  expected	35	None	replace
183	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getName().removeChild(node);  [CE]  cannot  find  symbol  node  [FE]            RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getName().removeChild(node);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().removeChild(newNode);  aliasRef.getName().removeChild(node);	          aliasRef.getParent().removeChild(newNode);    aliasRef.getName().removeChild(newNode);    	non-compiled	[CE]  cannot  find  symbol  node	35	None	replace
184	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(node);  aliasRef.getName().removeChild(newNode);  [CE]  cannot  find  symbol  node  [FE]              RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().removeChild(node);  aliasRef.getName().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().removeChild(node);  aliasRef.getName().removeChild(newNode);	          aliasRef.getParent().removeChild(newNode);    aliasRef.getName().removeChild(newNode);    	non-compiled	[CE]  cannot  find  symbol  node	35	None	replace
185	[BUG]  [BUGGY]  aliasRef.getName().removeChild(newNode,  i);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().removeChild(newNode,  i);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().removeChild(newNode,  i);	  aliasRef.getName().removeChild(newNode);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
186	[BUG]  [BUGGY]  aliasRef.getName().removeChild(newNode,  newNode);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().removeChild(newNode,  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().removeChild(newNode,  newNode);	  aliasRef.getName().removeChild(newNode);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
187	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getPosition(),  size);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getPosition(),  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getPosition(),  size);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getPosition(),    i);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
188	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getPosition(),  size);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getPosition(),  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode,  aliasRef.getPosition(),  size);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getPosition(),    i);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
189	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  namespace.getPosition(),  i);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  namespace.getPosition(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode,  namespace.getPosition(),  i);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getPosition(),    i);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
190	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime());	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    newNode.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	30	None	replace
191	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.getLastChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.getLastChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.getLastChild();	  Node    newNode    =    aliasRef.getFirstChild();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	117	None	replace
192	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  newNodes.add(newNode);    	compilable	  [FE]  AssertionFailedError  	75	10	replace
193	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  newNodes.add(newNode);    	compilable	  [FE]  AssertionFailedError  	75	10	replace
194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }	  newNodes.add(newNode);    	compilable	  [FE]  AssertionFailedError  	75	10	replace
195	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }	  newNodes.add(newNode);    	compilable	  [FE]  AssertionFailedError  	75	10	replace
196	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(aliasRef.getNode(),  newNode);  }  [CE]  method  scanNewNodes  in  class  GlobalNamespace  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(aliasRef.getNode(),  newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(aliasRef.getNode(),  newNode);  }	  newNodes.add(newNode);    	non-compiled	[CE]  method  scanNewNodes  in  class  GlobalNamespace  cannot  be  applied  to  given  types;	75	None	replace
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode!=  null)  {  newNodes.add(newNode);  }	  newNodes.add(newNode);    	compilable	  [FE]  AssertionFailedError  	75	10	replace
198	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  newNodes.add(newNode);  }	  newNodes.add(newNode);    	compilable	  [FE]  AssertionFailedError  	75	10	replace
199	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNode,  scope);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNode,  scope);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNode,  scope);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	92	None	replace
200	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNode,  size);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNode,  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNode,  size);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	92	None	replace
201	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNodes);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNodes);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNodes);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	92	None	replace
202	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.removeFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.removeFirstChild();	  Node    newNode    =    alias.node.removeFirstChild();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	83	None	replace
203	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  size);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  size);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
204	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getNameNode(),  i);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getNameNode(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode,  aliasRef.getNameNode(),  i);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
205	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  namespace.getNameNode(),  i);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  namespace.getNameNode(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode,  namespace.getNameNode(),  i);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
206	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
207	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
208	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
209	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime());	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	32	None	replace
210	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getNext(),  newNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getNext(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef.getNext(),  newNode);	  aliasRef.getName().replaceChild(aliasRef.getParent(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
211	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.getParent(),  i);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.getParent(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef,  newNode.getParent(),  i);	  aliasRef.getName().replaceChild(aliasRef.getParent(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
212	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getParent(),  newNode,  namespace);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getParent(),  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef.getParent(),  newNode,  namespace);	  aliasRef.getName().replaceChild(aliasRef.getParent(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
213	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNode(),  namespace);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNode(),  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getNode(),  namespace);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
214	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNode(),  i);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNode(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getNode(),  i);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
215	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode.getNameNode(),  aliasRef,  namespace);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode.getNameNode(),  aliasRef,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode.getNameNode(),  aliasRef,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
216	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(namespace.getNameNode(),  newNode,  aliasRef);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(namespace.getNameNode(),  newNode,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(namespace.getNameNode(),  newNode,  aliasRef);	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
217	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getPosition(),  aliasRef);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getPosition(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode,  aliasRef.getPosition(),  aliasRef);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getPosition(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
218	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(alias.node,  aliasRef.getNode(),  newNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(alias.node,  aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(alias.node,  aliasRef.getNode(),  newNode);	  aliasRef.getParent().replaceChild(newNode,    aliasRef.getNode(),    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	40	None	replace
219	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i);	  aliasRef.getParent().replaceChild(newNode,    aliasRef.getNode(),    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	40	None	replace
220	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  aliasRef);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  aliasRef);	  aliasRef.getParent().replaceChild(newNode,    aliasRef.getNode(),    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	40	None	replace
221	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getNode(),  newNode);	  aliasRef.getParent().replaceChild(newNode,    aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
222	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	compilable	  [FE]  RuntimeException  	95	10	replace
223	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	compilable	  [FE]  RuntimeException  	95	10	replace
224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode  ==  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode  ==  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	compilable	  [FE]  AssertionFailedError  	95	10	replace
225	[BUG]  [BUGGY]  if(newNode  ==  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode  ==  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode  ==  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	compilable	  [FE]  AssertionFailedError  	95	10	replace
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	compilable	  [FE]  AssertionFailedError  	95	10	replace
227	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	compilable	  [FE]  AssertionFailedError  	95	10	replace
228	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	15	None	replace
229	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  aliasParent.replaceChild(alias.node,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasParent.replaceChild(alias.node,    newNode);    aliasParent.replaceChild(alias.node,  newNode);	  	compilable	  [FE]  IllegalArgumentException  	45	10	add
230	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  aliasParent.replaceChild(alias.node,  newNode);  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  aliasParent.replaceChild(alias.node,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    aliasParent.replaceChild(alias.node,  newNode);	  	compilable	  [FE]  IllegalArgumentException  	45	10	add
231	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  newNodes.add(alias.node,  newNode);  [CE]  no  suitable  method  found  for  add(Node,Node)  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  newNodes.add(alias.node,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    newNodes.add(alias.node,  newNode);	  	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Node)	45	None	add
232	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  aliasParent.replaceChild(alias.ode,  newNode);  [CE]  cannot  find  symbol  ode  [FE]        IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  aliasParent.replaceChild(alias.ode,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    aliasParent.replaceChild(alias.ode,  newNode);	  	non-compiled	[CE]  cannot  find  symbol  ode	45	None	add
233	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime());	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    newNode.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	17	None	replace
234	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getNode().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	36	10	add
235	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getNode().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	36	10	add
236	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode);  aliasRef.getNode().removeChild(newNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode);  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getNode().removeChild(newNode);    aliasRef.getParent().replaceChild(newNode);  aliasRef.getNode().removeChild(newNode);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	36	None	add
237	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getName().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getName().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getNode().removeChild(newNode);    aliasRef.getName().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);	  	non-compiled	[CE]  cannot  find  symbol	36	None	add
238	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  newNode.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getNode().removeChild(newNode);    newNode.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	36	10	add
239	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  newNode.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  newNode.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getNode().removeChild(newNode);    newNode.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	36	10	add
240	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	newNodes.add(newNode);    newNodes.add(newNode);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	74	1	add
241	[BUG]  [BUGGY]  newNodes.add(newNode);  newNodes.add(newNode);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(newNode);    newNodes.add(newNode);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	74	1	add
242	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	newNodes.add(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);	  	compilable	  [FE]  NullPointerException  	74	10	add
243	[BUG]  [BUGGY]  newNodes.add(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);	  	compilable	  [FE]  NullPointerException  	74	10	add
244	[BUG]  [BUGGY]  newNodes.add(newNode);  aliasRefs.add(newNode);  [CE]  method  add  in  class  ReferenceCollection  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  aliasRefs.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(newNode);    aliasRefs.add(newNode);	  	non-compiled	[CE]  method  add  in  class  ReferenceCollection  cannot  be  applied  to  given  types;	74	None	add
245	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	newNodes.add(newNode);    aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	74	10	add
246	[BUG]  [BUGGY]  newNodes.add(newNode);  aliasRef.getParent().removeChild(newNode);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(newNode);    aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	74	10	add
247	[BUG]  [BUGGY]  newNodes.add(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode);	  	non-compiled	[CE]  cannot  find  symbol	74	None	add
248	[BUG]  [BUGGY]  newNodes.add(newNode);  aliasRef.getParent().replaceChild(aliasRef.getName(),  newNode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  aliasRef.getParent().replaceChild(aliasRef.getName(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(newNode);    aliasRef.getParent().replaceChild(aliasRef.getName(),  newNode);	  	non-compiled	[CE]  cannot  find  symbol	74	None	add
249	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  mapper.newHashMap());  [CE]  cannot  find  symbol  mapper  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  mapper.newHashMap());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  mapper.newHashMap());	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    IR.newHashMap());    	non-compiled	[CE]  cannot  find  symbol  mapper	93	None	replace
250	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  IR.newHashMap());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  IR.newHashMap());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode,  IR.newHashMap());	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    IR.newHashMap());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
251	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace.newHashMap());  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace.newHashMap());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace.newHashMap());	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    IR.newHashMap());    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
252	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  aliasRef.getNode(),  newNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  aliasRef.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  aliasRef.getNode(),  newNode);	  aliasRef.getParent().replaceChild(newNode,    aliasRef.getNode(),    aliasRef);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	87	None	replace
253	[BUG]  [BUGGY]  aliasRef.getNode().firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNode().firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRef.getNode().firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	97	None	replace
254	[BUG]  [BUGGY]  aliasRef.getNode().firstReferenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().firstReferenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNode().firstReferenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {	  aliasRef.getNode().firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	97	None	replace
255	[BUG]  [BUGGY]  aliasRef.getParent().firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRef.getNode().firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	97	None	replace
256	[BUG]  [BUGGY]  aliasParent.replaceChild(aliasRef,  newNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasParent.replaceChild(aliasRef,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasParent.replaceChild(aliasRef,  newNode);	          aliasParent.replaceChild(alias.node,    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	46	None	replace
257	[BUG]  [BUGGY]  aliasParent.replaceChild(alias.node,  newNode,  IR.nullNode());  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasParent.replaceChild(alias.node,  newNode,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasParent.replaceChild(alias.node,  newNode,  IR.nullNode());	          aliasParent.replaceChild(alias.node,    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	46	None	replace
258	[BUG]  [BUGGY]  aliasParent.replaceChild(alias.node,  newNode,  namespace);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasParent.replaceChild(alias.node,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasParent.replaceChild(alias.node,  newNode,  namespace);	          aliasParent.replaceChild(alias.node,    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	46	None	replace
259	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasParent.replaceChild(alias.node,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	aliasParent.replaceChild(alias.node,  IR.nullNode());	          aliasParent.replaceChild(alias.node,    newNode);    	compilable	  [FE]  RuntimeException  	46	10	replace
260	[BUG]  [BUGGY]  aliasParent.replaceChild(alias.node,  IR.nullNode());  [FE]  RuntimeException  [FE]          IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasParent.replaceChild(alias.node,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasParent.replaceChild(alias.node,  IR.nullNode());	          aliasParent.replaceChild(alias.node,    newNode);    	compilable	  [FE]  RuntimeException  	46	10	replace
261	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	aliasRef.getNode().replaceChild(aliasRef.getNode(),  newNode);	  aliasRef.getNode().removeChild(newNode);    	compilable	  [FE]  NullPointerException  	60	10	replace
262	[BUG]  [BUGGY]  aliasRef.getNode().replaceChild(aliasRef.getNode(),  newNode);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNode().replaceChild(aliasRef.getNode(),  newNode);	  aliasRef.getNode().removeChild(newNode);    	compilable	  [FE]  NullPointerException  	60	10	replace
263	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      NullPointerException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().addChildToFront(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	aliasRef.getNode().addChildToFront(newNode);	  aliasRef.getNode().removeChild(newNode);    	compilable	  [FE]  IllegalStateException  	60	10	replace
264	[BUG]  [BUGGY]  aliasRef.getNode().addChildToFront(newNode);  [FE]  IllegalStateException  [FE]      NullPointerException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().addChildToFront(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNode().addChildToFront(newNode);	  aliasRef.getNode().removeChild(newNode);    	compilable	  [FE]  IllegalStateException  	60	10	replace
265	[BUG]  [BUGGY]  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration(),  newNode);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration(),  newNode);	  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
266	[BUG]  [BUGGY]  newNodes.add(aliasRef.node.firstReferenceIsAssigningDeclaration());  [CE]  cannot  find  symbol  node  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(aliasRef.node.firstReferenceIsAssigningDeclaration());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(aliasRef.node.firstReferenceIsAssigningDeclaration());	  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol  node	14	None	replace
267	[BUG]  [BUGGY]  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration(),  namespace);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration(),  namespace);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration(),  namespace);	  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
268	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getNameNode(),  aliasRef);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getNameNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode,  aliasRef.getNameNode(),  aliasRef);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
269	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }	  aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    	compilable	  [FE]  AssertionFailedError  	99	10	replace
270	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }	  aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    	compilable	  [FE]  AssertionFailedError  	99	10	replace
271	[BUG]  [BUGGY]  if(aliasRef.isAssignedOnceInLifetime())  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(aliasRef.isAssignedOnceInLifetime())  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(aliasRef.isAssignedOnceInLifetime())  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }	  aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    	compilable	  [FE]  AssertionFailedError  	99	10	replace
273	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  else  {  compiler.reportCodeChange();  }	  aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    	compilable	  [FE]  AssertionFailedError  	99	10	replace
274	[BUG]  [BUGGY]  Node  newNode  =  alias.node.getLastChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  alias.node.getLastChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  alias.node.getLastChild();	  Node    newNode    =    alias.node.getFirstChild();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	85	None	replace
275	[BUG]  [BUGGY]  Node  newNode  =  aliasref.node.cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasref.node.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasref.node.cloneTree();	  Node    newNode    =    aliasRef.node.cloneTree()    +    1;    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	120	None	replace
276	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssignedDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssignedDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssignedDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.firstReferenceIsAssignedDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	112	None	replace
277	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssignedDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssignedDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssignedDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.firstReferenceIsAssignedDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	112	None	replace
278	[BUG]  [BUGGY]  aliasRef.getParent().referenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().referenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().referenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRef.getParent().referenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
279	[BUG]  [BUGGY]  aliasRef.getParent().referenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().referenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().referenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {	  aliasRef.getParent().referenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
280	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.newNode(i);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.newNode(i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.newNode(i);	          Node    newNode    =    aliasRef.newNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	44	None	replace
281	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.newNode(namespace);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.newNode(namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.newNode(namespace);	          Node    newNode    =    aliasRef.newNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	44	None	replace
282	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.node();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.node();	          Node    newNode    =    aliasRef.newNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	44	None	replace
283	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(newNode,  aliasRef.getNode(),  aliasRef);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(newNode,  aliasRef.getNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(newNode,  aliasRef.getNode(),  aliasRef);	  aliasRef.getNamespace().replaceChild(aliasRef,    newNode.getNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
284	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  null);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  null);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  null);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    null);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	55	None	replace
285	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  null,  scope);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  null,  scope);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  null,  scope);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    null);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	55	None	replace
286	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  null,  size);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  null,  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  null,  size);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    null);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	55	None	replace
287	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	aliasRef.getNode().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);	  	compilable	  [FE]  NullPointerException  	59	10	add
288	[BUG]  [BUGGY]  aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNode().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);	  	compilable	  [FE]  NullPointerException  	59	10	add
289	[BUG]  [BUGGY]  aliasRef.getNode().removeChild(newNode);  Node  newNode  =  aliasRef.getNode().removeChild(newNode);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      NullPointerException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().removeChild(newNode);  Node  newNode  =  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNode().removeChild(newNode);    Node  newNode  =  aliasRef.getNode().removeChild(newNode);	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	59	None	add
290	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	aliasRef.getNode().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  NullPointerException  	59	10	add
291	[BUG]  [BUGGY]  aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNode().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  NullPointerException  	59	10	add
292	[BUG]  [BUGGY]  aliasRef.getNode().removeChild(newNode);  aliasRef.getName().removeChild(newNode);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().removeChild(newNode);  aliasRef.getName().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNode().removeChild(newNode);    aliasRef.getName().removeChild(newNode);	  	non-compiled	[CE]  cannot  find  symbol	59	None	add
293	[BUG]  [BUGGY]  aliasRefs.getFirstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.getFirstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.getFirstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.getFirstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	110	None	replace
294	[BUG]  [BUGGY]  aliasRef.getFirstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getFirstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getFirstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.getFirstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	110	None	replace
295	[BUG]  [BUGGY]  aliasRef.getFirstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getFirstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getFirstReferenceIsAssigningDeclaration()  ||  aliasRef.isAssignedOnceInLifetime())  {	  aliasRefs.getFirstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	110	None	replace
296	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
297	[BUG]  [BUGGY]  newNode.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNode.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNode.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
298	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode)  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode)  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode)	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode)    	non-compiled	[CE]  ';'  expected	113	None	replace
299	[BUG]  [BUGGY]  aliasRef.getNameNode().replaceChild(aliasRef.getNameNode(),  newNode)  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNameNode().replaceChild(aliasRef.getNameNode(),  newNode)  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNameNode().replaceChild(aliasRef.getNameNode(),  newNode)	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode)    	non-compiled	[CE]  ';'  expected	113	None	replace
300	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode.getNameNode(),  aliasRef)  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode.getNameNode(),  aliasRef)  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode.getNameNode(),  aliasRef)	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode)    	non-compiled	[CE]  ';'  expected	113	None	replace
301	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);	  aliasRefs.firstReferenceIsDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	108	None	replace
302	[BUG]  [BUGGY]  aliasRef.firstReferenceIsDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);	  aliasRefs.firstReferenceIsDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	108	None	replace
303	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.getFirstChild(),  aliasRef);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.getFirstChild(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef,  newNode.getFirstChild(),  aliasRef);	  aliasRef.getName().replaceChild(aliasRef,    newNode.getNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
304	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  RuntimeException  	42	10	replace
305	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [FE]  RuntimeException  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  RuntimeException  	42	10	replace
306	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  RuntimeException  	42	10	replace
307	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [FE]  RuntimeException  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  else  {  namespace.scanNewNodes(alias.scope,  newNodes);  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  RuntimeException  	42	10	replace
308	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(newNode.getNode(),  aliasRef,  namespace);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(newNode.getNode(),  aliasRef,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(newNode.getNode(),  aliasRef,  namespace);	  aliasRef.getName().replaceChild(aliasRef.getNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
309	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(namespace.getNode(),  newNode,  aliasRef);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(namespace.getNode(),  newNode,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(namespace.getNode(),  newNode,  aliasRef);	  aliasRef.getName().replaceChild(aliasRef.getNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
310	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	41	10	add
311	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  IllegalArgumentException  	41	10	add
312	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias.node,  newNode);	  	compilable	  [FE]  IllegalArgumentException  	41	10	add
313	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias.node,  newNode);	  	compilable	  [FE]  IllegalArgumentException  	41	10	add
314	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias,  newNode);  compiler.reportCodeChange();  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias,  newNode);  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias,  newNode);  compiler.reportCodeChange();	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	41	None	add
315	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  newNodes.add(alias.node,  newNode);  compiler.reportCodeChange();  [CE]  no  suitable  method  found  for  add(Node,Node)  [FE]          IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  newNodes.add(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    newNodes.add(alias.node,  newNode);  compiler.reportCodeChange();	  	non-compiled	[CE]  no  suitable  method  found  for  add(Node,Node)	41	None	add
316	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildIntoFront(newNode);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildIntoFront(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().addChildToFront(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildIntoFront(newNode);	  	non-compiled	[CE]  cannot  find  symbol	104	None	add
317	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().addChildToFront(newNode);    aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	104	10	add
318	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  aliasRef.getParent().removeChild(newNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().addChildToFront(newNode);    aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	104	10	add
319	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getLastChild(),  n);  [CE]  cannot  find  symbol  n  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getLastChild(),  n);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getLastChild(),  n);	  aliasRef.getParent().replaceChild(aliasRef.getLastChild(),    newNode);    	non-compiled	[CE]  cannot  find  symbol  n	3	None	replace
320	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);    	compilable	  [FE]  RuntimeException  	105	10	replace
321	[BUG]  [BUGGY]  if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);    	compilable	  [FE]  RuntimeException  	105	10	replace
322	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  else  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  else  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  else  {	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
323	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.getNewNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.getNewNode();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.getNewNode();	  Node    newNode    =    aliasRef.getNameNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	78	None	replace
324	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  aliasRef.getNameNode(),  newNode);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  aliasRef.getNameNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  aliasRef.getNameNode(),  newNode);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
325	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null)  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null)  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null)  {  compiler.reportCodeChange();	  aliasRef.firstReferenceIsAssigningDeclaration()    &&    newNode.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	26	None	replace
326	[BUG]  [BUGGY]  aliasRef,  aliasRef.getNamespace().replaceChild(newNode,  aliasRef);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef,  aliasRef.getNamespace().replaceChild(newNode,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef,  aliasRef.getNamespace().replaceChild(newNode,  aliasRef);	  aliasRef.getNamespace().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  not  a  statement	82	None	replace
327	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode).replaceChild(aliasRef,  newNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode).replaceChild(aliasRef,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(aliasRef,  newNode).replaceChild(aliasRef,  newNode);	  aliasRef.getNamespace().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
328	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(newNode,  aliasRef.getNode(),  aliasRef);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(newNode,  aliasRef.getNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(newNode,  aliasRef.getNode(),  aliasRef);	  aliasRef.getName().replaceChild(aliasRef,    newNode.getNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
329	[BUG]  [BUGGY]  aliasRef.getNext().replaceChild(aliasRef.getNameNode(),  newNode)  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNext().replaceChild(aliasRef.getNameNode(),  newNode)  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNext().replaceChild(aliasRef.getNameNode(),  newNode)	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode)    	non-compiled	[CE]  ';'  expected	113	None	replace
330	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getNode().removeChild(newNode);    aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  aliasRef.getNode().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	36	10	add
331	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  aliasRef.getNode().removeChild(newNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getNode().removeChild(newNode);    aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  aliasRef.getNode().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	36	10	add
332	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getNode().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	36	10	add
333	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getNode().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	36	10	add
334	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode,  this.namespace);  [CE]  cannot  find  symbol  namespace  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode,  this.namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode,  this.namespace);	  aliasRef.getName().replaceChild(aliasRef.getNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol  namespace	49	None	replace
335	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  namespace.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  namespace.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef,  namespace.getNode(),  newNode);	  aliasRef.getName().replaceChild(aliasRef.getNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
336	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&!aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&!aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  &&!aliasRefs.isAssignedOnceInLifetime())  {	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
337	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null)  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null)  {  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null)  {  newNodes.add(newNode);	  aliasRefs.firstReferenceIsAssigningDeclaration())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	29	None	replace
338	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNode  ==  null)  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNode  ==  null)  {  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNode  ==  null)  {  newNodes.add(newNode);	  aliasRefs.firstReferenceIsAssigningDeclaration())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	29	None	replace
339	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().replaceChild(newNode,  IR.nullNode());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	aliasRef.getNode().removeChild(newNode);    aliasRef.getNode().replaceChild(newNode,  IR.nullNode());	  	compilable	  [FE]  NullPointerException  	59	10	add
340	[BUG]  [BUGGY]  aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().replaceChild(newNode,  IR.nullNode());  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().replaceChild(newNode,  IR.nullNode());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNode().removeChild(newNode);    aliasRef.getNode().replaceChild(newNode,  IR.nullNode());	  	compilable	  [FE]  NullPointerException  	59	10	add
341	[BUG]  [BUGGY]  aliasRef.getNode().removeChild(newNode);  Node  newNode  =  aliasRef.getNode().cloneTree();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      NullPointerException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().removeChild(newNode);  Node  newNode  =  aliasRef.getNode().cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNode().removeChild(newNode);    Node  newNode  =  aliasRef.getNode().cloneTree();	  	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	59	None	add
342	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  inlineAliases);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	NodeTraversal.traverse(compiler,  newNode,  inlineAliases);	          NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,boolean)	96	None	replace
343	[BUG]  [BUGGY]  aliasRefs.getFirstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.getFirstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.getFirstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {	  aliasRefs.getFirstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	110	None	replace
344	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode,  IR.nullNode());  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode,  IR.nullNode());	  aliasRef.getParent().replaceChild(aliasRef.getPosition(),    newNode,    i);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
345	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode,  0);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode,  0);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode,  0);	  aliasRef.getParent().replaceChild(aliasRef.getPosition(),    newNode,    i);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
346	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  aliasRef.cloneTree(),  newNode);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  aliasRef.cloneTree(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef,  aliasRef.cloneTree(),  newNode);	  aliasRef.getName().replaceChild(aliasRef,    aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
347	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNamespace().removeChild(newNode);  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNamespace().removeChild(newNode);  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getNamespace().removeChild(newNode);  aliasRef.getParent().removeChild(aliasRef.getNode(),  newNode);	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
348	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	94	10	add
349	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().removeChild(newNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	94	10	add
350	[BUG]  [BUGGY]  AliasRef.getParent().removeChild(newNode);  aliasRef.getNext().removeChild(newNode);  [CE]  cannot  find  symbol  AliasRef  [FE]              RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  AliasRef.getParent().removeChild(newNode);  aliasRef.getNext().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	AliasRef.getParent().removeChild(newNode);  aliasRef.getNext().removeChild(newNode);	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNext().removeChild(newNode);    	non-compiled	[CE]  cannot  find  symbol  AliasRef	38	None	replace
351	[BUG]  [BUGGY]  node.getParent().removeChild(newNode);  aliasRef.getNext().removeChild(newNode);  [CE]  cannot  find  symbol  node  [FE]                RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  node.getParent().removeChild(newNode);  aliasRef.getNext().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	node.getParent().removeChild(newNode);  aliasRef.getNext().removeChild(newNode);	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNext().removeChild(newNode);    	non-compiled	[CE]  cannot  find  symbol  node	38	None	replace
352	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.getNode();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.getNode();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.getNode();	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	5	None	replace
353	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.cloneFirstChild();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.node.cloneFirstChild();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.node.cloneFirstChild();	  Node    newNode    =    aliasRef.node.removeFirstChild();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	72	None	replace
354	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  globalNamespace);  [CE]  cannot  find  symbol  globalNamespace  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  globalNamespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  globalNamespace);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    this);    	non-compiled	[CE]  cannot  find  symbol  globalNamespace	56	None	replace
355	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  this,  namespace);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  this,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  this,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    this);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	56	None	replace
356	[BUG]  [BUGGY]  aliasRef.firstReferenceIsDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());	  aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	16	None	replace
357	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  IR.nullNode());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  IR.nullNode());	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
358	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.cloneNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.cloneNode();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.cloneNode();	  Node    newNode    =    aliasRef.cloneTree();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	58	None	replace
359	[BUG]  [BUGGY]  aliasRefs.lastReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.lastReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.lastReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNode.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	25	None	replace
360	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  aliasRef.getPosition(),  newNode);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  aliasRef.getPosition(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  aliasRef.getPosition(),  newNode);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getPosition(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
361	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  compiler,  newNodes);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  compiler,  newNodes);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  compiler,  newNodes);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    compiler);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	53	None	replace
362	[BUG]  [BUGGY]  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration()  +  1);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration()  +  1);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration()  +  1);	  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
363	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.newNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.node.newNode();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.node.newNode();	          Node    newNode    =    aliasRef.newNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	44	None	replace
364	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.newNode()  +  1;  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.newNode()  +  1;  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.newNode()  +  1;	          Node    newNode    =    aliasRef.newNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	44	None	replace
365	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(scope.getNode(),  newNode,  namespace);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(scope.getNode(),  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(scope.getNode(),  newNode,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    scope);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
366	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  Node  aliasParent  =  alias.node.cloneTree();  [CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  Node  aliasParent  =  alias.node.cloneTree();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    Node  aliasParent  =  alias.node.cloneTree();	  	non-compiled	[CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	45	None	add
367	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  Node  aliasParent  =  aliasRef.cloneTree();  [CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  Node  aliasParent  =  aliasRef.cloneTree();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    Node  aliasParent  =  aliasRef.cloneTree();	  	non-compiled	[CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	45	None	add
368	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  Node  aliasParent  =  aliasRef.getParent();  [CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  Node  aliasParent  =  aliasRef.getParent();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    Node  aliasParent  =  aliasRef.getParent();	  	non-compiled	[CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	45	None	add
369	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  n.getNameNode(),  newNode);  [CE]  cannot  find  symbol  n  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  n.getNameNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  n.getNameNode(),  newNode);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    n);    	non-compiled	[CE]  cannot  find  symbol  n	80	None	replace
370	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.node.removeFirstChild();  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.node.removeFirstChild();  compiler.reportCodeChange();	          Node    newNode    =    aliasRef.node.cloneTree();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	43	None	replace
371	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.node.getFirstChild();  compiler.reportCodeChange();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.node.getFirstChild();  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.node.getFirstChild();  compiler.reportCodeChange();	          Node    newNode    =    aliasRef.node.cloneTree();    compiler.reportCodeChange();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	43	None	replace
372	[BUG]  [BUGGY]  aliasRef.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
373	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.getNode()  +  1;  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.getNode()  +  1;  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.getNode()  +  1;	  Node    newNode    =    aliasRef.getNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	19	None	replace
374	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  args);  [CE]  cannot  find  symbol  args  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  args);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  args);	  aliasRef.getParent().replaceChild(newNode,    aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol  args	40	None	replace
375	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getPosition(),  i);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode,  aliasRef.getPosition(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode,  aliasRef.getPosition(),  i);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getPosition(),    i);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
376	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IOContext.newHashMap());  [CE]  cannot  find  symbol  IOContext  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IOContext.newHashMap());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IOContext.newHashMap());	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    IR.newHashMap());    	non-compiled	[CE]  cannot  find  symbol  IOContext	93	None	replace
377	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  0);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  0);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  0);	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode,    i);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
378	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  Node  aliasParent  =  alias.node.cloneTree();  [CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  Node  aliasParent  =  alias.node.cloneTree();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    Node  aliasParent  =  alias.node.cloneTree();	  	non-compiled	[CE]  variable  aliasParent  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	41	None	add
379	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null)  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null)  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null)  {  compiler.reportCodeChange();	  aliasRefs.firstReferenceIsAssigningDeclaration())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	24	None	replace
380	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRefs.firstReferenceIsAssigningDeclaration())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	24	None	replace
381	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode()));  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode()));  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode()));	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    IR.nullNode());    	non-compiled	[CE]  ';'  expected	91	None	replace
382	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  aliasRef.cloneTree(),  newNode);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  aliasRef.cloneTree(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(aliasRef,  aliasRef.cloneTree(),  newNode);	  aliasRef.getNamespace().replaceChild(aliasRef,    aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
383	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	33	10	add
384	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  aliasRef.getParent().removeChild(newNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	33	10	add
385	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.references.get(i,  newNode);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.references.get(i,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.references.get(i,  newNode);	  Node    newNode    =    aliasRef.references.get(i);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
386	[BUG]  [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  +  1);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRefs.references.get(i  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRefs.references.get(i  +  1);	  Node    newNode    =    aliasRef.references.get(i);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
387	[BUG]  [BUGGY]  aliasRef,  newNode.getName().replaceChild(aliasRef.getNode(),  aliasRef);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef,  newNode.getName().replaceChild(aliasRef.getNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef,  newNode.getName().replaceChild(aliasRef.getNode(),  aliasRef);	  aliasRef.getName().replaceChild(newNode.getNode(),    aliasRef);    	non-compiled	[CE]  not  a  statement	51	None	replace
388	[BUG]  [BUGGY]  aliasRef.removeChild(newNode);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.removeChild(newNode);  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.removeChild(newNode);  compiler.reportCodeChange();	          aliasParent.removeChild(newNode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
389	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasParent.removeChild(newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	aliasParent.removeChild(newNode);	          aliasParent.removeChild(newNode);    compiler.reportCodeChange();    	compilable	  [FE]  RuntimeException  	48	10	replace
390	[BUG]  [BUGGY]  aliasParent.removeChild(newNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasParent.removeChild(newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasParent.removeChild(newNode);	          aliasParent.removeChild(newNode);    compiler.reportCodeChange();    	compilable	  [FE]  RuntimeException  	48	10	replace
391	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  newNodes.add(newNode);	  if(aliasRefs.isAssignedOnceInLifetime())    {    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    }    	non-compiled	[CE]  not  a  statement	121	None	replace
392	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  newNodes.add(newNode);	  if(aliasRefs.isAssignedOnceInLifetime())    {    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    }    	non-compiled	[CE]  not  a  statement	121	None	replace
393	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  namespace.getPosition(),  newNode);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  namespace.getPosition(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  namespace.getPosition(),  newNode);	  aliasRef.getParent().replaceChild(aliasRef.getPosition(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
394	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isStatementOnceInLifetime());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isStatementOnceInLifetime());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isStatementOnceInLifetime());	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	32	None	replace
395	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssignedDeclaration()  ||  newNode.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssignedDeclaration()  ||  newNode.isAssignedOnceInLifetime();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssignedDeclaration()  ||  newNode.isAssignedOnceInLifetime();	  aliasRefs.firstReferenceIsAssignedDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	112	None	replace
396	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getName(),  newNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getName(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef.getName(),  newNode);	  aliasRef.getName().replaceChild(aliasRef.getParent(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
397	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  var);  [CE]  cannot  find  symbol  var  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  var);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode,  var);	  aliasRef.getParent().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol  var	88	None	replace
398	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  n);  [CE]  cannot  find  symbol  n  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  n);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode,  n);	  aliasRef.getParent().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol  n	88	None	replace
399	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }	  aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    	compilable	  [FE]  AssertionFailedError  	99	10	replace
400	[BUG]  [BUGGY]  if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }	  aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    	compilable	  [FE]  AssertionFailedError  	99	10	replace
401	[BUG]  [BUGGY]  aliasRefs.referenceIsAssigningDeclaration();  newNodes.add(newNode);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.referenceIsAssigningDeclaration();  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.referenceIsAssigningDeclaration();  newNodes.add(newNode);	  aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
402	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  else  {  aliasRefs.replaceChild(aliasRef.getNode(),  newNode);  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  else  {  aliasRefs.replaceChild(aliasRef.getNode(),  newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  else  {  aliasRefs.replaceChild(aliasRef.getNode(),  newNode);  }	  aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
403	[BUG]  [BUGGY]  newNodes.add(newNode);  Node  newNodes  =  newNode.cloneTree();  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  Node  newNodes  =  newNode.cloneTree();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(newNode);    Node  newNodes  =  newNode.cloneTree();	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	74	None	add
404	[BUG]  [BUGGY]  newNodes.add(newNode);  Node  newNodes  =  Sets.newHashSet(newNode);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  Node  newNodes  =  Sets.newHashSet(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(newNode);    Node  newNodes  =  Sets.newHashSet(newNode);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	74	None	add
405	[BUG]  [BUGGY]  newNodes.add(newNode);  Node  newNodes  =  aliasRefs.getNode();  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  Node  newNodes  =  aliasRefs.getNode();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(newNode);    Node  newNodes  =  aliasRefs.getNode();	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	74	None	add
406	[BUG]  [BUGGY]  newNodes.add(newNode);  Node  newNodes  =  aliasRefs.add(newNode);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  Node  newNodes  =  aliasRefs.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(newNode);    Node  newNodes  =  aliasRefs.add(newNode);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	74	None	add
407	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNode,  inlineAliasIfPossible);  [CE]  cannot  find  symbol  inlineAliasIfPossible  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNode,  inlineAliasIfPossible);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNode,  inlineAliasIfPossible);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    newNode);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasIfPossible	92	None	replace
408	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNode,  inlineAliases);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNode,  inlineAliases);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNode,  inlineAliases);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	92	None	replace
409	[BUG]  [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(aliasRef,  IR.nullNode());  compiler.reportCodeChange();  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(aliasRef,  IR.nullNode());  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.removeChild(newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(aliasRef,  IR.nullNode());  compiler.reportCodeChange();	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	47	None	add
410	[BUG]  [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(aliasRef,  IR.cloneTree());  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(aliasRef,  IR.cloneTree());  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.removeChild(newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(aliasRef,  IR.cloneTree());  compiler.reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
411	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	compilable	  [FE]  RuntimeException  	95	10	replace
412	[BUG]  [BUGGY]  if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(aliasRef.getParent()!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	compilable	  [FE]  RuntimeException  	95	10	replace
413	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  else  {  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  else  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  else  {	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
414	[BUG]  [BUGGY]  aliasParent.replaceChild(alias.parent,  newNode);  [CE]  cannot  find  symbol  parent  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasParent.replaceChild(alias.parent,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasParent.replaceChild(alias.parent,  newNode);	          aliasParent.replaceChild(alias.node,    newNode);    	non-compiled	[CE]  cannot  find  symbol  parent	46	None	replace
415	[BUG]  [BUGGY]  aliasParent.replaceChild(alias.node,  newNode  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasParent.replaceChild(alias.node,  newNode  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasParent.replaceChild(alias.node,  newNode  +  1);	          aliasParent.replaceChild(alias.node,    newNode);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	46	None	replace
416	[BUG]  [BUGGY]  AliasRef.getParent().removeChild(newNode);  aliasRef.getName().removeChild(newNode);  [CE]  cannot  find  symbol  AliasRef  [FE]          RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  AliasRef.getParent().removeChild(newNode);  aliasRef.getName().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	AliasRef.getParent().removeChild(newNode);  aliasRef.getName().removeChild(newNode);	          aliasRef.getParent().removeChild(newNode);    aliasRef.getName().removeChild(newNode);    	non-compiled	[CE]  cannot  find  symbol  AliasRef	35	None	replace
417	[BUG]  [BUGGY]  aliasRef.getNext().removeChild(newNode);  aliasRef.getName().removeChild(newNode);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNext().removeChild(newNode);  aliasRef.getName().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNext().removeChild(newNode);  aliasRef.getName().removeChild(newNode);	          aliasRef.getParent().removeChild(newNode);    aliasRef.getName().removeChild(newNode);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
418	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  compiler.getNameNode(),  newNode,  namespace);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  compiler.getNameNode(),  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  compiler.getNameNode(),  newNode,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
419	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }  else  {  newNodes.add(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }  else  {  newNodes.add(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);    	compilable	  [FE]  RuntimeException  	37	10	replace
420	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }  else  {  newNodes.add(newNode);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }  else  {  newNodes.add(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getNode().removeChild(newNode);  }  else  {  newNodes.add(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);    	compilable	  [FE]  RuntimeException  	37	10	replace
421	[BUG]  [BUGGY]  aliasRefs.referenceIsAssigningDeclaration();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.referenceIsAssigningDeclaration();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.referenceIsAssigningDeclaration();	  aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
422	[BUG]  [BUGGY]  aliasRefs.nodeIsAssigningDeclaration();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.nodeIsAssigningDeclaration();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.nodeIsAssigningDeclaration();	  aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
423	[BUG]  [BUGGY]  aliasRef.firstReferenceIsDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	23	None	replace
424	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(aliasRef,  newNode);  }  [CE]  method  scanNewNodes  in  class  GlobalNamespace  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(aliasRef,  newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(aliasRef,  newNode);  }	  newNodes.add(newNode);    	non-compiled	[CE]  method  scanNewNodes  in  class  GlobalNamespace  cannot  be  applied  to  given  types;	75	None	replace
425	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  newNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  newNode);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    i,    namespace);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	114	None	replace
426	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  n,  newNode,  namespace);  [CE]  cannot  find  symbol  n  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  n,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  n,  newNode,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    i,    namespace);    	non-compiled	[CE]  cannot  find  symbol  n	114	None	replace
427	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  namespace,  newNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  namespace,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  namespace,  newNode);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    i,    namespace);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	114	None	replace
428	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  alias,  newNode,  namespace);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  alias,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  alias,  newNode,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    i,    namespace);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	114	None	replace
429	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  i,  newNode,  namespace);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  i,  newNode,  namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  i,  newNode,  namespace);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    i,    namespace);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	114	None	replace
430	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null?  aliasRef.isAssignedOnceInLifetime()  :  newNode);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null?  aliasRef.isAssignedOnceInLifetime()  :  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null?  aliasRef.isAssignedOnceInLifetime()  :  newNode);	  aliasRef.firstReferenceIsAssigningDeclaration()    &&    newNode.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	31	None	replace
431	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(newNode.getFirstChild(),  aliasRef,  newNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(newNode.getFirstChild(),  aliasRef,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(newNode.getFirstChild(),  aliasRef,  newNode);	  aliasRef.getParent().replaceChild(newNode.getFirstChild(),    aliasRef);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
432	[BUG]  [BUGGY]  aliasRef.getNext().replaceChild(aliasRef.getFirstChild(),  newNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNext().replaceChild(aliasRef.getFirstChild(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNext().replaceChild(aliasRef.getFirstChild(),  newNode);	  aliasRef.getParent().replaceChild(newNode.getFirstChild(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
433	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  alias.getFirstChild(),  newNode);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  alias.getFirstChild(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  alias.getFirstChild(),  newNode);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getFirstChild(),    i);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
434	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  i,  newNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  i,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  i,  newNode);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getFirstChild(),    i);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
435	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  i  +  1,  newNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  i  +  1,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  i  +  1,  newNode);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getFirstChild(),    i);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
436	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  i  +  1);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  i  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  i  +  1);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getFirstChild(),    i);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
437	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  Node  aliasRefs.firstReferenceIsAssigningDeclaration();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  Node  aliasRefs.firstReferenceIsAssigningDeclaration();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();    Node  aliasRefs.firstReferenceIsAssigningDeclaration();	  	non-compiled	[CE]  ';'  expected	89	None	add
438	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  Refs.firstReferenceIsAssigningDeclaration();  [CE]  cannot  find  symbol  Refs  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  Refs.firstReferenceIsAssigningDeclaration();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();    Refs.firstReferenceIsAssigningDeclaration();	  	non-compiled	[CE]  cannot  find  symbol  Refs	89	None	add
439	[BUG]  [BUGGY]  aliasRef,  aliasRef.getName().replaceChild(newNode,  aliasRef);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef,  aliasRef.getName().replaceChild(newNode,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef,  aliasRef.getName().replaceChild(newNode,  aliasRef);	  aliasRef.getName().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  not  a  statement	101	None	replace
440	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode).replaceChild(aliasRef,  newNode);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode).replaceChild(aliasRef,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef,  newNode).replaceChild(aliasRef,  newNode);	  aliasRef.getName().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
441	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode,  this.namespace);  [CE]  cannot  find  symbol  namespace  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode,  this.namespace);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode,  this.namespace);	  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol  namespace	10	None	replace
442	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  namespace.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  namespace.getNode(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(aliasRef,  namespace.getNode(),  newNode);	  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
443	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  newNodes.add(newNode);	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	28	None	replace
444	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.remove(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.remove(newNode);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	98	1	add
445	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.remove(newNode);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.remove(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.remove(newNode);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	98	1	add
446	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getName().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getName().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getName().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);	  	non-compiled	[CE]  cannot  find  symbol	94	None	add
447	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode()  [CE]  ')'  expected  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode()  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode()	  	non-compiled	[CE]  ')'  expected	94	None	add
448	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsDeclaration()  &&  newNode.isAssignedOnceInLifetime())  {  newNodes.add(newNode);	  aliasRefs.firstReferenceIsDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	108	None	replace
449	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  aliasRefs.firstReferenceIsDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	108	None	replace
450	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsDeclaration()  ||  aliasRefs.isVar(newNode))  {  newNodes.add(newNode);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsDeclaration()  ||  aliasRefs.isVar(newNode))  {  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsDeclaration()  ||  aliasRefs.isVar(newNode))  {  newNodes.add(newNode);	  aliasRefs.firstReferenceIsDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	108	None	replace
451	[BUG]  [BUGGY]  aliasRefs.lastReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.lastReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.lastReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }	  aliasRefs.lastReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	73	None	replace
452	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isStatementInLifetime());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isStatementInLifetime());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isStatementInLifetime());	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isStatementOnceInLifetime());    	non-compiled	[CE]  not  a  statement	118	None	replace
453	[BUG]  [BUGGY]  aliasRef,  aliasRef.getNamespace().replaceChild(newNode.getNode(),  aliasRef);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef,  aliasRef.getNamespace().replaceChild(newNode.getNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef,  aliasRef.getNamespace().replaceChild(newNode.getNode(),  aliasRef);	  aliasRef.getNamespace().replaceChild(newNode.getNode(),    aliasRef);    	non-compiled	[CE]  not  a  statement	11	None	replace
454	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.cloneTree(),  aliasRef);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.cloneTree(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.cloneTree(),  aliasRef);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getPosition(),    aliasRef);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	86	None	replace
455	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  aliasRefs.firstReferenceIsAssigningDeclaration()    =    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	109	None	replace
456	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasParent.replaceChild(alias.node,  NodeUtil.newExpr(newNode));  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	aliasParent.replaceChild(alias.node,  NodeUtil.newExpr(newNode));	          aliasParent.replaceChild(alias.node,    newNode);    	compilable	  [FE]  RuntimeException  	46	10	replace
457	[BUG]  [BUGGY]  aliasParent.replaceChild(alias.node,  NodeUtil.newExpr(newNode));  [FE]  RuntimeException  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasParent.replaceChild(alias.node,  NodeUtil.newExpr(newNode));  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasParent.replaceChild(alias.node,  NodeUtil.newExpr(newNode));	          aliasParent.replaceChild(alias.node,    newNode);    	compilable	  [FE]  RuntimeException  	46	10	replace
458	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getNext().replaceChild(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getNext().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().removeChild(newNode);  aliasRef.getNext().replaceChild(aliasRef.getNode(),  newNode);	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNext().removeChild(newNode);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
459	[BUG]  [BUGGY]  aliasRef,  aliasRef.getParent().removeChild(newNode);  aliasRef.getNext().removeChild(newNode);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef,  aliasRef.getParent().removeChild(newNode);  aliasRef.getNext().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef,  aliasRef.getParent().removeChild(newNode);  aliasRef.getNext().removeChild(newNode);	          aliasRef.getParent().removeChild(newNode);    aliasRef.getNext().removeChild(newNode);    	non-compiled	[CE]  not  a  statement	38	None	replace
460	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getFirstChild(),  aliasRef);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getFirstChild(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getFirstChild(),  aliasRef);	  aliasRef.getNamespace().replaceChild(aliasRef,    newNode.getNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
461	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getParent(),  aliasRef);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getParent(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getParent(),  aliasRef);	  aliasRef.getNamespace().replaceChild(aliasRef,    newNode.getNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
462	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  aliasRefs.firstReferenceIsAssigningDeclaration();  }  else  {  aliasRefs.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  aliasRefs.firstReferenceIsAssigningDeclaration();  }  else  {  aliasRefs.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();    aliasRefs.firstReferenceIsAssigningDeclaration();  }  else  {  aliasRefs.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);	  	non-compiled	[CE]  'else'  without  'if'	89	None	add
463	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  aliasRefs.firstReferenceIsAssigningDeclaration();  }  else  {  aliasRefs.getParent().replaceChild(aliasRef.getNode(),  newNode);  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  aliasRefs.firstReferenceIsAssigningDeclaration();  }  else  {  aliasRefs.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();    aliasRefs.firstReferenceIsAssigningDeclaration();  }  else  {  aliasRefs.getParent().replaceChild(aliasRef.getNode(),  newNode);	  	non-compiled	[CE]  'else'  without  'if'	89	None	add
464	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  aliasRefs.firstReferenceIsAssigningDeclaration();  }  else  {  aliasRefs.getParent().replaceChild(aliasRef,  newNode);  newNodes.add(newNode);  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  aliasRefs.firstReferenceIsAssigningDeclaration();  }  else  {  aliasRefs.getParent().replaceChild(aliasRef,  newNode);  newNodes.add(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();    aliasRefs.firstReferenceIsAssigningDeclaration();  }  else  {  aliasRefs.getParent().replaceChild(aliasRef,  newNode);  newNodes.add(newNode);	  	non-compiled	[CE]  'else'  without  'if'	89	None	add
465	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  Arrays.newHashMap());  [CE]  cannot  find  symbol  Arrays  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  Arrays.newHashMap());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  Arrays.newHashMap());	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    IR.newHashMap());    	non-compiled	[CE]  cannot  find  symbol  Arrays	93	None	replace
466	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode,  i);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode,  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode,  i);	  aliasRef.getName().replaceChild(aliasRef.getNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
467	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode,  this);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode,  this);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode,  this);	  aliasRef.getName().replaceChild(aliasRef.getNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
468	[BUG]  [BUGGY]  newNode.getNamespace().replaceChild(aliasRef,  aliasRef);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNode.getNamespace().replaceChild(aliasRef,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNode.getNamespace().replaceChild(aliasRef,  aliasRef);	  aliasRef.getNamespace().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
469	[BUG]  [BUGGY]  aliasRef.replaceChild(aliasRef,  newNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.replaceChild(aliasRef,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.replaceChild(aliasRef,  newNode);	  aliasRef.getNamespace().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
470	[BUG]  [BUGGY]  aliasRefs.getFirstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.getFirstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.getFirstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }	  aliasRefs.getFirstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	115	None	replace
471	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isVarOnce())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isVarOnce())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isVarOnce())  {	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	8	None	replace
472	[BUG]  [BUGGY]  aliasRef,  newNode.getParent().replaceChild(aliasRef.getNameNode(),  aliasRef);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef,  newNode.getParent().replaceChild(aliasRef.getNameNode(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef,  newNode.getParent().replaceChild(aliasRef.getNameNode(),  aliasRef);	  aliasRef.getParent().replaceChild(newNode.getNameNode(),    aliasRef);    	non-compiled	[CE]  not  a  statement	64	None	replace
473	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.parent,  newNode);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  parent  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.parent,  newNode);  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias.parent,  newNode);  compiler.reportCodeChange();	  	non-compiled	[CE]  cannot  find  symbol  parent	41	None	add
474	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }	  	non-compiled	[CE]  illegal  start  of  type	41	None	add
475	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getNode().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNode().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	36	10	add
476	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNode().removeChild(newNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getNode().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getNode().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	36	10	add
477	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode,  aliasRef.getNode());  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getNode().removeChild(newNode);    aliasRef.getParent().replaceChild(newNode,  aliasRef.getNode());  aliasRef.getNode().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	36	10	add
478	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode,  aliasRef.getNode());  aliasRef.getNode().removeChild(newNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getNode().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode,  aliasRef.getNode());  aliasRef.getNode().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getNode().removeChild(newNode);    aliasRef.getParent().replaceChild(newNode,  aliasRef.getNode());  aliasRef.getNode().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	36	10	add
479	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  aliasParent.replaceChild(alias.node,  newNode);  }  else  {  aliasParent.replaceChild(alias.node,  newNode);  [CE]  'else'  without  'if'  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  aliasParent.replaceChild(alias.node,  newNode);  }  else  {  aliasParent.replaceChild(alias.node,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    aliasParent.replaceChild(alias.node,  newNode);  }  else  {  aliasParent.replaceChild(alias.node,  newNode);	  	non-compiled	[CE]  'else'  without  'if'	45	None	add
480	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  aliasParent.replaceChild(alias.node,  newNode).replaceChild(alias.node,  IR.nullNode());  [CE]  void  cannot  be  dereferenced  [FE]      IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  aliasParent.replaceChild(alias.node,  newNode).replaceChild(alias.node,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    aliasParent.replaceChild(alias.node,  newNode).replaceChild(alias.node,  IR.nullNode());	  	non-compiled	[CE]  void  cannot  be  dereferenced	45	None	add
481	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  aliasParent.replaceChild(alias.node,  newNode);  parent.replaceChild(alias.node,  newNode);  [CE]  cannot  find  symbol  parent  [FE]        IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  aliasParent.replaceChild(alias.node,  newNode);  parent.replaceChild(alias.node,  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    aliasParent.replaceChild(alias.node,  newNode);  parent.replaceChild(alias.node,  newNode);	  	non-compiled	[CE]  cannot  find  symbol  parent	45	None	add
482	[BUG]  [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  aliasParent.replaceChild(alias.node,  newNode);  this.namespace.scanNewNodes(alias.scope,  newNodes);  [CE]  cannot  find  symbol  namespace  [FE]          IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.replaceChild(alias.node,  newNode);  aliasParent.replaceChild(alias.node,  newNode);  this.namespace.scanNewNodes(alias.scope,  newNodes);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.replaceChild(alias.node,    newNode);    aliasParent.replaceChild(alias.node,  newNode);  this.namespace.scanNewNodes(alias.scope,  newNodes);	  	non-compiled	[CE]  cannot  find  symbol  namespace	45	None	add
483	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  else  {  newNodes.add(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  else  {  newNodes.add(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);    	compilable	  [FE]  RuntimeException  	34	10	replace
484	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  else  {  newNodes.add(newNode);  }  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  else  {  newNodes.add(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  else  {  newNodes.add(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);    	compilable	  [FE]  RuntimeException  	34	10	replace
485	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);    	compilable	  [FE]  AssertionFailedError  	34	10	replace
486	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode.getType()  ==  Token.NAME)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().removeChild(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);    	compilable	  [FE]  AssertionFailedError  	34	10	replace
487	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  inlineAliases);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  inlineAliases);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  scope,  inlineAliases);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    scope);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	52	None	replace
488	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode,  i  +  1);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode,  i  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode,  i  +  1);	  aliasRef.getParent().replaceChild(aliasRef.getPosition(),    newNode,    i);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
489	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.cloneTree(),  aliasRef);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.cloneTree(),  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef,  newNode.cloneTree(),  aliasRef);	  aliasRef.getName().replaceChild(aliasRef,    newNode.getNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
490	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  }	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	23	None	replace
491	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.newNode(size);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.newNode(size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.newNode(size);	          Node    newNode    =    aliasRef.newNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	44	None	replace
492	[BUG]  [BUGGY]  Node  newNode  =  alias.node.newNode();  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  alias.node.newNode();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  alias.node.newNode();	          Node    newNode    =    aliasRef.newNode();    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	44	None	replace
493	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  this);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  this);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  this);	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
494	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  var);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  var);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  var);	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
495	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  else  {  alias  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  else  {  alias  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  }  else  {  alias	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode);    	non-compiled	[CE]  ';'  expected	95	None	replace
496	[BUG]  [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().removeChild(newNode);  aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().removeChild(newNode);  aliasRef.getName().replaceChild(aliasRef.getNode(),  newNode);	          aliasRef.getParent().removeChild(newNode);    aliasRef.getName().removeChild(newNode);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
497	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isVar(newNode);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isVar(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isVar(newNode);	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	5	None	replace
498	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration())  {  compiler.reportCodeChange();  [CE]  ';'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration())  {  compiler.reportCodeChange();	  aliasRef.firstReferenceIsAssigningDeclaration()    &&    newNode.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  ';'  expected	26	None	replace
499	[BUG]  [BUGGY]  aliasRef.getFirstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getFirstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getFirstReferenceIsAssigningDeclaration()  ||  newNode.isAssignedOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRef.firstReferenceIsAssigningDeclaration()    &&    newNode.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	26	None	replace
500	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime())  {  compiler.reportCodeChange();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime())  {  compiler.reportCodeChange();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime())  {  compiler.reportCodeChange();	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    	non-compiled	[CE]  not  a  statement	22	None	replace
501	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  i  +  1);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  i  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode,  i  +  1);	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode,    i);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
502	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getFirstChild(),  i);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getFirstChild(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getFirstChild(),  i);	  aliasRef.getNamespace().replaceChild(aliasRef,    newNode.getNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
503	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getNode(),  i  +  1);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getNode(),  i  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(aliasRef,  newNode.getNode(),  i  +  1);	  aliasRef.getNamespace().replaceChild(aliasRef,    newNode.getNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
504	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime();  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime();	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	4	None	replace
505	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticBlock();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticBlock();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticBlock();	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	4	None	replace
506	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode.getType()  ==  Token.VAR)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode.getType()  ==  Token.VAR)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);    	compilable	  [FE]  AssertionFailedError  	105	10	replace
507	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.VAR)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode.getType()  ==  Token.VAR)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode.getType()  ==  Token.VAR)  {  aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().addChildToFront(newNode);  }	          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().addChildToFront(newNode);    	compilable	  [FE]  AssertionFailedError  	105	10	replace
508	[BUG]  [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef.getNode(),  newNode);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.getParent().replaceChild(aliasRef.getNode(),  newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.getParent().replaceChild(aliasRef.getNode(),  newNode);	  aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
509	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNode);  }  [CE]  method  scanNewNodes  in  class  GlobalNamespace  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  namespace.scanNewNodes(alias.scope,  newNode);  }	  newNodes.add(newNode);    	non-compiled	[CE]  method  scanNewNodes  in  class  GlobalNamespace  cannot  be  applied  to  given  types;	75	None	replace
510	[BUG]  [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  return  Collections.emptySet();  }  [CE]  cannot  find  symbol  Collections  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  return  Collections.emptySet();  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  newNodes.add(newNode);  }  else  {  return  Collections.emptySet();  }	  newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol  Collections	75	None	replace
511	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration();  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration();  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration();	  aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
512	[BUG]  [BUGGY]  aliasRef.getFirstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getFirstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getFirstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());	  aliasRef.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	16	None	replace
513	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isVar(newNode))  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isVar(newNode))  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isVar(newNode))  {	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
514	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isVarOnce())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isVarOnce())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isVarOnce())  {	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
515	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  compiler,  inlineAliases);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  compiler,  inlineAliases);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  compiler,  inlineAliases);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    compiler);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	53	None	replace
516	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  compiler,  collector);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  compiler,  collector);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  compiler,  collector);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    compiler);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	53	None	replace
517	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  compiler,  newNodes);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  compiler,  newNodes);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  compiler,  newNodes);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    compiler);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	53	None	replace
518	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  null,  aliasRef);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  null,  aliasRef);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  null,  aliasRef);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    null);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	55	None	replace
519	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  null,  compiler);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  null,  compiler);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  null,  compiler);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    null);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	55	None	replace
520	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  this,  namespace,  null);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  this,  namespace,  null);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  this,  namespace,  null);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    null);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	55	None	replace
521	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  this);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  this);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  this);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    aliasRef);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
522	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null?  aliasRef.isAssignedOnceInLifetime()  :  new  Node(newNode);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null?  aliasRef.isAssignedOnceInLifetime()  :  new  Node(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  &&  newNode!=  null?  aliasRef.isAssignedOnceInLifetime()  :  new  Node(newNode);	  aliasRef.firstReferenceIsAssigningDeclaration()    &&    newNode.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	31	None	replace
523	[BUG]  [BUGGY]  newNodes.add(aliasRef.getFirstReferenceIsAssigningDeclaration());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(aliasRef.getFirstReferenceIsAssigningDeclaration());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(aliasRef.getFirstReferenceIsAssigningDeclaration());	  newNodes.add(aliasRef.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
524	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  aliasRef,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reference,CollapseProperties)  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  aliasRef,  this);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	NodeTraversal.traverse(compiler,  newNode,  aliasRef,  this);	          NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reference,CollapseProperties)	96	None	replace
525	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime())  {  compiler.reportCodeChange();  }  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime())  {  compiler.reportCodeChange();  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime())  {  compiler.reportCodeChange();  }	  aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  not  a  statement	116	None	replace
526	[BUG]  [BUGGY]  Node  newNode  =  aliasRef.references.get(i++);  [CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        AssertionFailedError      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  Node  newNode  =  aliasRef.references.get(i++);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	Node  newNode  =  aliasRef.references.get(i++);	  Node    newNode    =    aliasRef.references.get(i);    	non-compiled	[CE]  variable  newNode  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
527	[BUG]  [BUGGY]  if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  else  {  return  Collections.emptySet();  }  [CE]  cannot  find  symbol  Collections  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  else  {  return  Collections.emptySet();  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode!=  null)  {  aliasRefs.firstReferenceIsAssigningDeclaration();  newNodes.add(newNode);  }  else  {  return  Collections.emptySet();  }	  aliasRefs.firstReferenceIsAssigningDeclaration();    newNodes.add(newNode);    	non-compiled	[CE]  cannot  find  symbol  Collections	99	None	replace
528	[BUG]  [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNode);  }	  aliasRef.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNode);    	non-compiled	[CE]  not  a  statement	28	None	replace
529	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode,  var);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode,  var);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getPosition(),  newNode,  var);	  aliasRef.getParent().replaceChild(aliasRef.getPosition(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
530	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	33	10	add
531	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().removeChild(newNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().removeChild(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  aliasRef.getParent().removeChild(newNode);	  	compilable	  [FE]  RuntimeException  	33	10	add
532	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(newNode,  IR.nullNode());	  	compilable	  [FE]  RuntimeException  	33	10	add
533	[BUG]  [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().removeChild(newNode);  aliasRef.getParent().replaceChild(newNode,  IR.nullNode());  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasRef.getParent().removeChild(newNode);        aliasRef.getParent().removeChild(newNode);    aliasRef.getParent().replaceChild(newNode,  IR.nullNode());	  	compilable	  [FE]  RuntimeException  	33	10	add
534	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  var);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  var);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  var);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    n);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
535	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNode,  compiler);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNode,  compiler);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  newNode,  compiler);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    newNode);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	92	None	replace
536	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode  ==  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	if(newNode  ==  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	42	10	replace
537	[BUG]  [BUGGY]  if(newNode  ==  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [FE]  AssertionFailedError  [FE]    IllegalArgumentException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(newNode  ==  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(newNode  ==  null)  {  aliasParent.replaceChild(alias.node,  newNode);  compiler.reportCodeChange();  }	          aliasParent.replaceChild(alias.node,    newNode);    compiler.reportCodeChange();    	compilable	  [FE]  AssertionFailedError  	42	10	replace
538	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode,  i);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode,  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode,  i);	  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
539	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode,  this);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode,  this);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode,  this);	  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
540	[BUG]  [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode,  var);  [CE]  cannot  find  symbol  var  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode,  var);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNamespace().replaceChild(aliasRef.getNode(),  newNode,  var);	  aliasRef.getNamespace().replaceChild(aliasRef.getNode(),    newNode,    namespace);    	non-compiled	[CE]  cannot  find  symbol  var	10	None	replace
541	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasParent.removeChild(newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();	  	compilable	  [FE]  RuntimeException  	47	10	add
542	[BUG]  [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.removeChild(newNode);    compiler.reportCodeChange();    aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();	  	compilable	  [FE]  RuntimeException  	47	10	add
543	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.addChildToFront(newNode);  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	                aliasParent.removeChild(newNode);    compiler.reportCodeChange();    aliasParent.addChildToFront(newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  RuntimeException  	47	10	add
544	[BUG]  [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.addChildToFront(newNode);  compiler.reportCodeChange();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]          aliasParent.removeChild(newNode);  compiler.reportCodeChange();  aliasParent.addChildToFront(newNode);  compiler.reportCodeChange();  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	                aliasParent.removeChild(newNode);    compiler.reportCodeChange();    aliasParent.addChildToFront(newNode);  compiler.reportCodeChange();	  	compilable	  [FE]  RuntimeException  	47	10	add
545	[BUG]  [BUGGY]  if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  }  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  }  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNode);  }	  if(aliasRefs.isAssignedOnceInLifetime())    {    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNode);    }    	non-compiled	[CE]  not  a  statement	121	None	replace
546	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  var);  [CE]  cannot  find  symbol  var  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  var);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  var);	  aliasRef.getParent().replaceChild(newNode,    aliasRef.getNode(),    newNode);    	non-compiled	[CE]  cannot  find  symbol  var	40	None	replace
547	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  node);  [CE]  cannot  find  symbol  node  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  node);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode,  node);	  aliasRef.getParent().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol  node	88	None	replace
548	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().addChildToFront(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	add	aliasRef.getNode().removeChild(newNode);    aliasRef.getNode().addChildToFront(newNode);	  	compilable	  [FE]  NullPointerException  	59	10	add
549	[BUG]  [BUGGY]  aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().addChildToFront(newNode);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getNode().removeChild(newNode);  aliasRef.getNode().addChildToFront(newNode);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getNode().removeChild(newNode);    aliasRef.getNode().addChildToFront(newNode);	  	compilable	  [FE]  NullPointerException  	59	10	add
550	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  IR.nullNode());  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  IR.nullNode());	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    IR.nullNode());    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	91	None	replace
551	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  this);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  this);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    IR.nullNode());    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	91	None	replace
552	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  null);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  null);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  IR.nullNode(),  null);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    IR.nullNode());    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	91	None	replace
553	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  i  +  1);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  i  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getNameNode(),  i  +  1);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getNameNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
554	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode),  ';'  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode),  ';'  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNameNode(),  newNode),  ';'	  aliasRef.getParent().replaceChild(aliasRef.getNameNode(),    newNode)    	non-compiled	[CE]  ';'  expected	113	None	replace
555	[BUG]  [BUGGY]  aliasRefs.getFirstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime())  {  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRefs.getFirstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime())  {  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRefs.getFirstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime())  {	  aliasRefs.getFirstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	110	None	replace
556	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  namespace,  compiler);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  namespace,  compiler);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  namespace,  compiler);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    i,    namespace);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	114	None	replace
557	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  namespace,  collector);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  namespace,  collector);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  namespace,  collector);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    i,    namespace);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	114	None	replace
558	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  size);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  size);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  i,  size);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    i,    namespace);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	114	None	replace
559	[BUG]  [BUGGY]  newNodes.add(newNode);  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]    AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(newNode);    Node  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	74	None	add
560	[BUG]  [BUGGY]  newNodes.add(newNode);  Node  newNodes  =  Sets.newHashSetWithExpectedSize(i  -  1);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  Node  newNodes  =  Sets.newHashSetWithExpectedSize(i  -  1);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(newNode);    Node  newNodes  =  Sets.newHashSetWithExpectedSize(i  -  1);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	74	None	add
561	[BUG]  [BUGGY]  newNodes.add(newNode);  Node  newNodes  =  Sets.newHashSetWithExpectedSize(i);  [CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        AssertionFailedError    [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  newNodes.add(newNode);  Node  newNodes  =  Sets.newHashSetWithExpectedSize(i);  [BUGGY]      aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	newNodes.add(newNode);    Node  newNodes  =  Sets.newHashSetWithExpectedSize(i);	  	non-compiled	[CE]  variable  newNodes  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	74	None	add
562	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode).replaceChild(alias.node,  IR.nullNode());  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode).replaceChild(alias.node,  IR.nullNode());  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef,  newNode).replaceChild(alias.node,  IR.nullNode());	  aliasRef.getName().replaceChild(aliasRef,    newNode);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
563	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.getFirstChild(),  i);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.getFirstChild(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef,  newNode.getFirstChild(),  i);	  aliasRef.getName().replaceChild(aliasRef,    newNode.getNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
564	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.getNode(),  i  +  1);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.getNode(),  i  +  1);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef,  newNode.getNode(),  i  +  1);	  aliasRef.getName().replaceChild(aliasRef,    newNode.getNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
565	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.cloneTree(),  i);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef,  newNode.cloneTree(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef,  newNode.cloneTree(),  i);	  aliasRef.getName().replaceChild(aliasRef,    newNode.getNode(),    i);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
566	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  newNode);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode.getFirstChild(),  newNode);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getFirstChild(),    i);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
567	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  collector,  compiler);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  collector,  compiler);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  collector,  compiler);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    collector);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	54	None	replace
568	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  collector,  newNodes);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  collector,  newNodes);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode,  namespace,  collector,  newNodes);	  aliasRef.getParent().replaceChild(aliasRef.getNode(),    newNode,    namespace,    collector);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	54	None	replace
569	[BUG]  [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  aliasRef.getPosition(),  i);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getParent().replaceChild(aliasRef,  newNode,  aliasRef.getPosition(),  i);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getParent().replaceChild(aliasRef,  newNode,  aliasRef.getPosition(),  i);	  aliasRef.getParent().replaceChild(aliasRef,    newNode.getPosition(),    i);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
570	[BUG]  [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getString(),  newNode);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();      [BUGGY]  aliasRef.getName().replaceChild(aliasRef.getString(),  newNode);  [BUGGY]      newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();    namespace.scanNewNodes(alias.scope,  newNodes);  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	227	227	1	replace	aliasRef.getName().replaceChild(aliasRef.getString(),  newNode);	  aliasRef.getName().replaceChild(aliasRef.getParent(),    newNode);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
