bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ';'  expected  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  ';'  expected  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	';'  expected	          aliasRefs.references.get(i);    if(aliasRefs.references!=    null)    {    if(!inlineAliasIfPossible)    {    return    function()    {    var    args=arguments;    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	40	None	replace
2	[BUG]  [BUGGY]  if(!inlineAliasIfPossible)  {  aliasRefs.references.get(i);  if(aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  function()  {  var  args=  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!inlineAliasIfPossible)  {  aliasRefs.references.get(i);  if(aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  function()  {  var  args=  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!inlineAliasIfPossible)  {  aliasRefs.references.get(i);  if(aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  function()  {  var  args=	          aliasRefs.references.get(i);    if(aliasRefs.references!=    null)    {    if(!inlineAliasIfPossible)    {    return    function()    {    var    args=arguments;    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ';'  expected	40	None	replace
3	[BUG]  [BUGGY]  if(!inlineAliasIfPossible)  {  aliasRefs.references.get(i);  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!inlineAliasIfPossible)  {  aliasRefs.references.get(i);  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!inlineAliasIfPossible)  {  aliasRefs.references.get(i);  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&	          aliasRefs.references.get(i);    if(aliasRefs.references!=    null)    {    if(!inlineAliasIfPossible)    {    return    function()    {    var    args=arguments;    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	40	None	replace
4	[BUG]  [BUGGY]  if(!inlineAliasIfPossible)  {  aliasRefs.references.get(i);  if(aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  setTimeout(function()  {  alert(  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!inlineAliasIfPossible)  {  aliasRefs.references.get(i);  if(aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  setTimeout(function()  {  alert(  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!inlineAliasIfPossible)  {  aliasRefs.references.get(i);  if(aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  setTimeout(function()  {  alert(	          aliasRefs.references.get(i);    if(aliasRefs.references!=    null)    {    if(!inlineAliasIfPossible)    {    return    function()    {    var    args=arguments;    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	40	None	replace
5	[BUG]  [BUGGY]  if(!inlineAliasIfPossible)  {  aliasRefs.references.get(i);  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  alias  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!inlineAliasIfPossible)  {  aliasRefs.references.get(i);  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  alias  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!inlineAliasIfPossible)  {  aliasRefs.references.get(i);  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  alias	          aliasRefs.references.get(i);    if(aliasRefs.references!=    null)    {    if(!inlineAliasIfPossible)    {    return    function()    {    var    args=arguments;    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	40	None	replace
6	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime();	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	88	None	replace
7	[BUG]  [BUGGY]  aliasRef  =  alias.references.get(i);  [CE]  cannot  find  symbol  aliasRef  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRef  =  alias.references.get(i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRef  =  alias.references.get(i);	  Reference    aliasRef    =    alias.references.get(i);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	53	None	replace
8	[BUG]  [BUGGY]  Reference  aliasRef  =  alias,  newNodes.get(i);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  aliasRef  =  alias,  newNodes.get(i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  aliasRef  =  alias,  newNodes.get(i);	  Reference    aliasRef    =    alias.references.get(i);    	non-compiled	[CE]  ';'  expected	53	None	replace
9	[BUG]  [BUGGY]  Ref  aliasRefs  =  alias.references.get(i  +  2);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRefs  =  alias.references.get(i  +  2);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRefs  =  alias.references.get(i  +  2);	  Ref    aliasRefs    =    alias.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	135	None	replace
10	[BUG]  [BUGGY]  Ref  aliasRef  =  alias.references.get(i  +  1);  [CE]  cannot  find  symbol  references  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRef  =  alias.references.get(i  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRef  =  alias.references.get(i  +  1);	  Ref    aliasRefs    =    alias.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol  references	135	None	replace
11	[BUG]  [BUGGY]  Ref  aliasRefs  =  alias.references.get(i,  size  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRefs  =  alias.references.get(i,  size  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRefs  =  alias.references.get(i,  size  +  1);	  Ref    aliasRefs    =    alias.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	135	None	replace
12	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime();	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	49	None	replace
13	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime();	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	49	None	replace
14	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet();	  Node    aliasRefs    =    Collections.newHashSet(size);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	125	None	replace
15	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newArrayList(size);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newArrayList(size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newArrayList(size);	  Node    aliasRefs    =    Collections.newHashSet(size);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	125	None	replace
16	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.clear();  }  [CE]  cannot  find  symbol  aliasRef  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    aliasRefs.references.clear();    	non-compiled	[CE]  cannot  find  symbol  aliasRef	6	None	replace
17	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.references.clear())  {  aliasRefs.references.clear();  }  [CE]  'void'  type  not  allowed  here  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.references.clear())  {  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.references.clear())  {  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    aliasRefs.references.clear();    	non-compiled	[CE]  'void'  type  not  allowed  here	6	None	replace
18	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.clear();  aliasRefs.references.clear();  }  [CE]  cannot  find  symbol  aliasRef  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.clear();  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.clear();  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    aliasRefs.references.clear();    	non-compiled	[CE]  cannot  find  symbol  aliasRef	6	None	replace
19	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.clear();  aliasRefs.references.clear();  }  [CE]  cannot  find  symbol  aliasRef  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.clear();  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined())  {  aliasRefs.references.clear();  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    aliasRefs.references.clear();    	non-compiled	[CE]  cannot  find  symbol  aliasRef	6	None	replace
20	[BUG]  [BUGGY]  Node  aliasRefs.references.clear();  [CE]  ';'  expected  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs.references.clear();	          aliasRefs.references.clear();    Node    aliasRefs.references.clear();    	non-compiled	[CE]  ';'  expected	7	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,CollapseProperties,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this,  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this,  namespace);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,CollapseProperties,GlobalNamespace)	119	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this,  collector);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,CollapseProperties,ReferenceCollectingCallback)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this,  collector);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this,  collector);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,CollapseProperties,ReferenceCollectingCallback)	119	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,ReferenceCollectingCallback,CollapseProperties)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  this);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  this);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,ReferenceCollectingCallback,CollapseProperties)	119	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  scope,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,Scope,CollapseProperties)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  scope,  this);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  scope,  this);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,Scope,CollapseProperties)	119	None	replace
25	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasRefs.get(i  +  1);	  Node    aliasRefs    =    aliasRefs.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	26	None	replace
26	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    ==    alert(args)    }    	non-compiled	[CE]  ';'  expected	139	None	replace
27	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    ==    alert(args)    }    	non-compiled	[CE]  ';'  expected	139	None	replace
28	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    ==    alert(args)    }    	non-compiled	[CE]  ';'  expected	139	None	replace
29	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    ==    alert(args)    }    	non-compiled	[CE]  ';'  expected	139	None	replace
30	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [CE]  incompatible  types  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  incompatible  types	19	None	replace
31	[BUG]  [BUGGY]  (aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  (aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	19	None	replace
32	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.clear();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.clear();	          aliasRefs.references.clear();    Node    aliasRefs    =    alias.references.clear();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	8	None	replace
33	[BUG]  [BUGGY]  Ref  aliasRefs  =  alias.references.clear();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRefs  =  alias.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRefs  =  alias.references.clear();	          aliasRefs.references.clear();    Node    aliasRefs    =    alias.references.clear();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	8	None	replace
34	[BUG]  [BUGGY]  aliasRefs.clear();  [CE]  cannot  find  symbol  [FE]                java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.clear();	          aliasRefs.references.clear();    Node    aliasRefs    =    alias.references.clear();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  scope,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,Scope,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  scope,  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  scope,  namespace);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    scope);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,Scope,GlobalNamespace)	47	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  collection,  newNodes);  [CE]  cannot  find  symbol  collection  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  collection,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  collection,  newNodes);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    scope);    	non-compiled	[CE]  cannot  find  symbol  collection	47	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  scope);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,ReferenceCollectingCallback,Scope)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  scope);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  scope);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    scope);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,ReferenceCollectingCallback,Scope)	47	None	replace
38	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime())  {	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	80	None	replace
39	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnceInLifetime())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnceInLifetime())  {	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	80	None	replace
40	[BUG]  [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration(),  i);  [CE]  no  suitable  method  found  for  add(boolean,int)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration(),  i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration(),  i);	  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  no  suitable  method  found  for  add(boolean,int)	30	None	replace
41	[BUG]  [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.firstReferenceIsAssigningDeclaration());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.firstReferenceIsAssigningDeclaration());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.firstReferenceIsAssigningDeclaration());	  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
42	[BUG]  [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration(),  namespace);  [CE]  no  suitable  method  found  for  add(boolean,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration(),  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration(),  namespace);	  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  no  suitable  method  found  for  add(boolean,GlobalNamespace)	30	None	replace
43	[BUG]  [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration(),  size);  [CE]  no  suitable  method  found  for  add(boolean,int)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration(),  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration(),  size);	  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  no  suitable  method  found  for  add(boolean,int)	30	None	replace
44	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  newNodes,  namespace);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  newNodes,  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i,  newNodes,  namespace);	  Node    aliasRefs    =    aliasRefs.references.get(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	112	None	replace
45	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  size);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i,  size);	  Node    aliasRefs    =    aliasRefs.references.get(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	112	None	replace
46	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  namespace);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i,  namespace);	  Node    aliasRefs    =    aliasRefs.references.get(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	112	None	replace
47	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.references.get(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.references.get(i);	  Node    aliasRefs    =    aliasRefs.references.get(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	112	None	replace
48	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [CE]  incompatible  types  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    }    	non-compiled	[CE]  incompatible  types	126	None	replace
49	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    }    	non-compiled	[CE]  not  a  statement	126	None	replace
50	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [CE]  incompatible  types  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    }    	non-compiled	[CE]  incompatible  types	126	None	replace
51	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=0;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ';'  expected	97	None	replace
52	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=0;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	97	None	replace
53	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=0;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ';'  expected	97	None	replace
54	[BUG]  [BUGGY]  aliasRefs.references.isWellDefined();  [CE]  cannot  find  symbol  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.isWellDefined();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.isWellDefined();	  aliasRefs.isWellDefined();    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
55	[BUG]  [BUGGY]  aliasRefs.setWellDefined(true);  [CE]  cannot  find  symbol  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.setWellDefined(true);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.setWellDefined(true);	  aliasRefs.isWellDefined();    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
56	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.references.get(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.node.references.get(i  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.node.references.get(i  +  1);	  Node    aliasRefs    =    alias.node.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	129	None	replace
57	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.references.get(i,  newNodes);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.node.references.get(i,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.node.references.get(i,  newNodes);	  Node    aliasRefs    =    alias.node.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	129	None	replace
58	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	add	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    aliasRefs.references.get(i);  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	140	1	add
59	[BUG]  [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    aliasRefs.references.get(i);  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	140	1	add
60	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	add	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    aliasRefs.references.get(i);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	140	1	add
61	[BUG]  [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    aliasRefs.references.get(i);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	140	1	add
62	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  if(aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	add	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    aliasRefs.references.get(i);  if(aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	140	1	add
63	[BUG]  [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  if(aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  if(aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    aliasRefs.references.get(i);  if(aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	140	1	add
64	[BUG]  [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	140	None	add
65	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	add	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    aliasRefs.references.get(i);  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	140	1	add
66	[BUG]  [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    aliasRefs.references.get(i);  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	140	1	add
67	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	add	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    aliasRefs.references.get(i);  if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  }	  	compilable	  [FE]  NullPointerException  	140	4	add
68	[BUG]  [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  }  [FE]  NullPointerException  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.get(i);  if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    aliasRefs.references.get(i);  if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  }	  	compilable	  [FE]  NullPointerException  	140	4	add
69	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i  +  2);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.get(i  +  2);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.get(i  +  2);	  Node    aliasRefs    =    alias.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	72	None	replace
70	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  size  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  size  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.get(i,  size  +  1);	  Node    aliasRefs    =    alias.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	72	None	replace
71	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i  +  3);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.get(i  +  3);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.get(i  +  3);	  Node    aliasRefs    =    alias.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	72	None	replace
72	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i,  namespace);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i,  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasRefs.get(i,  namespace);	  Node    aliasRefs    =    newNodes.get(i,    namespace);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	27	None	replace
73	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  namespace,  collector);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  namespace,  collector);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i,  namespace,  collector);	  Node    aliasRefs    =    newNodes.get(i,    namespace);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	27	None	replace
74	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  namespace);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.get(i,  namespace);	  Node    aliasRefs    =    newNodes.get(i,    namespace);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	27	None	replace
75	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.next();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.next();  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.next();	  Node    aliasRefs    =    i.next();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	105	None	replace
76	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.next();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.next();  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.next();	  Node    aliasRefs    =    i.next();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	105	None	replace
77	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasParent.next();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasParent.next();  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasParent.next();	  Node    aliasRefs    =    i.next();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	105	None	replace
78	[BUG]  [BUGGY]  aliasRefs.references.get(i  +  2);  [CE]  cannot  find  symbol  aliasRef  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.get(i  +  2);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.get(i  +  2);	  aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	2	None	replace
79	[BUG]  [BUGGY]  ((  ReferenceCollectingCallback)aliasRefs).references.get(i);  [CE]  inconvertible  types  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  ((  ReferenceCollectingCallback)aliasRefs).references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	((  ReferenceCollectingCallback)aliasRefs).references.get(i);	          aliasRefs.references.get(i);    if(aliasRefs.references!=    null)    {    if(!inlineAliasIfPossible)    {    return    function()    {    var    args=arguments;    }    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  inconvertible  types	39	None	replace
80	[BUG]  [BUGGY]  ((  ReferenceCollectingCallback.Reference)aliasRefs).references.get(i);  [CE]  inconvertible  types  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  ((  ReferenceCollectingCallback.Reference)aliasRefs).references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	((  ReferenceCollectingCallback.Reference)aliasRefs).references.get(i);	          aliasRefs.references.get(i);    if(aliasRefs.references!=    null)    {    if(!inlineAliasIfPossible)    {    return    function()    {    var    args=arguments;    }    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  inconvertible  types	39	None	replace
81	[BUG]  [BUGGY]  ((  ReferenceCollectingCallback)aliasRefs).references.put(i,  newNodes);  [CE]  inconvertible  types  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  ((  ReferenceCollectingCallback)aliasRefs).references.put(i,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	((  ReferenceCollectingCallback)aliasRefs).references.put(i,  newNodes);	          aliasRefs.references.get(i);    if(aliasRefs.references!=    null)    {    if(!inlineAliasIfPossible)    {    return    function()    {    var    args=arguments;    }    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  inconvertible  types	39	None	replace
82	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [CE]  ';'  expected  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    References    aliasRefs.references.clear();    	non-compiled	[CE]  ';'  expected	93	None	replace
83	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [CE]  ';'  expected  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined())  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    References    aliasRefs.references.clear();    	non-compiled	[CE]  ';'  expected	93	None	replace
84	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  [CE]  ';'  expected  [FE]              java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();	          aliasRefs.references.clear();    References    aliasRefs.references.clear();    	non-compiled	[CE]  ';'  expected	93	None	replace
85	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.references.get(i)!=  null)  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [CE]  ';'  expected  [FE]                java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.references.get(i)!=  null)  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.references.get(i)!=  null)  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    References    aliasRefs.references.clear();    	non-compiled	[CE]  ';'  expected	93	None	replace
86	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).namespace;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).namespace;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i).namespace;	  Node    aliasRefs    =(Node)newNodes.get(i).references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	111	None	replace
87	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).references.get(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i).references.get(i);	  Node    aliasRefs    =(Node)newNodes.get(i).references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	111	None	replace
88	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(0).references;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(0).references;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(0).references;	  Node    aliasRefs    =(Node)newNodes.get(i).references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	111	None	replace
89	[BUG]  [BUGGY]  Reference  collectingCallback.Reference  aliasRef  =  newNodes.get(i  +  1);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  collectingCallback.Reference  aliasRef  =  newNodes.get(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  collectingCallback.Reference  aliasRef  =  newNodes.get(i  +  1);	  Reference    collectingCallback.Reference    aliasRef    =    newNodes.get(i);    	non-compiled	[CE]  ';'  expected	58	None	replace
90	[BUG]  [BUGGY]  Reference  aliasRef  =  newNodes.get(i);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  aliasRef  =  newNodes.get(i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  aliasRef  =  newNodes.get(i);	  Reference    collectingCallback.Reference    aliasRef    =    newNodes.get(i);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
91	[BUG]  [BUGGY]  Node  aliasRef  =  newNodes.get(i);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRef  =  newNodes.get(i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRef  =  newNodes.get(i);	  Reference    collectingCallback.Reference    aliasRef    =    newNodes.get(i);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
92	[BUG]  [BUGGY]  Reference  collectingCallback.Reference  aliasRef  =  collection.get(i);  [CE]  ';'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  collectingCallback.Reference  aliasRef  =  collection.get(i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  collectingCallback.Reference  aliasRef  =  collection.get(i);	  Reference    collectingCallback.Reference    aliasRef    =    newNodes.get(i);    	non-compiled	[CE]  ';'  expected	58	None	replace
93	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    aliasRefs.references.get(i);    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	41	None	replace
94	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    aliasRefs.references.get(i);    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	41	None	replace
95	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    aliasRefs.references.get(i);    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	41	None	replace
96	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);	          aliasRefs.references.get(i);    aliasRefs.references.get(i);    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
97	[BUG]  [BUGGY]  aliasRefs.references.put(i,  newNodes,  Collections.  <  Node>emptySet());  [CE]  cannot  find  symbol  Collections  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.put(i,  newNodes,  Collections.  <  Node>emptySet());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.put(i,  newNodes,  Collections.  <  Node>emptySet());	  aliasRefs.references.put(i,    newNodes);    	non-compiled	[CE]  cannot  find  symbol  Collections	79	None	replace
98	[BUG]  [BUGGY]  aliasRefs.references.put(i,  newNodes,  Collections.EMPTY_SET);  [CE]  cannot  find  symbol  Collections  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.put(i,  newNodes,  Collections.EMPTY_SET);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.put(i,  newNodes,  Collections.EMPTY_SET);	  aliasRefs.references.put(i,    newNodes);    	non-compiled	[CE]  cannot  find  symbol  Collections	79	None	replace
99	[BUG]  [BUGGY]  aliasRefs.references.put(i,  newNodes[i]);  [CE]  array  required,  but  Set<Node>  found  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.put(i,  newNodes[i]);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.put(i,  newNodes[i]);	  aliasRefs.references.put(i,    newNodes);    	non-compiled	[CE]  array  required,  but  Set<Node>  found	79	None	replace
100	[BUG]  [BUGGY]  aliasRef  =  alias.references.get(i  +  1);  [CE]  cannot  find  symbol  aliasRef  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRef  =  alias.references.get(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRef  =  alias.references.get(i  +  1);	  Reference    aliasRef    =    alias.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	1	None	replace
101	[BUG]  [BUGGY]  Reference  aliasRef  =  alias,  newNodes.get(i  +  1);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  aliasRef  =  alias,  newNodes.get(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  aliasRef  =  alias,  newNodes.get(i  +  1);	  Reference    aliasRef    =    alias.references.get(i    +    1);    	non-compiled	[CE]  ';'  expected	1	None	replace
102	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i  +  1);  [CE]  incompatible  types  [FE]              java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRef  =  aliasRefs.references.get(i  +  1);	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    aliasRef    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  incompatible  types	62	None	replace
103	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime());	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	34	None	replace
104	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime());	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	34	None	replace
105	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  newNodes.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  newNodes.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  newNodes.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	34	None	replace
106	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.getReferences(i,  newNodes);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasRefs.getReferences(i,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasRefs.getReferences(i,  newNodes);	  Node    aliasRefs    =    aliasRefs.getReferences(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	85	None	replace
107	[BUG]  [BUGGY]  aliasRefs.references.add(i,  newNodes);  [CE]  no  suitable  method  found  for  add(int,Set<Node>)  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.add(i,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.add(i,  newNodes);	  aliasRefs.references.add(newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  add(int,Set<Node>)	55	None	replace
108	[BUG]  [BUGGY]  aliasRefs.references.add(newNodes,  i);  [CE]  no  suitable  method  found  for  add(Set<Node>,int)  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.add(newNodes,  i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.add(newNodes,  i);	  aliasRefs.references.add(newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  add(Set<Node>,int)	55	None	replace
109	[BUG]  [BUGGY]  aliasRefs.references.add(newNodes,  namespace);  [CE]  no  suitable  method  found  for  add(Set<Node>,GlobalNamespace)  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.add(newNodes,  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.add(newNodes,  namespace);	  aliasRefs.references.add(newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  add(Set<Node>,GlobalNamespace)	55	None	replace
110	[BUG]  [BUGGY]  aliasRefs.references.addAll(newNodes);  [CE]  no  suitable  method  found  for  addAll(Set<Node>)  [FE]              java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.addAll(newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.addAll(newNodes);	  aliasRefs.references.add(newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  addAll(Set<Node>)	55	None	replace
111	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  aliasRefs.references.get(i);  aliasRefs.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	add	                aliasRefs.references.get(i);        aliasRefs.references.get(i);    aliasRefs.references.get(i);  aliasRefs.references.get(i);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	36	1	add
112	[BUG]  [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  aliasRefs.references.get(i);  aliasRefs.references.get(i);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  aliasRefs.references.get(i);  aliasRefs.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        aliasRefs.references.get(i);    aliasRefs.references.get(i);  aliasRefs.references.get(i);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	36	1	add
113	[BUG]  [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        aliasRefs.references.get(i);    AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ';'  expected	36	None	add
114	[BUG]  [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=0;setTimeout(function()  {  alert(args)  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=0;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        aliasRefs.references.get(i);    AssertionFailedError:  Expected:  function()  {  var  args=0;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ';'  expected	36	None	add
115	[BUG]  [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=i;setTimeout(function()  {  alert(args)  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=i;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        aliasRefs.references.get(i);    AssertionFailedError:  Expected:  function()  {  var  args=i;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ';'  expected	36	None	add
116	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  aliasRefs.references.get(0);  aliasRefs.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	add	                aliasRefs.references.get(i);        aliasRefs.references.get(i);    aliasRefs.references.get(0);  aliasRefs.references.get(i);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	36	1	add
117	[BUG]  [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  aliasRefs.references.get(0);  aliasRefs.references.get(i);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  aliasRefs.references.get(0);  aliasRefs.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        aliasRefs.references.get(i);    aliasRefs.references.get(0);  aliasRefs.references.get(i);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	36	1	add
118	[BUG]  [BUGGY]  (aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  (aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	50	None	replace
119	[BUG]  [BUGGY]  newNodes.add(aliasRefs.references.get(i));  [CE]  no  suitable  method  found  for  add(Reference)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs.references.get(i));  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs.references.get(i));	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    }    	non-compiled	[CE]  no  suitable  method  found  for  add(Reference)	87	None	replace
120	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [CE]  no  suitable  method  found  for  add(Set<Node>)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    }    	non-compiled	[CE]  no  suitable  method  found  for  add(Set<Node>)	87	None	replace
121	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    }    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
122	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes,  i);  }  [CE]  no  suitable  method  found  for  add(Set<Node>,int)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes,  i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes,  i);  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    }    	non-compiled	[CE]  no  suitable  method  found  for  add(Set<Node>,int)	87	None	replace
123	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	68	None	replace
124	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime())  {	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	68	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());  [CE]  cannot  find  symbol  aliasRef  [FE]          java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    Preconditions.checkState(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol  aliasRef	134	None	replace
126	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]            java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	add	ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    Preconditions.checkState(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	134	1	replace
127	[BUG]  [BUGGY]  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]            java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    Preconditions.checkState(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration());    	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	134	1	replace
128	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i  +  1);  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());  [CE]  incompatible  types  [FE]              java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i  +  1);  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRef  =  aliasRefs.references.get(i  +  1);  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    Preconditions.checkState(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  incompatible  types	134	None	replace
129	[BUG]  [BUGGY]  Ref  aliasRef  =  aliasRefs.references.get(i  +  1);  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());  [CE]  incompatible  types  [FE]                java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRef  =  aliasRefs.references.get(i  +  1);  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRef  =  aliasRefs.references.get(i  +  1);  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    Preconditions.checkState(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  incompatible  types	134	None	replace
130	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    	non-compiled	[CE]  not  a  statement	141	None	replace
131	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	junit.framework.AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    	non-compiled	[CE]  not  a  statement	141	None	replace
132	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    	non-compiled	[CE]  ';'  expected	141	None	replace
133	[BUG]  [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	junit.framework.AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    	non-compiled	[CE]  not  a  statement	141	None	replace
134	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.clear();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasRefs.references.clear();	          aliasRefs.references.clear();    Node    aliasRefs    =    aliasRefs.references.clear();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	92	None	replace
135	[BUG]  [BUGGY]  Ref  aliasRefs  =  aliasRefs.references.clear();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRefs  =  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRefs  =  aliasRefs.references.clear();	          aliasRefs.references.clear();    Node    aliasRefs    =    aliasRefs.references.clear();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	92	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs.references,  newNodes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,List<Reference>,Set<Node>)  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs.references,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs.references,  newNodes);	          aliasRefs.references.clear();    NodeTraversal.traverse(compiler,    aliasRefs.references);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,List<Reference>,Set<Node>)	132	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs.references,  size);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,List<Reference>,int)  [FE]              java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs.references,  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs.references,  size);	          aliasRefs.references.clear();    NodeTraversal.traverse(compiler,    aliasRefs.references);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,List<Reference>,int)	132	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNodes,  aliasRefs.references);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Set<Node>,List<Reference>)  [FE]                java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNodes,  aliasRefs.references);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  newNodes,  aliasRefs.references);	          aliasRefs.references.clear();    NodeTraversal.traverse(compiler,    aliasRefs.references);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Set<Node>,List<Reference>)	132	None	replace
139	[BUG]  [BUGGY]  aliasRefs.references.clear();  NodeTraversal.traverse(compiler,  newNodes,  aliasRefs.references);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Set<Node>,List<Reference>)  [FE]                  java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.clear();  NodeTraversal.traverse(compiler,  newNodes,  aliasRefs.references);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.clear();  NodeTraversal.traverse(compiler,  newNodes,  aliasRefs.references);	          aliasRefs.references.clear();    NodeTraversal.traverse(compiler,    aliasRefs.references);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Set<Node>,List<Reference>)	132	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs.references);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,List<Reference>)  [FE]                    java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs.references);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs.references);	          aliasRefs.references.clear();    NodeTraversal.traverse(compiler,    aliasRefs.references);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,List<Reference>)	132	None	replace
141	[BUG]  [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);	  aliasRefs.setWellDefined(true);    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	114	None	replace
142	[BUG]  [BUGGY]  aliasRefs.setWellDefined(false);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.setWellDefined(false);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.setWellDefined(false);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);	  aliasRefs.setWellDefined(true);    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	114	None	replace
143	[BUG]  [BUGGY]  aliasRefs.setWellDefined(false);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.setWellDefined(false);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.setWellDefined(false);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);	  aliasRefs.setWellDefined(true);    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	114	None	replace
144	[BUG]  [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }	  aliasRefs.setWellDefined(true);    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	114	None	replace
145	[BUG]  [BUGGY]  Ref  aliasRef  =  aliasRefs.references.get(i,  newNodes);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRef  =  aliasRefs.references.get(i,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRef  =  aliasRefs.references.get(i,  newNodes);	  Ref    aliasRef    =    aliasRefs.references.get(i);    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	21	None	replace
146	[BUG]  [BUGGY]  Ref  aliasRef  =  aliasRefs.references.get(i,  size);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRef  =  aliasRefs.references.get(i,  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRef  =  aliasRefs.references.get(i,  size);	  Ref    aliasRef    =    aliasRefs.references.get(i);    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	21	None	replace
147	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes);  [CE]  no  suitable  method  found  for  add(Set<Node>)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes);	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  add(Set<Node>)	137	None	replace
148	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i,  size++);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i,  size++);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i,  size++);	  Node    aliasRefs    =(Node)newNodes.get(i++);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	70	None	replace
149	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime();  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime();    	non-compiled	[CE]  not  a  statement	52	None	replace
150	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isInvalidOnceInLifetime();  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isInvalidOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isInvalidOnceInLifetime();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime();    	non-compiled	[CE]  not  a  statement	52	None	replace
151	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i,  newNodes);  [CE]  no  suitable  method  found  for  add(int,Set<Node>)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i,  newNodes);	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  add(int,Set<Node>)	136	None	replace
152	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes);  [CE]  no  suitable  method  found  for  add(Set<Node>)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes);	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  add(Set<Node>)	136	None	replace
153	[BUG]  [BUGGY]  ReferenceCollectingCallback.Reference  aliasRefs  =  aliasRefs.references.get(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  ReferenceCollectingCallback.Reference  aliasRefs  =  aliasRefs.references.get(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	ReferenceCollectingCallback.Reference  aliasRefs  =  aliasRefs.references.get(i  +  1);	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    aliasRefs    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	107	None	replace
154	[BUG]  [BUGGY]  Reference  aliasRefs  =  aliasRefs.references.get(i  +  1);  [CE]  cannot  find  symbol  [FE]          java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  aliasRefs  =  aliasRefs.references.get(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  aliasRefs  =  aliasRefs.references.get(i  +  1);	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    aliasRefs    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
155	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime());	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	32	None	replace
156	[BUG]  [BUGGY]  Ref  aliasRefs  =  alias.references.get(i,  newNodes);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRefs  =  alias.references.get(i,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRefs  =  alias.references.get(i,  newNodes);	  Ref    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	22	None	replace
157	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i  +  2);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i  +  2);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i  +  2);	  Node    aliasRefs    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	15	None	replace
158	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  size  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  size  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i,  size  +  1);	  Node    aliasRefs    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	15	None	replace
159	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i,  newNodes);  [CE]  no  suitable  method  found  for  add(int,Set<Node>)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i,  newNodes);	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  add(int,Set<Node>)	138	None	replace
160	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isSyntheticOnceInLifetime());	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	81	None	replace
161	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isVarOnceInLifetime());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isVarOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isVarOnceInLifetime());	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	81	None	replace
162	[BUG]  [BUGGY]  aliasRefs.inlineAliasIfPossible();  [CE]  cannot  find  symbol  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.inlineAliasIfPossible();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.inlineAliasIfPossible();	  aliasRefs.inlineWellDefined();    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
163	[BUG]  [BUGGY]  aliasRefs.inlineAliases(newNodes);  [CE]  cannot  find  symbol  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.inlineAliases(newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.inlineAliases(newNodes);	  aliasRefs.inlineWellDefined();    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
164	[BUG]  [BUGGY]  aliasRefs.inlineWellDefined(i);  [CE]  cannot  find  symbol  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.inlineWellDefined(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.inlineWellDefined(i);	  aliasRefs.inlineWellDefined();    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
165	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime());	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime());    	non-compiled	[CE]  not  a  statement	35	None	replace
166	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnceInLifetime());  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnceInLifetime());	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime());    	non-compiled	[CE]  not  a  statement	35	None	replace
167	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  +  1,  newNodes,  namespace);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  +  1,  newNodes,  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(i  +  1,  newNodes,  namespace);	  Node    aliasRefs    =    Collections.newHashSet(i    +    1,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	78	None	replace
168	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  +  1,  newNodes,  collector);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  +  1,  newNodes,  collector);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(i  +  1,  newNodes,  collector);	  Node    aliasRefs    =    Collections.newHashSet(i    +    1,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	78	None	replace
169	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  +  1,  newNodes,  collection);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  +  1,  newNodes,  collection);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(i  +  1,  newNodes,  collection);	  Node    aliasRefs    =    Collections.newHashSet(i    +    1,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	78	None	replace
170	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  +  1,  newNodes,  size);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  +  1,  newNodes,  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(i  +  1,  newNodes,  size);	  Node    aliasRefs    =    Collections.newHashSet(i    +    1,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	78	None	replace
171	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(size  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(size  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(size  +  1);	  Node    aliasRefs    =    Collections.newHashSet(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	75	None	replace
172	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i,  size  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i,  size  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(i,  size  +  1);	  Node    aliasRefs    =    Collections.newHashSet(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	75	None	replace
173	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	82	None	replace
174	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	82	None	replace
175	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i-1,  newNodes);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.get(i-1,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.get(i-1,  newNodes);	  Node    aliasRefs    =    alias.references.get(i-1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	102	None	replace
176	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ';'  expected	96	None	replace
177	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i  +  2);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i  +  2);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i  +  2);	  Node    aliasRefs    =(Node)newNodes.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	69	None	replace
178	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i,  size  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i,  size  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i,  size  +  1);	  Node    aliasRefs    =(Node)newNodes.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	69	None	replace
179	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i  +  3);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i  +  3);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i  +  3);	  Node    aliasRefs    =(Node)newNodes.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	69	None	replace
180	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.get();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.get();	  Node    aliasRefs    =    aliasParent.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	14	None	replace
181	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i++);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i++);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i++);	  Node    aliasRefs    =    alias.references.get(i++);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	103	None	replace
182	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i++,  newNodes);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.get(i++,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.get(i++,  newNodes);	  Node    aliasRefs    =    alias.references.get(i++);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	103	None	replace
183	[BUG]  [BUGGY]  Namespace  aliasRefs  =  aliasRefs.references.get(i  +  1);  [CE]  cannot  find  symbol  [FE]          java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Namespace  aliasRefs  =  aliasRefs.references.get(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Namespace  aliasRefs  =  aliasRefs.references.get(i  +  1);	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    Namespace    aliasRefs    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
184	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  aliasRefs.references.clear();  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	add	                aliasRefs.references.clear();        aliasRefs.references.clear();    aliasRefs.references.clear();  aliasRefs.references.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	5	10	add
185	[BUG]  [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  aliasRefs.references.clear();  aliasRefs.references.clear();  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  aliasRefs.references.clear();  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.clear();        aliasRefs.references.clear();    aliasRefs.references.clear();  aliasRefs.references.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	5	10	add
186	[BUG]  [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  Refs.references.clear();  aliasRefs.references.clear();  [CE]  package  Refs  does  not  exist  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  Refs.references.clear();  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.clear();        aliasRefs.references.clear();    Refs.references.clear();  aliasRefs.references.clear();	  	non-compiled	[CE]  package  Refs  does  not  exist	5	None	add
187	[BUG]  [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  newNodes.add(aliasRefs.references);  aliasRefs.references.clear();  aliasRefs.references.clear();  [CE]  no  suitable  method  found  for  add(List<Reference>)  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  newNodes.add(aliasRefs.references);  aliasRefs.references.clear();  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.clear();        aliasRefs.references.clear();    newNodes.add(aliasRefs.references);  aliasRefs.references.clear();  aliasRefs.references.clear();	  	non-compiled	[CE]  no  suitable  method  found  for  add(List<Reference>)	5	None	add
188	[BUG]  [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  Node  aliasRefs  =  aliasRefs.references.get(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  Node  aliasRefs  =  aliasRefs.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.clear();        aliasRefs.references.clear();    Node  aliasRefs  =  aliasRefs.references.get(i);	  	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	5	None	add
189	[BUG]  [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  Node  aliasRefs  =  alias.references.get(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  Node  aliasRefs  =  alias.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.clear();        aliasRefs.references.clear();    Node  aliasRefs  =  alias.references.get(i);	  	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	5	None	add
190	[BUG]  [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  newNodes.add(aliasRefs.references);  aliasRefs.references.clear();  [CE]  no  suitable  method  found  for  add(List<Reference>)  [FE]              java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  newNodes.add(aliasRefs.references);  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.clear();        aliasRefs.references.clear();    newNodes.add(aliasRefs.references);  aliasRefs.references.clear();	  	non-compiled	[CE]  no  suitable  method  found  for  add(List<Reference>)	5	None	add
191	[BUG]  [BUGGY]  newNodes.add(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  ';'  expected	113	None	replace
192	[BUG]  [BUGGY]  newNodes.add(aliasRefs.isWellDefined()?  aliasRefs.firstReferenceIsAssigningDeclaration()  :  aliasRefs.isAssignedOnceInLifetime());  [CE]  no  suitable  method  found  for  add(boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs.isWellDefined()?  aliasRefs.firstReferenceIsAssigningDeclaration()  :  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs.isWellDefined()?  aliasRefs.firstReferenceIsAssigningDeclaration()  :  aliasRefs.isAssignedOnceInLifetime());	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  add(boolean)	86	None	replace
193	[BUG]  [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }	  aliasRefs.setWellDefined(true);    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	83	None	replace
194	[BUG]  [BUGGY]  aliasRefs.setWellDefined(false);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.setWellDefined(false);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.setWellDefined(false);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }	  aliasRefs.setWellDefined(true);    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	83	None	replace
195	[BUG]  [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;	  aliasRefs.setWellDefined(true);    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	83	None	replace
196	[BUG]  [BUGGY]  aliasRefs.setWellDefined(false);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.setWellDefined(false);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.setWellDefined(false);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;	  aliasRefs.setWellDefined(true);    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	83	None	replace
197	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i,  size);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i,  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasRefs.get(i,  size);	  Node    aliasRefs    =    newNodes.get(i,    size);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	118	None	replace
198	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  size  -  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  size  -  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i,  size  -  1);	  Node    aliasRefs    =    newNodes.get(i,    size);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	118	None	replace
199	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i,  i);	  Node    aliasRefs    =    newNodes.get(i,    size);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	118	None	replace
200	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    }    	non-compiled	[CE]  not  a  statement	116	None	replace
201	[BUG]  [BUGGY]  Ref  aliasRef  =  aliasRefs.references.get(i  +  2);  [CE]  incompatible  types  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRef  =  aliasRefs.references.get(i  +  2);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRef  =  aliasRefs.references.get(i  +  2);	  Ref    aliasRef    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  incompatible  types	91	None	replace
202	[BUG]  [BUGGY]  Ref  aliasRef  =  aliasRefs.references.get(i  +  11);  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRef  =  aliasRefs.references.get(i  +  11);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRef  =  aliasRefs.references.get(i  +  11);	  Ref    aliasRef    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  incompatible  types	91	None	replace
203	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i,  size  -  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i,  size  -  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i,  size  -  1);	  Node    aliasRefs    =(Node)newNodes.get(i    -    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	110	None	replace
204	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i  -  2);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i  -  2);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i  -  2);	  Node    aliasRefs    =(Node)newNodes.get(i    -    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	110	None	replace
205	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.referenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.referenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.referenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }	  if(aliasRefs.isWellDefined()    ||    aliasRefs.referenceIsAssigningDeclaration())    {    aliasRefs.references.get(i);    }    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
206	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }  [CE]  cannot  find  symbol  aliasRef  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }	  if(aliasRefs.isWellDefined()    ||    aliasRefs.referenceIsAssigningDeclaration())    {    aliasRefs.references.get(i);    }    	non-compiled	[CE]  cannot  find  symbol  aliasRef	122	None	replace
207	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;  }  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;  }	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
208	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  newNodes,  namespace);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  newNodes,  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.get(i,  newNodes,  namespace);	  Node    aliasRefs    =    alias.references.get(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	73	None	replace
209	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  size);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.get(i,  size);	  Node    aliasRefs    =    alias.references.get(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	73	None	replace
210	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  alias);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  alias);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i,  alias);	  Node    aliasRefs    =    alias.references.get(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	73	None	replace
211	[BUG]  [BUGGY]  Ref  aliasRefs  =  aliasRefs.references.get(i  +  2);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRefs  =  aliasRefs.references.get(i  +  2);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRefs  =  aliasRefs.references.get(i  +  2);	  Ref    aliasRefs    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	24	None	replace
212	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  not  a  statement	124	None	replace
213	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.referenceIsAssigningDeclaration();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.referenceIsAssigningDeclaration();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.referenceIsAssigningDeclaration();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  not  a  statement	124	None	replace
214	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).clone();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).clone();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i).clone();	  Node    aliasRefs    =(Node)newNodes.get(i).cloneTree();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	145	None	replace
215	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i).cloneTree();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i).cloneTree();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i).cloneTree();	  Node    aliasRefs    =(Node)newNodes.get(i).cloneTree();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	145	None	replace
216	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).cloneAlias();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).cloneAlias();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i).cloneAlias();	  Node    aliasRefs    =(Node)newNodes.get(i).cloneTree();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	145	None	replace
217	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).cloneParent();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).cloneParent();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i).cloneParent();	  Node    aliasRefs    =(Node)newNodes.get(i).cloneTree();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	145	None	replace
218	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i);	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(i);    	non-compiled	[CE]  not  a  statement	31	None	replace
219	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i);	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(i);    	non-compiled	[CE]  not  a  statement	31	None	replace
220	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(i);    	non-compiled	[CE]  not  a  statement	31	None	replace
221	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  newNodes.add(i);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  newNodes.add(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  newNodes.add(i);	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(i);    	non-compiled	[CE]  not  a  statement	31	None	replace
222	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i	          aliasRefs.references.get(i);    if(aliasRefs.references!=    null)    {    if(!inlineAliasIfPossible)    {    return    function()    {    var    args=arguments;    setTimeout(function()    {    alert(args)    }    }    	non-compiled	[CE]  ')'  expected	38	None	replace
223	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ';'  expected	99	None	replace
224	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ';'  expected	99	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,ReferenceCollectingCallback,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  namespace);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    collector);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,ReferenceCollectingCallback,GlobalNamespace)	44	None	replace
226	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  collector,  newNodes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,ReferenceCollectingCallback,Set<Node>)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  collector,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  collector,  newNodes);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    collector);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,ReferenceCollectingCallback,Set<Node>)	44	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  size);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,ReferenceCollectingCallback,int)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  size);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    collector);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,ReferenceCollectingCallback,int)	44	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  flags);  [CE]  cannot  find  symbol  flags  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  flags);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  flags);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    collector);    	non-compiled	[CE]  cannot  find  symbol  flags	44	None	replace
229	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i,  newNodes,  namespace);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i,  newNodes,  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(i,  newNodes,  namespace);	  Node    aliasRefs    =    Collections.newHashSet(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	76	None	replace
230	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i,  newNodes,  collector);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i,  newNodes,  collector);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(i,  newNodes,  collector);	  Node    aliasRefs    =    Collections.newHashSet(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	76	None	replace
231	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i,  newNodes,  size);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i,  newNodes,  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(i,  newNodes,  size);	  Node    aliasRefs    =    Collections.newHashSet(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	76	None	replace
232	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i,  newNodes,  collection);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i,  newNodes,  collection);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(i,  newNodes,  collection);	  Node    aliasRefs    =    Collections.newHashSet(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	76	None	replace
233	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }  [CE]  cannot  find  symbol  aliasRef  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }	          aliasRefs.references.get(i);    aliasRefs.references.get(i);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	37	None	replace
234	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }  [CE]  cannot  find  symbol  aliasRef  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }	          aliasRefs.references.get(i);    aliasRefs.references.get(i);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	37	None	replace
235	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }  [CE]  cannot  find  symbol  aliasRef  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }	          aliasRefs.references.get(i);    aliasRefs.references.get(i);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	37	None	replace
236	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }  [CE]  cannot  find  symbol  aliasRef  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }	          aliasRefs.references.get(i);    aliasRefs.references.get(i);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	37	None	replace
237	[BUG]  [BUGGY]  aliasRefs.references.clear(i,  newNodes);  [CE]  no  suitable  method  found  for  clear(int,Set<Node>)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.clear(i,  newNodes);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.clear(i,  newNodes);	  aliasRefs.references.clear(i);    	non-compiled	[CE]  no  suitable  method  found  for  clear(int,Set<Node>)	43	None	replace
238	[BUG]  [BUGGY]  aliasRefs.references.clear(i,  size);  [CE]  no  suitable  method  found  for  clear(int,int)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.clear(i,  size);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.clear(i,  size);	  aliasRefs.references.clear(i);    	non-compiled	[CE]  no  suitable  method  found  for  clear(int,int)	43	None	replace
239	[BUG]  [BUGGY]  aliasRefs.references.clear(i,  namespace);  [CE]  no  suitable  method  found  for  clear(int,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.clear(i,  namespace);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.clear(i,  namespace);	  aliasRefs.references.clear(i);    	non-compiled	[CE]  no  suitable  method  found  for  clear(int,GlobalNamespace)	43	None	replace
240	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.node.references.get(i);  [CE]  cannot  find  symbol  node  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRef  =  aliasRefs.node.references.get(i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRef  =  aliasRefs.node.references.get(i);	  Node    aliasRef    =    aliasRefs.references.get(i);    	non-compiled	[CE]  cannot  find  symbol  node	57	None	replace
241	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i,  newNodes);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i,  newNodes);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRef  =  aliasRefs.references.get(i,  newNodes);	  Node    aliasRef    =    aliasRefs.references.get(i);    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	57	None	replace
242	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  size  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  size  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i,  size  +  1);	  Node    aliasRefs    =    newNodes.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	25	None	replace
243	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	67	None	replace
244	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime())  {	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	67	None	replace
245	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  newNodes.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  newNodes.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  newNodes.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	67	None	replace
246	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	51	None	replace
247	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  newNodes.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  newNodes.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  newNodes.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	51	None	replace
248	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.get(i);  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.get(i);	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	51	None	replace
249	[BUG]  [BUGGY]  aliasRefs  =  alias.references.get(i);  [CE]  cannot  find  symbol  references  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs  =  alias.references.get(i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs  =  alias.references.get(i);	  aliasRefs    =    aliasRefs.references.get(i);    	non-compiled	[CE]  cannot  find  symbol  references	54	None	replace
250	[BUG]  [BUGGY]  aliasRefs  =  newNodes.get(i);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs  =  newNodes.get(i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs  =  newNodes.get(i);	  aliasRefs    =    aliasRefs.references.get(i);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
251	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  namespace,  i);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,GlobalNamespace,int)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  namespace,  i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  namespace,  i);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    i);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,GlobalNamespace,int)	104	None	replace
252	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  size,  i);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,int,int)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  size,  i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  size,  i);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    i);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,int,int)	104	None	replace
253	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  i,  size);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,int,int)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  i,  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  i,  size);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    i);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,int,int)	104	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  collection,  newNodes,  i);  [CE]  cannot  find  symbol  collection  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  collection,  newNodes,  i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  collection,  newNodes,  i);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    i);    	non-compiled	[CE]  cannot  find  symbol  collection	104	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  scope,  i);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,Scope,int)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  scope,  i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  scope,  i);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    i);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,Scope,int)	104	None	replace
256	[BUG]  [BUGGY]  aliasRefs.references.get(i).addChildToFront(newNodes,  namespace);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.get(i).addChildToFront(newNodes,  namespace);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.get(i).addChildToFront(newNodes,  namespace);	  aliasRefs.references.get(i).addChildToFront(newNodes);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
257	[BUG]  [BUGGY]  aliasRefs.references.get(i).addChildToFront(newNodes,  size);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.get(i).addChildToFront(newNodes,  size);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.get(i).addChildToFront(newNodes,  size);	  aliasRefs.references.get(i).addChildToFront(newNodes);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
258	[BUG]  [BUGGY]  aliasRefs.references.get(i).addChildToFront(newNodes,  scope);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.get(i).addChildToFront(newNodes,  scope);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.get(i).addChildToFront(newNodes,  scope);	  aliasRefs.references.get(i).addChildToFront(newNodes);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
259	[BUG]  [BUGGY]  aliasRefs.references.get(i).addChildToFront(newNodes,  newNodes);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.get(i).addChildToFront(newNodes,  newNodes);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.get(i).addChildToFront(newNodes,  newNodes);	  aliasRefs.references.get(i).addChildToFront(newNodes);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
260	[BUG]  [BUGGY]  aliasRefs  =  alias.references.get(i  +  1);  [CE]  cannot  find  symbol  references  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs  =  alias.references.get(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs  =  alias.references.get(i  +  1);	  aliasRefs    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol  references	3	None	replace
261	[BUG]  [BUGGY]  aliasRefs.references.get(i).addChildToBack(newNodes,  namespace);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.get(i).addChildToBack(newNodes,  namespace);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.get(i).addChildToBack(newNodes,  namespace);	  aliasRefs.references.get(i).addChildToBack(newNodes);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
262	[BUG]  [BUGGY]  aliasRefs.references.get(i).addChildToBack(newNodes,  size);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.get(i).addChildToBack(newNodes,  size);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.get(i).addChildToBack(newNodes,  size);	  aliasRefs.references.get(i).addChildToBack(newNodes);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
263	[BUG]  [BUGGY]  aliasRefs.references.get(i).addChildToBack(newNodes,  newNodes);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.get(i).addChildToBack(newNodes,  newNodes);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.get(i).addChildToBack(newNodes,  newNodes);	  aliasRefs.references.get(i).addChildToBack(newNodes);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
264	[BUG]  [BUGGY]  aliasRefs.references.get(i).addChildToBack(newNodes,  scope);  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.get(i).addChildToBack(newNodes,  scope);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.get(i).addChildToBack(newNodes,  scope);	  aliasRefs.references.get(i).addChildToBack(newNodes);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  namespace,  collector);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,GlobalNamespace,ReferenceCollectingCallback)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  namespace,  collector);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  namespace,  collector);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,GlobalNamespace,ReferenceCollectingCallback)	45	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  namespace,  newNodes);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,GlobalNamespace,Set<Node>)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  namespace,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  namespace,  newNodes);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,GlobalNamespace,Set<Node>)	45	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  i,  namespace);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,int,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  i,  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  i,  namespace);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    namespace);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,int,GlobalNamespace)	45	None	replace
268	[BUG]  [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);	  aliasRefs.isWellDefined();    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	115	None	replace
269	[BUG]  [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&!aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&!aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&!aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);	  aliasRefs.isWellDefined();    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	115	None	replace
270	[BUG]  [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {	  aliasRefs.isWellDefined();    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	115	None	replace
271	[BUG]  [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i);  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i);	  aliasRefs.isWellDefined();    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	115	None	replace
272	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i).references;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i).references;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i).references;	  Node    aliasRefs    =    newNodes.get(i).references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	117	None	replace
273	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i).references;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasRefs.get(i).references;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasRefs.get(i).references;	  Node    aliasRefs    =    newNodes.get(i).references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	117	None	replace
274	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i).references;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.get(i).references;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.get(i).references;	  Node    aliasRefs    =    newNodes.get(i).references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	117	None	replace
275	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i).namespace;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i).namespace;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i).namespace;	  Node    aliasRefs    =    newNodes.get(i).references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	117	None	replace
276	[BUG]  [BUGGY]  aliasRefs.references.clear();  Node  aliasRefs  =  Collections.newHashSet(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.clear();  Node  aliasRefs  =  Collections.newHashSet(i  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.clear();  Node  aliasRefs  =  Collections.newHashSet(i  +  1);	          aliasRefs.references.clear();    Node    aliasRefs    =    Collections.newHashSet(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	10	None	replace
277	[BUG]  [BUGGY]  aliasRefs.references.clear();  Node  aliasRefs  =  Collections.newHashSet(i,  newNodes);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.clear();  Node  aliasRefs  =  Collections.newHashSet(i,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.clear();  Node  aliasRefs  =  Collections.newHashSet(i,  newNodes);	          aliasRefs.references.clear();    Node    aliasRefs    =    Collections.newHashSet(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	10	None	replace
278	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce());	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce());    	non-compiled	[CE]  not  a  statement	147	None	replace
279	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce());	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce());    	non-compiled	[CE]  not  a  statement	147	None	replace
280	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce();    	non-compiled	[CE]  not  a  statement	123	None	replace
281	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce();    	non-compiled	[CE]  not  a  statement	123	None	replace
282	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isInitializingOnce();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isInitializingOnce();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isInitializingOnce();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce();    	non-compiled	[CE]  not  a  statement	123	None	replace
283	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(i  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(i  +  1);	  Node    aliasRefs    =    Collections.newHashSetWithExpectedSize(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
284	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(i,  size);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(i,  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(i,  size);	  Node    aliasRefs    =    Collections.newHashSetWithExpectedSize(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
285	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(size  -  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(size  -  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(size  -  1);	  Node    aliasRefs    =    Collections.newHashSetWithExpectedSize(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
286	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(i,  newNodes);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(i,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(i,  newNodes);	  Node    aliasRefs    =    Collections.newHashSetWithExpectedSize(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
287	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(size,  i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(size,  i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(size,  i);	  Node    aliasRefs    =    Collections.newHashSetWithExpectedSize(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(aliasRefs.references.get(i  +  1)  ==  null);  [CE]  cannot  find  symbol  aliasRef  [FE]            java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Preconditions.checkState(aliasRefs.references.get(i  +  1)  ==  null);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Preconditions.checkState(aliasRefs.references.get(i  +  1)  ==  null);	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    Preconditions.checkState(aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	109	None	replace
289	[BUG]  [BUGGY]  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Preconditions.checkState(aliasRefs.references.get(i  +  1);  [CE]  ')'  expected  [FE]              java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Preconditions.checkState(aliasRefs.references.get(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	ReferenceCollectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i);  Preconditions.checkState(aliasRefs.references.get(i  +  1);	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    Preconditions.checkState(aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  ')'  expected	109	None	replace
290	[BUG]  [BUGGY]  Preconditions.checkState(aliasRefs.references.get(i  +  1)!=  null);  [CE]  cannot  find  symbol  aliasRef  [FE]                java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Preconditions.checkState(aliasRefs.references.get(i  +  1)!=  null);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Preconditions.checkState(aliasRefs.references.get(i  +  1)!=  null);	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    Preconditions.checkState(aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	109	None	replace
291	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i);  Preconditions.checkState(aliasRefs.references.get(i  +  1);  [CE]  ')'  expected  [FE]                  java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRef  =  aliasRefs.references.get(i);  Preconditions.checkState(aliasRefs.references.get(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRef  =  aliasRefs.references.get(i);  Preconditions.checkState(aliasRefs.references.get(i  +  1);	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    Preconditions.checkState(aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  ')'  expected	109	None	replace
292	[BUG]  [BUGGY]  Reference  aliasRef  =  aliasRefs.references.get(i-1);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  aliasRef  =  aliasRefs.references.get(i-1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  aliasRef  =  aliasRefs.references.get(i-1);	  Reference    collectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i-1);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
293	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce())    {    	non-compiled	[CE]  not  a  statement	148	None	replace
294	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce())    {    	non-compiled	[CE]  not  a  statement	148	None	replace
295	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }  [CE]  cannot  find  symbol  aliasRef  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }	  if(!aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    	non-compiled	[CE]  cannot  find  symbol  aliasRef	121	None	replace
296	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  }  [CE]  cannot  find  symbol  aliasRef  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  }	  if(!aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    	non-compiled	[CE]  cannot  find  symbol  aliasRef	121	None	replace
297	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references	  if(!aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    	non-compiled	[CE]  ';'  expected	121	None	replace
298	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes;	  Node    aliasRefs    =    alias.references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	142	None	replace
299	[BUG]  [BUGGY]  Node  aliasRefs  =  i;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  i;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  i;	  Node    aliasRefs    =    alias.references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	142	None	replace
300	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.references;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.references;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.references;	  Node    aliasRefs    =    alias.references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	142	None	replace
301	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  namespace,  size);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,GlobalNamespace,int)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  namespace,  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  namespace,  size);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    size);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,GlobalNamespace,int)	48	None	replace
302	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  collection,  newNodes,  size);  [CE]  cannot  find  symbol  collection  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  collection,  newNodes,  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  collection,  newNodes,  size);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    size);    	non-compiled	[CE]  cannot  find  symbol  collection	48	None	replace
303	[BUG]  [BUGGY]  aliasRefs.references.clear();  Node  aliasRefs  =  aliasRefs.references.get(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.clear();  Node  aliasRefs  =  aliasRefs.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.clear();  Node  aliasRefs  =  aliasRefs.references.get(i);	          aliasRefs.references.clear();    Node    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	131	None	replace
304	[BUG]  [BUGGY]  (aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  (aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
305	[BUG]  [BUGGY]  aliasRefs.references.clear();  Node  aliasRefs  =  newNodes.get(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.clear();  Node  aliasRefs  =  newNodes.get(i  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.clear();  Node  aliasRefs  =  newNodes.get(i  +  1);	          aliasRefs.references.clear();    Node    aliasRefs    =    newNodes.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	9	None	replace
306	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNodes,  aliasRefs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Set<Node>,ReferenceCollection)  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNodes,  aliasRefs);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  newNodes,  aliasRefs);	          aliasRefs.references.clear();    NodeTraversal.traverse(compiler,    aliasRefs,    newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Set<Node>,ReferenceCollection)	130	None	replace
307	[BUG]  [BUGGY]  aliasRefs.references.clear();  NodeTraversal.traverse(compiler,  newNodes,  aliasRefs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Set<Node>,ReferenceCollection)  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.clear();  NodeTraversal.traverse(compiler,  newNodes,  aliasRefs);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.clear();  NodeTraversal.traverse(compiler,  newNodes,  aliasRefs);	          aliasRefs.references.clear();    NodeTraversal.traverse(compiler,    aliasRefs,    newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Set<Node>,ReferenceCollection)	130	None	replace
308	[BUG]  [BUGGY]  aliasRefs.references.add(var,  i);  [CE]  cannot  find  symbol  var  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.add(var,  i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.add(var,  i);	  aliasRefs.references.add(i);    	non-compiled	[CE]  cannot  find  symbol  var	42	None	replace
309	[BUG]  [BUGGY]  Ref  aliasRef  =  aliasRef.references.get(i);  [CE]  cannot  find  symbol  references  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRef  =  aliasRef.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRef  =  aliasRef.references.get(i);	  Ref    aliasRef    =    alias.references.get(i);    	non-compiled	[CE]  cannot  find  symbol  references	23	None	replace
310	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.cloneTree();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.node.cloneTree();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.node.cloneTree();	  Node    aliasRefs    =    alias.node.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	146	None	replace
311	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.get(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.node.get(i  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.node.get(i  +  1);	  Node    aliasRefs    =    alias.node.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	146	None	replace
312	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i,  namespace);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i,  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i,  namespace);	  Node    aliasRefs    =(Node)newNodes.get(i,    size);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	71	None	replace
313	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i,  i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i,  i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i,  i);	  Node    aliasRefs    =(Node)newNodes.get(i,    size);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	71	None	replace
314	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i,  newNodes.size());  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i,  newNodes.size());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i,  newNodes.size());	  Node    aliasRefs    =(Node)newNodes.get(i,    size);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	71	None	replace
315	[BUG]  [BUGGY]  Node  aliasRef  =  alias.references.get(i  +  1);  [CE]  cannot  find  symbol  references  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRef  =  alias.references.get(i  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRef  =  alias.references.get(i  +  1);	  Node    aliasRef    =    alias.references.get(i);    	non-compiled	[CE]  cannot  find  symbol  references	16	None	replace
316	[BUG]  [BUGGY]  Node  aliasRef  =  aliasParent.references.get(i);  [CE]  cannot  find  symbol  references  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRef  =  aliasParent.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRef  =  aliasParent.references.get(i);	  Node    aliasRef    =    alias.references.get(i);    	non-compiled	[CE]  cannot  find  symbol  references	16	None	replace
317	[BUG]  [BUGGY]  Node  aliasRef  =  aliases.references.get(i);  [CE]  package  aliases  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRef  =  aliases.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRef  =  aliases.references.get(i);	  Node    aliasRef    =    alias.references.get(i);    	non-compiled	[CE]  package  aliases  does  not  exist	16	None	replace
318	[BUG]  [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }	  aliasRefs.isWellDefined();    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	84	None	replace
319	[BUG]  [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;	  aliasRefs.isWellDefined();    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	84	None	replace
320	[BUG]  [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;	  aliasRefs.isWellDefined();    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	84	None	replace
321	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnceInLifetime();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnceInLifetime();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnceInLifetime();    	non-compiled	[CE]  not  a  statement	89	None	replace
322	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnceInLifetime();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnceInLifetime();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnceInLifetime();    	non-compiled	[CE]  not  a  statement	89	None	replace
323	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isInitializingOnceInLifetime();  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isInitializingOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isInitializingOnceInLifetime();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnceInLifetime();    	non-compiled	[CE]  not  a  statement	89	None	replace
324	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.getReferences(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.node.getReferences(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.node.getReferences(i);	  Node    aliasRefs    =    alias.node.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	13	None	replace
325	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.getNode();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.node.getNode();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.node.getNode();	  Node    aliasRefs    =    alias.node.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	13	None	replace
326	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.references();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.node.references();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.node.references();	  Node    aliasRefs    =    alias.node.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	13	None	replace
327	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.addAll(newNodes);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.addAll(newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.addAll(newNodes);	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	28	None	replace
328	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	20	None	replace
329	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;  [CE]  not  a  statement  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	20	None	replace
330	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.getReferences(i,  newNodes);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.getReferences(i,  newNodes);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.getReferences(i,  newNodes);	  Node    aliasRefs    =    alias.getReferences(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	106	None	replace
331	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.getReferences(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.getReferences(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.getReferences(i  +  1);	  Node    aliasRefs    =    alias.getReferences(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	106	None	replace
332	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.getReferences(i,  size);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.getReferences(i,  size);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.getReferences(i,  size);	  Node    aliasRefs    =    alias.getReferences(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	106	None	replace
333	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.getReferences(i,  namespace);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.getReferences(i,  namespace);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.getReferences(i,  namespace);	  Node    aliasRefs    =    alias.getReferences(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	106	None	replace
334	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime();  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime();    	non-compiled	[CE]  not  a  statement	52	None	replace
335	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnceInLifetime();  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnceInLifetime();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime();    	non-compiled	[CE]  not  a  statement	52	None	replace
336	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  scope,  compiler);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,Scope,AbstractCompiler)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  scope,  compiler);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  scope,  compiler);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    scope);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,Scope,AbstractCompiler)	47	None	replace
337	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  i,  scope);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,int,Scope)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  i,  scope);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  i,  scope);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    scope);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,int,Scope)	47	None	replace
338	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime());	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime());    	non-compiled	[CE]  not  a  statement	35	None	replace
339	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  inlineAliases);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,boolean)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  inlineAliases);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  inlineAliases);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    collection);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,boolean)	46	None	replace
340	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  *  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  *  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(i  *  1);	  Node    aliasRefs    =    Collections.newHashSet(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	75	None	replace
341	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  +  2);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  +  2);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(i  +  2);	  Node    aliasRefs    =    Collections.newHashSet(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	75	None	replace
342	[BUG]  [BUGGY]  Node  aliasRefs  =  i.getReferences();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  i.getReferences();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  i.getReferences();	  Node    aliasRefs    =    alias.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	11	None	replace
343	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.getReferences()[i];  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.getReferences()[i];  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.getReferences()[i];	  Node    aliasRefs    =    alias.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	11	None	replace
344	[BUG]  [BUGGY]  Preconditions.checkState(i!=  size);  Node  aliasRefs  =  alias.references.get(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Preconditions.checkState(i!=  size);  Node  aliasRefs  =  alias.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Preconditions.checkState(i!=  size);  Node  aliasRefs  =  alias.references.get(i);	          aliasRefs.references.clear();    Node    aliasRefs    =    alias.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	131	None	replace
345	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnceInLifetime();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnceInLifetime();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnceInLifetime();    	non-compiled	[CE]  not  a  statement	89	None	replace
346	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this,  size);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,CollapseProperties,int)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this,  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this,  size);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,CollapseProperties,int)	119	None	replace
347	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  i,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,int,CollapseProperties)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  i,  this);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  i,  this);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,int,CollapseProperties)	119	None	replace
348	[BUG]  [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  i);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  i);	  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
349	[BUG]  [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.isAssigningDeclaration());  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.isAssigningDeclaration());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.isAssigningDeclaration());	  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
350	[BUG]  [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.assigningDeclaration());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.assigningDeclaration());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.assigningDeclaration());	  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
351	[BUG]  [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined()  &&  aliasRefs.isAssigningDeclaration());  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined()  &&  aliasRefs.isAssigningDeclaration());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs.firstReferenceIsWellDefined()  &&  aliasRefs.isAssigningDeclaration());	  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
352	[BUG]  [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.getAssignedOnceInLifetime());  [CE]  cannot  find  symbol  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.getAssignedOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.getAssignedOnceInLifetime());	  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
353	[BUG]  [BUGGY]  newNodes.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	17	None	replace
354	[BUG]  [BUGGY]  newNodes.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	82	None	replace
355	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(i  -  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(i  -  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(i  -  1);	  Node    aliasRefs    =    Collections.newHashSetWithExpectedSize(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
356	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(i  *  size);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(i  *  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(i  *  size);	  Node    aliasRefs    =    Collections.newHashSetWithExpectedSize(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
357	[BUG]  [BUGGY]  aliasRefs.references.get(i).addChildToBack(newNodes,  var);  [CE]  cannot  find  symbol  var  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.get(i).addChildToBack(newNodes,  var);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.get(i).addChildToBack(newNodes,  var);	  aliasRefs.references.get(i).addChildToBack(newNodes);    	non-compiled	[CE]  cannot  find  symbol  var	144	None	replace
358	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce();    	non-compiled	[CE]  not  a  statement	123	None	replace
359	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  return  newNodes;  }  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  return  newNodes;  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    }    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
360	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnceInLifetime())  {  return  newNodes;  }  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnceInLifetime())  {  return  newNodes;  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    }    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
361	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  newNodes.add(newNodes);  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  newNodes.add(newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  newNodes.add(newNodes);	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	113	None	replace
362	[BUG]  [BUGGY]  aliasRefs  =  aliasRefs.references.clear();  [CE]  incompatible  types  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs  =  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs  =  aliasRefs.references.clear();	          aliasRefs.references.clear();    Node    aliasRefs    =    aliasRefs.references.clear();    	non-compiled	[CE]  incompatible  types	92	None	replace
363	[BUG]  [BUGGY]  Preconditions.checkState(i!=  size);  Node  aliasRefs  =  aliasRefs.references.clear();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Preconditions.checkState(i!=  size);  Node  aliasRefs  =  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Preconditions.checkState(i!=  size);  Node  aliasRefs  =  aliasRefs.references.clear();	          aliasRefs.references.clear();    Node    aliasRefs    =    aliasRefs.references.clear();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	92	None	replace
364	[BUG]  [BUGGY]  aliasRefs.setWellDefined(i);  [CE]  cannot  find  symbol  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.setWellDefined(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.setWellDefined(i);	  aliasRefs.isWellDefined();    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
365	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	28	None	replace
366	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    }    	non-compiled	[CE]  not  a  statement	116	None	replace
367	[BUG]  [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    }    	non-compiled	[CE]  not  a  statement	116	None	replace
368	[BUG]  [BUGGY]  aliasRefs  =  aliasRefs.references.get(i,  newNodes);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs  =  aliasRefs.references.get(i,  newNodes);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs  =  aliasRefs.references.get(i,  newNodes);	  aliasRefs    =    aliasRefs.references.get(i);    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	54	None	replace
369	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references(i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references(i);	  Node    aliasRefs    =    alias.getReferences(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	106	None	replace
370	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	add	                aliasRefs.references.clear();        aliasRefs.references.clear();    aliasRefs.references.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	5	10	add
371	[BUG]  [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  aliasRefs.references.clear();  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.clear();        aliasRefs.references.clear();    aliasRefs.references.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	5	10	add
372	[BUG]  [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  Refs  aliasRefs  =  aliasRefs.references.get(i);  [CE]  cannot  find  symbol  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  Refs  aliasRefs  =  aliasRefs.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.clear();        aliasRefs.references.clear();    Refs  aliasRefs  =  aliasRefs.references.get(i);	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
373	[BUG]  [BUGGY]  newNodes.add(aliasRefs);  [CE]  no  suitable  method  found  for  add(ReferenceCollection)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs);	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    }    	non-compiled	[CE]  no  suitable  method  found  for  add(ReferenceCollection)	87	None	replace
374	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  newNodes.add(newNodes);  }  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  newNodes.add(newNodes);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInvalidOnceInLifetime())  {  newNodes.add(newNodes);  }	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    }    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
375	[BUG]  [BUGGY]  aliasRefs.references.get(i  -  1);  [CE]  cannot  find  symbol  aliasRef  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.get(i  -  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.get(i  -  1);	  aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	2	None	replace
376	[BUG]  [BUGGY]  Node  aliasRefs  =  args.references;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  args.references;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  args.references;	  Node    aliasRefs    =    alias.references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	142	None	replace
377	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.next();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.next();  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.next();	  Node    aliasRefs    =    i.next();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	105	None	replace
378	[BUG]  [BUGGY]  Node  aliasRefs  =  args.next();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  args.next();  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  args.next();	  Node    aliasRefs    =    i.next();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	105	None	replace
379	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i  *  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i  *  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i  *  1);	  Node    aliasRefs    =(Node)newNodes.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	69	None	replace
380	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.references.get(i-1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.node.references.get(i-1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.node.references.get(i-1);	  Node    aliasRefs    =    alias.node.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	129	None	replace
381	[BUG]  [BUGGY]  Ref  aliasRef  =  aliasRefs.references.get(i  +  1,  newNodes);  [CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRef  =  aliasRefs.references.get(i  +  1,  newNodes);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRef  =  aliasRefs.references.get(i  +  1,  newNodes);	  Ref    aliasRef    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  method  get  in  interface  List<E>  cannot  be  applied  to  given  types;	91	None	replace
382	[BUG]  [BUGGY]  Reference  collectingCallback.Reference  aliasRef  =  aliasRefs.get(i);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  collectingCallback.Reference  aliasRef  =  aliasRefs.get(i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  collectingCallback.Reference  aliasRef  =  aliasRefs.get(i);	  Reference    collectingCallback.Reference    aliasRef    =    newNodes.get(i);    	non-compiled	[CE]  ';'  expected	58	None	replace
383	[BUG]  [BUGGY]  Ref  aliasRef  =  aliasrefs.references.get(i);  [CE]  package  aliasrefs  does  not  exist  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRef  =  aliasrefs.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRef  =  aliasrefs.references.get(i);	  Ref    aliasRef    =    alias.references.get(i);    	non-compiled	[CE]  package  aliasrefs  does  not  exist	23	None	replace
384	[BUG]  [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
385	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime());	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	34	None	replace
386	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	51	None	replace
387	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes!=  null;  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes!=  null;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes!=  null;	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	51	None	replace
388	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  var,  namespace);  [CE]  cannot  find  symbol  var  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  var,  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  var,  namespace);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    namespace);    	non-compiled	[CE]  cannot  find  symbol  var	45	None	replace
389	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  globalNamespace,  namespace);  [CE]  cannot  find  symbol  globalNamespace  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  globalNamespace,  namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  globalNamespace,  namespace);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    namespace);    	non-compiled	[CE]  cannot  find  symbol  globalNamespace	45	None	replace
390	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i  *  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i  *  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i  *  1);	  Node    aliasRefs    =    newNodes.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	25	None	replace
391	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i  +  2);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i  +  2);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i  +  2);	  Node    aliasRefs    =    newNodes.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	25	None	replace
392	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i  -  1  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i  -  1  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i  -  1  +  1);	  Node    aliasRefs    =(Node)newNodes.get(i    -    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	110	None	replace
393	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.referencesParent.getReferences();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.referencesParent.getReferences();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.referencesParent.getReferences();	  Node    aliasRefs    =    aliasParent.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	14	None	replace
394	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasParent.getReferences(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasParent.getReferences(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasParent.getReferences(i);	  Node    aliasRefs    =    aliasParent.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	14	None	replace
395	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  newNodes  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasRefs.references.get(i,  newNodes  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasRefs.references.get(i,  newNodes  +  1);	  Node    aliasRefs    =    aliasRefs.references.get(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	112	None	replace
396	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  i);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,ReferenceCollectingCallback,int)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  i);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    collector);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,ReferenceCollectingCallback,int)	44	None	replace
397	[BUG]  [BUGGY]  Reference  aliasRef  =  aliases.references.get(i);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  aliasRef  =  aliases.references.get(i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  aliasRef  =  aliases.references.get(i);	  Reference    aliasRef    =    alias.references.get(i);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
398	[BUG]  [BUGGY]  Reference  aliasRef  =  aliasVars.references.get(i);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  aliasRef  =  aliasVars.references.get(i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  aliasRef  =  aliasVars.references.get(i);	  Reference    aliasRef    =    alias.references.get(i);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
399	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=i;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ';'  expected	100	None	replace
400	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i  *  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.get(i  *  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.get(i  *  1);	  Node    aliasRefs    =    alias.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	72	None	replace
401	[BUG]  [BUGGY]  if(!inlineAliases)  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [CE]  ';'  expected  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!inlineAliases)  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!inlineAliases)  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    References    aliasRefs.references.clear();    	non-compiled	[CE]  ';'  expected	93	None	replace
402	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [CE]  ';'  expected  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined())  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    References    aliasRefs.references.clear();    	non-compiled	[CE]  ';'  expected	93	None	replace
403	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  ==  alert(args)  }	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    ==    alert(args)    }    	non-compiled	[CE]  ';'  expected	139	None	replace
404	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i).references.get(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i).references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i).references.get(i);	  Node    aliasRefs    =    newNodes.get(i).references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	117	None	replace
405	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i).newNodes;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i).newNodes;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i).newNodes;	  Node    aliasRefs    =    newNodes.get(i).references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	117	None	replace
406	[BUG]  [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	50	None	replace
407	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  0);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  0);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i,  0);	  Node    aliasRefs    =    newNodes.get(i,    size);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	118	None	replace
408	[BUG]  [BUGGY]  Reference  aliasRef  =  aliasrefs.references.get(i  +  1);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  aliasRef  =  aliasrefs.references.get(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  aliasRef  =  aliasrefs.references.get(i  +  1);	  Reference    aliasRef    =    aliasRef.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
409	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=0;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ';'  expected	97	None	replace
410	[BUG]  [BUGGY]  AliasRefs.references.put(i,  newNodes);  [CE]  package  AliasRefs  does  not  exist  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  AliasRefs.references.put(i,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	AliasRefs.references.put(i,  newNodes);	  aliasRefs.references.put(i,    newNodes);    	non-compiled	[CE]  package  AliasRefs  does  not  exist	79	None	replace
411	[BUG]  [BUGGY]  asRefs.references.put(i,  newNodes);  [CE]  package  asRefs  does  not  exist  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  asRefs.references.put(i,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	asRefs.references.put(i,  newNodes);	  aliasRefs.references.put(i,    newNodes);    	non-compiled	[CE]  package  asRefs  does  not  exist	79	None	replace
412	[BUG]  [BUGGY]  aliasRefs.references.put(i,  newNodes;  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.put(i,  newNodes;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.put(i,  newNodes;	  aliasRefs.references.put(i,    newNodes);    	non-compiled	[CE]  ')'  expected	79	None	replace
413	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).node;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).node;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i).node;	  Node    aliasRefs    =(Node)newNodes.get(i).references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	111	None	replace
414	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).var;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).var;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i).var;	  Node    aliasRefs    =(Node)newNodes.get(i).references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	111	None	replace
415	[BUG]  [BUGGY]  aliasRefs.references.clear(i  +  1);  [CE]  no  suitable  method  found  for  clear(int)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.clear(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.clear(i  +  1);	  aliasRefs.references.clear(i);    	non-compiled	[CE]  no  suitable  method  found  for  clear(int)	43	None	replace
416	[BUG]  [BUGGY]  aliasRefs.references.clear(i  +  1,  newNodes);  [CE]  no  suitable  method  found  for  clear(int,Set<Node>)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.clear(i  +  1,  newNodes);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.clear(i  +  1,  newNodes);	  aliasRefs.references.clear(i);    	non-compiled	[CE]  no  suitable  method  found  for  clear(int,Set<Node>)	43	None	replace
417	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i);  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i);	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(i);    	non-compiled	[CE]  not  a  statement	31	None	replace
418	[BUG]  [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i);  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(i);	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(i);    	non-compiled	[CE]  not  a  statement	31	None	replace
419	[BUG]  [BUGGY]  newNodes.add(i);  [CE]  no  suitable  method  found  for  add(int)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(i);	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(i);    	non-compiled	[CE]  no  suitable  method  found  for  add(int)	31	None	replace
420	[BUG]  [BUGGY]  Reference  aliasRef  =  alias.references.get(i  +  1,  newNodes);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  aliasRef  =  alias.references.get(i  +  1,  newNodes);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  aliasRef  =  alias.references.get(i  +  1,  newNodes);	  Reference    aliasRef    =    alias.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
421	[BUG]  [BUGGY]  Reference  aliasRef  =  aliases.references.get(i  +  1);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  aliasRef  =  aliases.references.get(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  aliasRef  =  aliases.references.get(i  +  1);	  Reference    aliasRef    =    alias.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
422	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  namespace  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  namespace  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i,  namespace  +  1);	  Node    aliasRefs    =    newNodes.get(i,    namespace);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	27	None	replace
423	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  globalNamespace);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  globalNamespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i,  globalNamespace);	  Node    aliasRefs    =    newNodes.get(i,    namespace);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	27	None	replace
424	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  namespace.references);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  namespace.references);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i,  namespace.references);	  Node    aliasRefs    =    newNodes.get(i,    namespace);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	27	None	replace
425	[BUG]  [BUGGY]  Preconditions.checkState(aliasRefs.references.get(i  +  1);  [CE]  ')'  expected  [FE]            java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Preconditions.checkState(aliasRefs.references.get(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Preconditions.checkState(aliasRefs.references.get(i  +  1);	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    Preconditions.checkState(aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  ')'  expected	109	None	replace
426	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce())    {    	non-compiled	[CE]  not  a  statement	148	None	replace
427	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce());	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInitializingOnce());    	non-compiled	[CE]  not  a  statement	147	None	replace
428	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.clear();  aliasRefs.references.clear();  }  [CE]  cannot  find  symbol  aliasRef  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.clear();  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined())  {  aliasRefs.references.clear();  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    aliasRefs.references.clear();    	non-compiled	[CE]  cannot  find  symbol  aliasRef	6	None	replace
429	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.clear();  [CE]  illegal  start  of  expression  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.clear();	          aliasRefs.references.clear();    aliasRefs.references.clear();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
430	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnceInLifetime());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnceInLifetime());	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	32	None	replace
431	[BUG]  [BUGGY]  aliasRefs.getWellDefined();  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.getWellDefined();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.getWellDefined();	          aliasRefs.references.get(i);    if(aliasRefs.references!=    null)    {    if(!inlineAliasIfPossible)    {    return    function()    {    var    args=arguments;    setTimeout(function()    {    alert(args)    }    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
432	[BUG]  [BUGGY]  reference  aliasRef  =  aliasRefs.references.get(i  +  1);  [CE]  cannot  find  symbol  [FE]          java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  reference  aliasRef  =  aliasRefs.references.get(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	reference  aliasRef  =  aliasRefs.references.get(i  +  1);	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
433	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  newNodes  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  newNodes  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.get(i,  newNodes  +  1);	  Node    aliasRefs    =    alias.references.get(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	73	None	replace
434	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.references();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasRefs.references();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasRefs.references();	  Node    aliasRefs    =    newNodes.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	12	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  inlineWellDefined);  [CE]  cannot  find  symbol  inlineWellDefined  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  inlineWellDefined);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  inlineWellDefined);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    size);    	non-compiled	[CE]  cannot  find  symbol  inlineWellDefined	48	None	replace
436	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i);  [CE]  no  suitable  method  found  for  add(int)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i);	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  add(int)	136	None	replace
437	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	20	None	replace
438	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i);  [CE]  no  suitable  method  found  for  add(int)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(i);	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  add(int)	138	None	replace
439	[BUG]  [BUGGY]  Node  aliasRefs  =  aliasRefs.getReferences(i  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  aliasRefs.getReferences(i  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  aliasRefs.getReferences(i  +  1);	  Node    aliasRefs    =    aliasRefs.getReferences(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	85	None	replace
440	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).cloneChildren();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).cloneChildren();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i).cloneChildren();	  Node    aliasRefs    =(Node)newNodes.get(i).cloneTree();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	145	None	replace
441	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  newNodes.isAssignedOnceInLifetime())  {	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	67	None	replace
442	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.get(i))  {  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.get(i))  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.get(i))  {	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	67	None	replace
443	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInvalidOnceInLifetime())  {	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	80	None	replace
444	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i++).references;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i++).references;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i++).references;	  Node    aliasRefs    =(Node)newNodes.get(i++);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	70	None	replace
445	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i++  +  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i++  +  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i++  +  1);	  Node    aliasRefs    =(Node)newNodes.get(i++);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	70	None	replace
446	[BUG]  [BUGGY]  Node  aliasRef  =  aliasVars.references.get(i);  [CE]  package  aliasVars  does  not  exist  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRef  =  aliasVars.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRef  =  aliasVars.references.get(i);	  Node    aliasRef    =    alias.references.get(i);    	non-compiled	[CE]  package  aliasVars  does  not  exist	16	None	replace
447	[BUG]  [BUGGY]  Node  aliasRef  =  aliasrefs.references.get(i);  [CE]  package  aliasrefs  does  not  exist  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRef  =  aliasrefs.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRef  =  aliasrefs.references.get(i);	  Node    aliasRef    =    alias.references.get(i);    	non-compiled	[CE]  package  aliasrefs  does  not  exist	16	None	replace
448	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.clear();  Node  aliasRefs.references.clear();  }  [CE]  ';'  expected  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.clear();  Node  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.clear();  Node  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    Node    aliasRefs.references.clear();    	non-compiled	[CE]  ';'  expected	7	None	replace
449	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.clear();  Node  aliasRefs.references.clear();  }  [CE]  ';'  expected  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.clear();  Node  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined())  {  aliasRefs.references.clear();  Node  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    Node    aliasRefs.references.clear();    	non-compiled	[CE]  ';'  expected	7	None	replace
450	[BUG]  [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs  =  newNodes.get(i);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs  =  newNodes.get(i);  setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    aliasRefs  =  newNodes.get(i);  setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	140	None	add
451	[BUG]  [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs  =  newNodes.get(i);  [CE]  cannot  find  symbol  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs  =  newNodes.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    aliasRefs  =  newNodes.get(i);	  	non-compiled	[CE]  cannot  find  symbol	140	None	add
452	[BUG]  [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  Node  aliasRefs  =  newNodes.get(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  Node  aliasRefs  =  newNodes.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    Node  aliasRefs  =  newNodes.get(i);	  	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	140	None	add
453	[BUG]  [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        aliasRefs.references.get(i);    AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ';'  expected	36	None	add
454	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  aliasRefs.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	add	                aliasRefs.references.get(i);        aliasRefs.references.get(i);    aliasRefs.references.get(i);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	36	1	add
455	[BUG]  [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  aliasRefs.references.get(i);  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  aliasRefs.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        aliasRefs.references.get(i);    aliasRefs.references.get(i);	  	compilable	  [FE]  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  	36	1	add
456	[BUG]  [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        aliasRefs.references.get(i);    AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  not  a  statement	36	None	add
457	[BUG]  [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=0;setTimeout(function()  {  alert(args)  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=0;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        aliasRefs.references.get(i);    AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=0;setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ';'  expected	36	None	add
458	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnceInLifetime())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnceInLifetime())  {	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
459	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  *  1,  newNodes);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  *  1,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(i  *  1,  newNodes);	  Node    aliasRefs    =    Collections.newHashSet(i    +    1,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	78	None	replace
460	[BUG]  [BUGGY]  nodes.clear();  Node  aliasRefs  =  newNodes.get(i);  [CE]  cannot  find  symbol  nodes  [FE]              java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  nodes.clear();  Node  aliasRefs  =  newNodes.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	nodes.clear();  Node  aliasRefs  =  newNodes.get(i);	          aliasRefs.references.clear();    Node    aliasRefs    =    newNodes.get(i);    	non-compiled	[CE]  cannot  find  symbol  nodes	9	None	replace
461	[BUG]  [BUGGY]  Reference  aliasRef  =  aliasRefs.references.get(i  +  1);  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());  [CE]  cannot  find  symbol  [FE]          java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  aliasRef  =  aliasRefs.references.get(i  +  1);  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  aliasRef  =  aliasRefs.references.get(i  +  1);  Preconditions.checkState(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration());	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    Preconditions.checkState(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
462	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i,  0);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i,  0);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i,  0);	  Node    aliasRefs    =(Node)newNodes.get(i,    size);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	71	None	replace
463	[BUG]  [BUGGY]  Reference  collectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i-1  +  1);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  collectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i-1  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  collectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i-1  +  1);	  Reference    collectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i-1);    	non-compiled	[CE]  ';'  expected	101	None	replace
464	[BUG]  [BUGGY]  aliasRefs.inlineWellDefined(i,  newNodes);  [CE]  cannot  find  symbol  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.inlineWellDefined(i,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.inlineWellDefined(i,  newNodes);	  aliasRefs.inlineWellDefined();    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
465	[BUG]  [BUGGY]  Reference  aliasRef  =  aliasrefs.references.get(i);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  aliasRef  =  aliasrefs.references.get(i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  aliasRef  =  aliasrefs.references.get(i);	  Reference    aliasRef    =    aliasRef.references.get(i);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
466	[BUG]  [BUGGY]  aliasRefs.references.get(i).addChildToFront(newNodes,  aliasRefs);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.get(i).addChildToFront(newNodes,  aliasRefs);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.get(i).addChildToFront(newNodes,  aliasRefs);	  aliasRefs.references.get(i).addChildToFront(newNodes);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
467	[BUG]  [BUGGY]  aliasRefs  =  alias.references.clear();  [CE]  cannot  find  symbol  references  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs  =  alias.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs  =  alias.references.clear();	          aliasRefs.references.clear();    Node    aliasRefs    =    alias.references.clear();    	non-compiled	[CE]  cannot  find  symbol  references	8	None	replace
468	[BUG]  [BUGGY]  Preconditions.checkState(i!=  size);  Node  aliasRefs  =  alias.references.clear();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Preconditions.checkState(i!=  size);  Node  aliasRefs  =  alias.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Preconditions.checkState(i!=  size);  Node  aliasRefs  =  alias.references.clear();	          aliasRefs.references.clear();    Node    aliasRefs    =    alias.references.clear();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	8	None	replace
469	[BUG]  [BUGGY]  aliasRefs.references.add(i  +  1,  newNodes);  [CE]  no  suitable  method  found  for  add(int,Set<Node>)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.add(i  +  1,  newNodes);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.add(i  +  1,  newNodes);	  aliasRefs.references.add(i);    	non-compiled	[CE]  no  suitable  method  found  for  add(int,Set<Node>)	42	None	replace
470	[BUG]  [BUGGY]  aliasRefs.references.add(i  +  1);  [CE]  no  suitable  method  found  for  add(int)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.add(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.add(i  +  1);	  aliasRefs.references.add(i);    	non-compiled	[CE]  no  suitable  method  found  for  add(int)	42	None	replace
471	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }  [CE]  cannot  find  symbol  aliasRef  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }	          aliasRefs.references.get(i);    aliasRefs.references.get(i);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	37	None	replace
472	[BUG]  [BUGGY]  AssertionFailedError:  Expected:  function  f()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [CE]  not  a  statement  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  AssertionFailedError:  Expected:  function  f()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	AssertionFailedError:  Expected:  function  f()  {  var  args=arguments;setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    	non-compiled	[CE]  not  a  statement	141	None	replace
473	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(args	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=0;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ';'  expected	97	None	replace
474	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=0;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ';'  expected	97	None	replace
475	[BUG]  [BUGGY]  aliasRefs.references.add(i,  new  Node(Token.NAMESPACE));  [CE]  cannot  find  symbol  NAMESPACE  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.add(i,  new  Node(Token.NAMESPACE));  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.add(i,  new  Node(Token.NAMESPACE));	  aliasRefs.references.add(i);    	non-compiled	[CE]  cannot  find  symbol  NAMESPACE	42	None	replace
476	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  collection);  [CE]  cannot  find  symbol  collection  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  collection);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector,  collection);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    collector);    	non-compiled	[CE]  cannot  find  symbol  collection	44	None	replace
477	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined()  &&  aliasRefs.references.get(i);  }  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined()  &&  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined()  &&  aliasRefs.references.get(i);  }	  if(!aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    	non-compiled	[CE]  ')'  expected	121	None	replace
478	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined()  &&  aliasRefs.references.get(i);  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined()  &&  aliasRefs.references.get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined()  &&  aliasRefs.references.get(i);	  if(!aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    	non-compiled	[CE]  ')'  expected	121	None	replace
479	[BUG]  [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.put(i,  newNodes);  }  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!aliasRefs.isWellDefined())  {  aliasRefs.references.put(i,  newNodes);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!aliasRefs.isWellDefined())  {  aliasRefs.references.put(i,  newNodes);  }	  if(!aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
480	[BUG]  [BUGGY]  Reference  collectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i  +  2);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  collectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i  +  2);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  collectingCallback.Reference  aliasRef  =  aliasRefs.references.get(i  +  2);	  Reference    collectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  ';'  expected	56	None	replace
481	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce();	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	88	None	replace
482	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  newNodes.size);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.get(i,  newNodes.size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.get(i,  newNodes.size);	  Node    aliasRefs    =    alias.references.get(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	73	None	replace
483	[BUG]  [BUGGY]  if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  if(isWellDefined())  {  aliasRefs.references.get(i);  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  if(isWellDefined())  {  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get(i);  if(isWellDefined())  {  aliasRefs.references.get(i);  }	          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
484	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssignedDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssignedDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssignedDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
485	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.remove(i);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.remove(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.remove(i);	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	34	None	replace
486	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.references.get(i++);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.node.references.get(i++);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.node.references.get(i++);	  Node    aliasRefs    =    alias.references.get(i++);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	103	None	replace
487	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(size  -  2);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(size  -  2);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(size  -  2);	  Node    aliasRefs    =    Collections.newHashSetWithExpectedSize(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
488	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(size);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSetWithExpectedSize(size);	  Node    aliasRefs    =    Collections.newHashSetWithExpectedSize(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	77	None	replace
489	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.getReferences().get(i);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.node.getReferences().get(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.node.getReferences().get(i);	  Node    aliasRefs    =    alias.node.references.get(i);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	129	None	replace
490	[BUG]  [BUGGY]  if(!inlineAliasIfPossible)  {  aliasRefs.references.get(i);  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!inlineAliasIfPossible)  {  aliasRefs.references.get(i);  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!inlineAliasIfPossible)  {  aliasRefs.references.get(i);  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()	          aliasRefs.references.get(i);    if(aliasRefs.references!=    null)    {    if(!inlineAliasIfPossible)    {    return    function()    {    var    args=arguments;    }    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	39	None	replace
491	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references	          aliasRefs.references.get(i);    if(aliasRefs.references!=    null)    {    if(!inlineAliasIfPossible)    {    return    function()    {    var    args=arguments;    }    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ';'  expected	39	None	replace
492	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.get	          aliasRefs.references.get(i);    if(aliasRefs.references!=    null)    {    if(!inlineAliasIfPossible)    {    return    function()    {    var    args=arguments;    }    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ';'  expected	39	None	replace
493	[BUG]  [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).clonePosition();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =(Node)newNodes.get(i).clonePosition();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =(Node)newNodes.get(i).clonePosition();	  Node    aliasRefs    =(Node)newNodes.get(i).cloneTree();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	145	None	replace
494	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {  return  newNodes;  }  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isInitializingOnce())  {  return  newNodes;  }	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    }    	non-compiled	[CE]  not  a  statement	18	None	replace
495	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this,  collection);  [CE]  cannot  find  symbol  collection  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this,  collection);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this,  collection);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    this);    	non-compiled	[CE]  cannot  find  symbol  collection	119	None	replace
496	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(size,  newNodes);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(size,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(size,  newNodes);	  Node    aliasRefs    =    Collections.newHashSet(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	76	None	replace
497	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssignedDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssignedDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssignedDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	49	None	replace
498	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssignedDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssignedDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssignedDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
499	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
500	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssignedDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssignedDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssignedDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  not  a  statement	50	None	replace
501	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  ')'  expected	50	None	replace
502	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [CE]  cannot  find  symbol  aliasRef  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime();    	non-compiled	[CE]  cannot  find  symbol  aliasRef	50	None	replace
503	[BUG]  [BUGGY]  Reference  aliasRef  =  alias.references.get(i  +  11);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  aliasRef  =  alias.references.get(i  +  11);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  aliasRef  =  alias.references.get(i  +  11);	  Reference    aliasRef    =    alias.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
504	[BUG]  [BUGGY]  aliasRefs  =  Collections.newHashSet(i);  [CE]  cannot  find  symbol  Collections  [FE]                java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs  =  Collections.newHashSet(i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs  =  Collections.newHashSet(i);	          aliasRefs.references.clear();    Node    aliasRefs    =    Collections.newHashSet(i);    	non-compiled	[CE]  cannot  find  symbol  Collections	10	None	replace
505	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	113	None	replace
506	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {  newNodes.add(newNodes);  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {  newNodes.add(newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {  newNodes.add(newNodes);	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	113	None	replace
507	[BUG]  [BUGGY]  Preconditions.checkState(i  ==  size);  Node  aliasRefs  =  alias.references.clear();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Preconditions.checkState(i  ==  size);  Node  aliasRefs  =  alias.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Preconditions.checkState(i  ==  size);  Node  aliasRefs  =  alias.references.clear();	          aliasRefs.references.clear();    Node    aliasRefs    =    alias.references.clear();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	8	None	replace
508	[BUG]  [BUGGY]  aliasRef  =  aliasRefs.references.get(i  +  2);  [CE]  cannot  find  symbol  aliasRef  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRef  =  aliasRefs.references.get(i  +  2);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRef  =  aliasRefs.references.get(i  +  2);	  aliasRef    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	4	None	replace
509	[BUG]  [BUGGY]  aliasRef  =  aliasRefs.references.get(i  *  1);  [CE]  cannot  find  symbol  aliasRef  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRef  =  aliasRefs.references.get(i  *  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRef  =  aliasRefs.references.get(i  *  1);	  aliasRef    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	4	None	replace
510	[BUG]  [BUGGY]  Node  aliasRef  =  aliasRefs.get(i);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRef  =  aliasRefs.get(i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRef  =  aliasRefs.get(i);	  Node    aliasRef    =    aliasRefs.references.get(i);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
511	[BUG]  [BUGGY]  aliasRefs.references.clear();  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,ReferenceCollectingCallback)  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.clear();  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.clear();  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  collector);	          aliasRefs.references.clear();    NodeTraversal.traverse(compiler,    aliasRefs,    newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,ReferenceCollectingCallback)	130	None	replace
512	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes,  i);  [CE]  no  suitable  method  found  for  add(Set<Node>,int)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes,  i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes,  i);	  if(aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  add(Set<Node>,int)	136	None	replace
513	[BUG]  [BUGGY]  Reference  aliasref  =  aliasRefs.references.get(i  +  1);  [CE]  cannot  find  symbol  [FE]                  java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  aliasref  =  aliasRefs.references.get(i  +  1);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  aliasref  =  aliasRefs.references.get(i  +  1);	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    ReferenceCollectingCallback.Reference    aliasref    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
514	[BUG]  [BUGGY]  Ref  aliasRefs  =  alias.references.get(i  *  1);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Ref  aliasRefs  =  alias.references.get(i  *  1);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Ref  aliasRefs  =  alias.references.get(i  *  1);	  Ref    aliasRefs    =    alias.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	135	None	replace
515	[BUG]  [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }	  aliasRefs.setWellDefined(true);    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	83	None	replace
516	[BUG]  [BUGGY]  if(newNodes!=  null)  {  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(newNodes!=  null)  {  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(newNodes!=  null)  {  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }	  aliasRefs.setWellDefined(true);    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	83	None	replace
517	[BUG]  [BUGGY]  aliasRefs.references.put(i,  new  Node(newNodes,  size));  [CE]  no  suitable  constructor  found  for  Node(Set<Node>,int)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.references.put(i,  new  Node(newNodes,  size));  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.references.put(i,  new  Node(newNodes,  size));	  aliasRefs.references.put(i,    newNodes);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(Set<Node>,int)	79	None	replace
518	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    aliasRefs.references.get(i);    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	41	None	replace
519	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args	          aliasRefs.references.get(i);    aliasRefs.references.get(i);    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	41	None	replace
520	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    aliasRefs.references.get(i);    setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	41	None	replace
521	[BUG]  [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	140	None	add
522	[BUG]  [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.clear();  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.get(i);    if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  }  aliasRefs.references.clear();  setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.get(i);        if(aliasRefs.isWellDefined())    {    aliasRefs.references.get(i);    }    aliasRefs.references.clear();  setTimeout(function()  {  alert(args)  }	  	non-compiled	[CE]  ')'  expected	140	None	add
523	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  aliasRefs);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  aliasRefs);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i,  aliasRefs);	  Node    aliasRefs    =    aliasRefs.references.get(i,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	112	None	replace
524	[BUG]  [BUGGY]  Reference  collectingCallback.Reference  aliasRef  =  newNodes.get(i).references;  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  collectingCallback.Reference  aliasRef  =  newNodes.get(i).references;  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  collectingCallback.Reference  aliasRef  =  newNodes.get(i).references;	  Reference    collectingCallback.Reference    aliasRef    =    newNodes.get(i);    	non-compiled	[CE]  ';'  expected	58	None	replace
525	[BUG]  [BUGGY]  Reference  collectingCallback.Reference  aliasRef  =  newNodes.get(i  +  2);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  collectingCallback.Reference  aliasRef  =  newNodes.get(i  +  2);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  collectingCallback.Reference  aliasRef  =  newNodes.get(i  +  2);	  Reference    collectingCallback.Reference    aliasRef    =    newNodes.get(i);    	non-compiled	[CE]  ';'  expected	58	None	replace
526	[BUG]  [BUGGY]  if(!inlineAliases)  {  aliasRefs.references.clear();  Node  aliasRefs.references.clear();  }  [CE]  ';'  expected  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!inlineAliases)  {  aliasRefs.references.clear();  Node  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!inlineAliases)  {  aliasRefs.references.clear();  Node  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    Node    aliasRefs.references.clear();    	non-compiled	[CE]  ';'  expected	7	None	replace
527	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.references.get(i)!=  null)  {  aliasRefs.references.clear();  Node  aliasRefs.references.clear();  }  [CE]  ';'  expected  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.references.get(i)!=  null)  {  aliasRefs.references.clear();  Node  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.references.get(i)!=  null)  {  aliasRefs.references.clear();  Node  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    Node    aliasRefs.references.clear();    	non-compiled	[CE]  ';'  expected	7	None	replace
528	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }  [CE]  cannot  find  symbol  aliasRef  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }	          aliasRefs.references.get(i);    aliasRefs.references.get(i);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	37	None	replace
529	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.references.get(i)!=  null)  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }  [CE]  cannot  find  symbol  aliasRef  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.references.get(i)!=  null)  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.references.get(i)!=  null)  {  aliasRefs.references.get(i);  aliasRefs.references.get(i);  }	          aliasRefs.references.get(i);    aliasRefs.references.get(i);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	37	None	replace
530	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(size  +  1,  newNodes);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(size  +  1,  newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(size  +  1,  newNodes);	  Node    aliasRefs    =    Collections.newHashSet(i    +    1,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	78	None	replace
531	[BUG]  [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  +  1,  newNodes,  names);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  Collections.newHashSet(i  +  1,  newNodes,  names);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  Collections.newHashSet(i  +  1,  newNodes,  names);	  Node    aliasRefs    =    Collections.newHashSet(i    +    1,    newNodes);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	78	None	replace
532	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.get(i  +  11);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.get(i  +  11);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.get(i  +  11);	  Node    aliasRefs    =    alias.references.get(i    +    1);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	72	None	replace
533	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this.namespace);  [CE]  cannot  find  symbol  namespace  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this.namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this.namespace);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    size);    	non-compiled	[CE]  cannot  find  symbol  namespace	48	None	replace
534	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  var,  size);  [CE]  cannot  find  symbol  var  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  var,  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  var,  size);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    size);    	non-compiled	[CE]  cannot  find  symbol  var	48	None	replace
535	[BUG]  [BUGGY]  setTimeout(function()  {  alert(args)  }  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  setTimeout(function()  {  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	setTimeout(function()  {  alert(args)  }	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function    f()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ')'  expected	98	None	replace
536	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(arg  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(arg  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function  f()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(arg	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function    f()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  not  a  statement	98	None	replace
537	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [CE]  no  suitable  method  found  for  add(Set<Node>)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  add(Set<Node>)	29	None	replace
538	[BUG]  [BUGGY]  if(inlineAliases)  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [CE]  ';'  expected  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(inlineAliases)  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(inlineAliases)  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    References    aliasRefs.references.clear();    	non-compiled	[CE]  ';'  expected	93	None	replace
539	[BUG]  [BUGGY]  if(newNodes.contains(i))  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [CE]  ';'  expected  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(newNodes.contains(i))  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(newNodes.contains(i))  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    References    aliasRefs.references.clear();    	non-compiled	[CE]  ';'  expected	93	None	replace
540	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.references.size()  ==  size)  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [CE]  ';'  expected  [FE]              java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.references.size()  ==  size)  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.references.size()  ==  size)  {  aliasRefs.references.clear();  References  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    References    aliasRefs.references.clear();    	non-compiled	[CE]  ';'  expected	93	None	replace
541	[BUG]  [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }	  aliasRefs.setWellDefined(true);    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	114	None	replace
542	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined())  {  aliasRefs.setWellDefined(true);  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes	  aliasRefs.setWellDefined(true);    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	114	None	replace
543	[BUG]  [BUGGY]  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  newNodes.clear();  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	add	                aliasRefs.references.clear();        aliasRefs.references.clear();    newNodes.clear();  aliasRefs.references.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	5	10	add
544	[BUG]  [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  newNodes.clear();  aliasRefs.references.clear();  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  newNodes.clear();  aliasRefs.references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.clear();        aliasRefs.references.clear();    newNodes.clear();  aliasRefs.references.clear();	  	compilable	  [FE]  java.lang.IndexOutOfBoundsException:  Index:  1  	5	10	add
545	[BUG]  [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  Node  aliasRefs  =  alias.node.cloneTree();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]      java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  Node  aliasRefs  =  alias.node.cloneTree();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.clear();        aliasRefs.references.clear();    Node  aliasRefs  =  alias.node.cloneTree();	  	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	5	None	add
546	[BUG]  [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  aliasRefs.references.clear();  aliasRefs!references.clear();  [CE]  not  a  statement  [FE]        java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]          aliasRefs.references.clear();    aliasRefs.references.clear();  aliasRefs.references.clear();  aliasRefs!references.clear();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	                aliasRefs.references.clear();        aliasRefs.references.clear();    aliasRefs.references.clear();  aliasRefs!references.clear();	  	non-compiled	[CE]  not  a  statement	5	None	add
547	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.getFirstReferenceIsAssigningDeclaration();  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.getFirstReferenceIsAssigningDeclaration();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.getFirstReferenceIsAssigningDeclaration();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  not  a  statement	124	None	replace
548	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.isAssignedOnceInLifetime();  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.isAssignedOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.isAssignedOnceInLifetime();	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration();    	non-compiled	[CE]  not  a  statement	124	None	replace
549	[BUG]  [BUGGY]  Preconditions.checkState(aliasRefs.references.get(i));  [CE]  no  suitable  method  found  for  checkState(Reference)  [FE]            java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Preconditions.checkState(aliasRefs.references.get(i));  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Preconditions.checkState(aliasRefs.references.get(i));	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    Preconditions.checkState(aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  checkState(Reference)	109	None	replace
550	[BUG]  [BUGGY]  Preconditions.checkState(aliasRefs.references.get(i)  ==  null);  [CE]  cannot  find  symbol  aliasRef  [FE]              java.lang.IndexOutOfBoundsException:  Index:  2      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Preconditions.checkState(aliasRefs.references.get(i)  ==  null);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Preconditions.checkState(aliasRefs.references.get(i)  ==  null);	  ReferenceCollectingCallback.Reference    aliasRef    =    aliasRefs.references.get(i    +    1);    Preconditions.checkState(aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  cannot  find  symbol  aliasRef	109	None	replace
551	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isStatement())  {  [CE]  not  a  statement  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isStatement())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isStatement())  {	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	80	None	replace
552	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.node;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.node;	  Node    aliasRefs    =    alias.references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	142	None	replace
553	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.references.iterator().next();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.references.iterator().next();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.references.iterator().next();	  Node    aliasRefs    =    alias.references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	142	None	replace
554	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.references;  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.node.references;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.node.references;	  Node    aliasRefs    =    alias.references;    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	142	None	replace
555	[BUG]  [BUGGY]  if(aliasRefs.isAssignedOnce())  {  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isAssignedOnce())  {  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isAssignedOnce())  {  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes	  aliasRefs.isWellDefined();    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	115	None	replace
556	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(newNodes);  }	  aliasRefs.isWellDefined();    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	115	None	replace
557	[BUG]  [BUGGY]  if(aliasRefs.isAssignedOnce())  {  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(new  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isAssignedOnce())  {  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(new  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isAssignedOnce())  {  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add(new	  aliasRefs.isWellDefined();    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	115	None	replace
558	[BUG]  [BUGGY]  if(aliasRefs.isAssignedOnce())  {  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add  [CE]  not  a  statement  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isAssignedOnce())  {  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isAssignedOnce())  {  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  newNodes.add	  aliasRefs.isWellDefined();    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	115	None	replace
559	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(arg  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(arg  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  return  function()  {  var  args=arguments;setTimeout(function()  {  alert(arg	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    return    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ';'  expected	96	None	replace
560	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce());  [CE]  not  a  statement  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isLocalOnce());	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	81	None	replace
561	[BUG]  [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  [CE]  cannot  find  symbol  aliasRef  [FE]          java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.firstReferenceIsAssigningDeclaration();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.firstReferenceIsAssigningDeclaration();	  aliasRefs.isWellDefined();    	non-compiled	[CE]  cannot  find  symbol  aliasRef	128	None	replace
562	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes,  i);  [CE]  no  suitable  method  found  for  add(Set<Node>,int)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes,  i);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes,  i);	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())newNodes.add(newNodes);    	non-compiled	[CE]  no  suitable  method  found  for  add(Set<Node>,int)	138	None	replace
563	[BUG]  [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  namespace.namespace);  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  newNodes.get(i,  namespace.namespace);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  newNodes.get(i,  namespace.namespace);	  Node    aliasRefs    =    newNodes.get(i,    namespace);    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	27	None	replace
564	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssignedDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [CE]  not  a  statement  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssignedDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssignedDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    	non-compiled	[CE]  not  a  statement	33	None	replace
565	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.getReferenceIsWellDefined();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.node.getReferenceIsWellDefined();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.node.getReferenceIsWellDefined();	  Node    aliasRefs    =    alias.node.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	13	None	replace
566	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.node.getAssignedOnceInLifetime();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.node.getAssignedOnceInLifetime();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.node.getAssignedOnceInLifetime();	  Node    aliasRefs    =    alias.node.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	13	None	replace
567	[BUG]  [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.references);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.references);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.references);	  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
568	[BUG]  [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.references.get(i));  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.references.get(i));  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.references.get(i));	  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
569	[BUG]  [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.isAssignedOnceInLifetime());  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.isAssignedOnceInLifetime());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(aliasRefs.firstReferenceIsWellDefined(),  aliasRefs.isAssignedOnceInLifetime());	  newNodes.add(aliasRefs.firstReferenceIsAssigningDeclaration());    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
570	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    {    alert(args)    }    	non-compiled	[CE]  ';'  expected	99	None	replace
571	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssignedDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssignedDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssignedDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	19	None	replace
572	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  i,  newNodes,  aliasRefs);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,int,Set<Node>,ReferenceCollection)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  i,  newNodes,  aliasRefs);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  i,  newNodes,  aliasRefs);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    i);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,int,Set<Node>,ReferenceCollection)	104	None	replace
573	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  0,  size);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,int,int)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  0,  size);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  0,  size);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    i);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,int,int)	104	None	replace
574	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {  return  newNodes;  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {  return  newNodes;  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isInitializingOnce())  {  return  newNodes;	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	82	None	replace
575	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  aliasRefs.references.	          aliasRefs.references.get(i);    if(aliasRefs.references!=    null)    {    if(!inlineAliasIfPossible)    {    return    function()    {    var    args=arguments;    setTimeout(function()    {    alert(args)    }    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
576	[BUG]  [BUGGY]  If(aliasRefs.isWellDefined()  ||  aliasRefs.referenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  If(aliasRefs.isWellDefined()  ||  aliasRefs.referenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	If(aliasRefs.isWellDefined()  ||  aliasRefs.referenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  }	  if(aliasRefs.isWellDefined()    ||    aliasRefs.referenceIsAssigningDeclaration())    {    aliasRefs.references.get(i);    }    	non-compiled	[CE]  ';'  expected	122	None	replace
577	[BUG]  [BUGGY]  aliasRefs  =  aliasRefs.references.get(i  +  11);  [CE]  incompatible  types  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs  =  aliasRefs.references.get(i  +  11);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs  =  aliasRefs.references.get(i  +  11);	  aliasRefs    =    aliasRefs.references.get(i    +    1);    	non-compiled	[CE]  incompatible  types	3	None	replace
578	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce());  [CE]  not  a  statement  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce());  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isLocalOnce());	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isInvalidOnceInLifetime());    	non-compiled	[CE]  not  a  statement	35	None	replace
579	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNodes);  }  [CE]  not  a  statement  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNodes);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNodes);  }	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    ||    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	137	None	replace
580	[BUG]  [BUGGY]  newNodes.add(newNodes);  [CE]  no  suitable  method  found  for  add(Set<Node>)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  newNodes.add(newNodes);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	newNodes.add(newNodes);	  if(aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    newNodes.add(newNodes);    }    	non-compiled	[CE]  no  suitable  method  found  for  add(Set<Node>)	87	None	replace
581	[BUG]  [BUGGY]  if(!inlineAliases)  {  aliasRefs.references.clear();  aliasRefs.references.clear();  }  [CE]  cannot  find  symbol  aliasRef  [FE]    java.lang.IndexOutOfBoundsException:  Index:  1    [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(!inlineAliases)  {  aliasRefs.references.clear();  aliasRefs.references.clear();  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(!inlineAliases)  {  aliasRefs.references.clear();  aliasRefs.references.clear();  }	          aliasRefs.references.clear();    aliasRefs.references.clear();    	non-compiled	[CE]  cannot  find  symbol  aliasRef	6	None	replace
582	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  scope,  collector);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,Scope,ReferenceCollectingCallback)  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  scope,  collector);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  scope,  collector);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    scope);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,Scope,ReferenceCollectingCallback)	47	None	replace
583	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this,  scope);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,CollapseProperties,Scope)  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this,  scope);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs,  newNodes,  this,  scope);	  NodeTraversal.traverse(compiler,    aliasRefs,    newNodes,    scope);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,ReferenceCollection,Set<Node>,CollapseProperties,Scope)	47	None	replace
584	[BUG]  [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [CE]  not  a  statement  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined();  aliasRefs.firstReferenceIsAssigningDeclaration()  ||  aliasRefs.isAssignedOnceInLifetime())  {  return  newNodes;  }	  aliasRefs.isWellDefined();    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	84	None	replace
585	[BUG]  [BUGGY]  setTimeout(function()  ==  alert(args)  }  [CE]  ')'  expected  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  setTimeout(function()  ==  alert(args)  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	setTimeout(function()  ==  alert(args)  }	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    ==    alert(args)    }    	non-compiled	[CE]  ')'  expected	139	None	replace
586	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration())  {  aliasRefs.references.get(i);  AssertionFailedError:  Expected:  function()  {  var  args=arguments;setTimeout(function()  {  alert(	          aliasRefs.references.get(i);    AssertionFailedError:    Expected:    function()    {    var    args=arguments;setTimeout(function()    ==    alert(args)    }    	non-compiled	[CE]  ';'  expected	139	None	replace
587	[BUG]  [BUGGY]  Node  aliasRefs  =  alias.getReferenceIsWellDefined();  [CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Node  aliasRefs  =  alias.getReferenceIsWellDefined();  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Node  aliasRefs  =  alias.getReferenceIsWellDefined();	  Node    aliasRefs    =    alias.getReferences();    	non-compiled	[CE]  variable  aliasRefs  is  already  defined  in  method  inlineAliasIfPossible(Ref,GlobalNamespace)	11	None	replace
588	[BUG]  [BUGGY]  Reference  aliasRef  =  alias,  alias.references.get(i);  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  Reference  aliasRef  =  alias,  alias.references.get(i);  [BUGGY]      aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	Reference  aliasRef  =  alias,  alias.references.get(i);	  Reference    aliasRef    =    alias.references.get(i);    	non-compiled	[CE]  ';'  expected	53	None	replace
589	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isInitializingOnce())  {  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isInitializingOnce())  {  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isInitializingOnce())  {	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime())    {    	non-compiled	[CE]  not  a  statement	67	None	replace
590	[BUG]  [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;  }  [CE]  not  a  statement  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	aliasRefs.isWellDefined()  ||  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  newNodes.isAssignedOnceInLifetime())  {  return  newNodes;  }	  aliasRefs.isWellDefined()    &&    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    newNodes.isAssignedOnceInLifetime())    {    return    newNodes;    	non-compiled	[CE]  not  a  statement	20	None	replace
591	[BUG]  [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNodes);  }  [CE]  not  a  statement  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNodes);  }  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	if(aliasRefs.isWellDefined())  {  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime());  newNodes.add(newNodes);  }	  aliasRefs.isWellDefined()    ||    aliasRefs.firstReferenceIsAssigningDeclaration()    &&    aliasRefs.isAssignedOnceInLifetime());    newNodes.add(newNodes);    	non-compiled	[CE]  not  a  statement	74	None	replace
592	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs.references,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,List<Reference>,CollapseProperties)  [FE]            java.lang.IndexOutOfBoundsException:  Index:  1      [CONTEXT]      if  (aliasRefs.isWellDefined()  &&  aliasRefs.firstReferenceIsAssigningDeclaration()  &&  aliasRefs.isAssignedOnceInLifetime())  {  int  size  =  aliasRefs.references.size();  Set<Node>  newNodes  =  Sets.newHashSetWithExpectedSize(size  -  1);  for  (int  i  =  1;  i  <  size;  i++)  {      [BUGGY]  NodeTraversal.traverse(compiler,  aliasRefs.references,  this);  [BUGGY]      ReferenceCollectingCallback.Reference  aliasRef  =    aliasRefs.references.get(i);  aliasRefs.references.get(i);  Node  newNode  =  alias.node.cloneTree();  aliasRef.getParent().replaceChild(aliasRef.getNode(),  newNode);  newNodes.add(newNode);  }  aliasParent.replaceChild(alias.node,  IR.nullNode());  compiler.reportCodeChange();  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliasIfPossible  [RETURN_TYPE]  boolean  Ref  alias  GlobalNamespace  namespace  [VARIABLES]  ReferenceCollectingCallback  collector  Set  newNodes  Var  aliasVar  Reference  aliasRef  Node  aliasParent  newNode  GlobalNamespace  namespace  int  i  size  AbstractCompiler  compiler  Ref  alias  boolean  collapsePropertiesOnExternTypes  inlineAliases  Scope  scope  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  ReferenceCollection  aliasRefs  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.31622776601683794	223	224	1	replace	NodeTraversal.traverse(compiler,  aliasRefs.references,  this);	          aliasRefs.references.clear();    NodeTraversal.traverse(compiler,    aliasRefs.references);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,List<Reference>,CollapseProperties)	132	None	replace
