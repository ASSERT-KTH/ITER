bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAli  [CE]  ')'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAli  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAli	      if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  ')'  expected	17	None	replace
2	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [CE]  ')'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name	      if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  ')'  expected	17	None	replace
3	[BUG]  [BUGGY]  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	      if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
4	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAli  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAli  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAli	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	3	None	replace
6	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!in  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!in  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!in	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	3	None	replace
7	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  name.setAliasingGets(namespace);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.setAliasingGets(namespace);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.setAliasingGets(namespace);	  name.setAliasingGets(ref);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
9	[BUG]  [BUGGY]  name.setAliasingGets(ref,  namespace);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.setAliasingGets(ref,  namespace);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.setAliasingGets(ref,  namespace);	  name.setAliasingGets(ref);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
10	[BUG]  [BUGGY]  name.addAliasIfPossible(ref,  namespace);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addAliasIfPossible(ref,  namespace);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAliasIfPossible(ref,  namespace);	  name.addRef(ref);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
11	[BUG]  [BUGGY]  name.addAlias(ref);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addAlias(ref);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(ref);	  name.addRef(ref);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
12	[BUG]  [BUGGY]  name.addAliasIfPossible(ref,  namespace));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addAliasIfPossible(ref,  namespace));  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAliasIfPossible(ref,  namespace));	  name.addRef(ref);    	non-compiled	[CE]  ';'  expected	9	None	replace
13	[BUG]  [BUGGY]  name.addAlias(ref,  namespace);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addAlias(ref,  namespace);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(ref,  namespace);	  name.addRef(ref);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
14	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
15	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
16	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
17	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
18	[BUG]  [BUGGY]  ref.removeAliasIfPossible(ref,  namespace);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  ref.removeAliasIfPossible(ref,  namespace);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	ref.removeAliasIfPossible(ref,  namespace);	  name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
19	[BUG]  [BUGGY]  ref.removeAliasIfPossible(name,  namespace);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  ref.removeAliasIfPossible(name,  namespace);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	ref.removeAliasIfPossible(name,  namespace);	  name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
20	[BUG]  [BUGGY]  removeAliasIfPossible(ref,  namespace);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  removeAliasIfPossible(ref,  namespace);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	removeAliasIfPossible(ref,  namespace);	  name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
21	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
22	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
23	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  name.addRef(ref);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);    name.addRef(ref);	  	compilable	  [FE]  AssertionFailedError  	8	12	add
25	[BUG]  [BUGGY]  name.addRef(ref);  name.addRef(ref);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  name.addRef(ref);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);    name.addRef(ref);	  	compilable	  [FE]  AssertionFailedError  	8	12	add
26	[BUG]  [BUGGY]  name.addRef(ref);  Name  name.addRef(ref);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  Name  name.addRef(ref);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);    Name  name.addRef(ref);	  	non-compiled	[CE]  ';'  expected	8	None	add
27	[BUG]  [BUGGY]  name.addRef(ref);  Name.addRef(ref);  [CE]  non-static  method  addRef(Ref)  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  Name.addRef(ref);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);    Name.addRef(ref);	  	non-compiled	[CE]  non-static  method  addRef(Ref)  cannot  be  referenced  from  a  static  context	8	None	add
28	[BUG]  [BUGGY]  name.addRef(ref);  if(!name.hasRefs())  {  name.addRef(ref);  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  if(!name.hasRefs())  {  name.addRef(ref);  }  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);    if(!name.hasRefs())  {  name.addRef(ref);  }	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
29	[BUG]  [BUGGY]  name.addRef(ref);  if(!name.hasRef())  {  name.addRef(ref);  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  if(!name.hasRef())  {  name.addRef(ref);  }  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);    if(!name.hasRef())  {  name.addRef(ref);  }	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
30	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAli  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAli  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAli	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
31	[BUG]  [BUGGY]  if(name.globalSets!=  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAli  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(name.globalSets!=  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAli  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets!=  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAli	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
32	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAlia  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAlia  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAlia	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
33	[BUG]  [BUGGY]  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	      if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
34	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
35	[BUG]  [BUGGY]  ref.removeAlias(name);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  ref.removeAlias(name);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	ref.removeAlias(name);	  name.removeAlias(ref);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
36	[BUG]  [BUGGY]  name.removeAlias(namespace);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.removeAlias(namespace);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.removeAlias(namespace);	  name.removeAlias(ref);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
37	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
38	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }	      if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
39	[BUG]  [BUGGY]  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }	      if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
40	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
41	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
42	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
43	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAlias  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAlias  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAlias	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	4	None	replace
44	[BUG]  [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
45	[BUG]  [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.addRef(ref);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.addRef(ref);  }  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.addRef(ref);  }	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }	  	compilable	  [FE]  AssertionFailedError  	8	12	add
47	[BUG]  [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }	  	compilable	  [FE]  AssertionFailedError  	8	12	add
48	[BUG]  [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)	  	non-compiled	[CE]  ')'  expected	8	None	add
49	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
50	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
51	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
52	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	      if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
53	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	      if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
54	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
55	[BUG]  [BUGGY]  Name.removeAliasIfPossible(ref,  namespace);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  Name.removeAliasIfPossible(ref,  namespace);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name.removeAliasIfPossible(ref,  namespace);	  name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
56	[BUG]  [BUGGY]  Name  name.removeAliasIfPossible(ref,  namespace);  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  Name  name.removeAliasIfPossible(ref,  namespace);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name.removeAliasIfPossible(ref,  namespace);	  name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  ';'  expected	7	None	replace
57	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
58	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
59	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
60	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
61	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
62	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
63	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
64	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
65	[BUG]  [BUGGY]  name.removeAlias(ref,  namespace);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.removeAlias(ref,  namespace);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.removeAlias(ref,  namespace);	  name.removeAlias(ref);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
66	[BUG]  [BUGGY]  Name  name  =  ref.removeAlias(name);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  Name  name  =  ref.removeAlias(name);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAlias(name);	  name.removeAlias(ref);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	10	None	replace
67	[BUG]  [BUGGY]  Name  name.removeAlias(ref);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  Name  name.removeAlias(ref);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name.removeAlias(ref);	  name.removeAlias(ref);    	non-compiled	[CE]  ';'  expected	10	None	replace
68	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
69	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
70	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
71	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
72	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
73	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
74	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
75	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
76	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }	      if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
77	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
78	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
79	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
80	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
81	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
82	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||!inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||!inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||!inlineAliasIfPossible(ref,  namespace))  {	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
83	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
84	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	  [FE]  NullPointerException  	18	12	replace
85	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [FE]  NullPointerException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	  [FE]  NullPointerException  	18	12	replace
86	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
87	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  continue;  }	      if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
88	[BUG]  [BUGGY]  Name  name  =  ref.removeAliasIfPossible(ref,  namespace);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  Name  name  =  ref.removeAliasIfPossible(ref,  namespace);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAliasIfPossible(ref,  namespace);	  name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	7	None	replace
89	[BUG]  [BUGGY]  namespace.removeAliasIfPossible(ref,  namespace);  [CE]  cannot  find  symbol  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  namespace.removeAliasIfPossible(ref,  namespace);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	namespace.removeAliasIfPossible(ref,  namespace);	  name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
90	[BUG]  [BUGGY]  name.inlineAliasIfPossible(ref,  namespace));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.inlineAliasIfPossible(ref,  namespace));  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.inlineAliasIfPossible(ref,  namespace));	  name.addRef(ref);    	non-compiled	[CE]  ';'  expected	9	None	replace
91	[BUG]  [BUGGY]  name.inlineAliasIfPossible(ref,  namespace);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.inlineAliasIfPossible(ref,  namespace);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.inlineAliasIfPossible(ref,  namespace);	  name.addRef(ref);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
92	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  inlineAliasIfPossible(ref,  namespace))  {	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
93	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	      if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
94	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  return;  }  [BUGGY]    name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  return;  }	      if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
95	[BUG]  [BUGGY]  Name  name  =  ref.removeAlias(namespace);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  Name  name  =  ref.removeAlias(namespace);  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAlias(namespace);	  name.removeAlias(ref);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	10	None	replace
96	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  	compilable	  [FE]  NullPointerException  	8	12	add
97	[BUG]  [BUGGY]  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [FE]  NullPointerException  [FE]    AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  	compilable	  [FE]  NullPointerException  	8	12	add
98	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }	  	compilable	timeout	8	1	add
99	[BUG]  [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  timeout  [FE]      AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }	  	compilable	timeout	8	1	add
100	[BUG]  [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name.addRef(ref);  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {    [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name.addRef(ref);  }  [BUGGY]    }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name.addRef(ref);  }	  	non-compiled	[CE]  ';'  expected	8	None	add
