bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
2	[BUG]  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
3	[BUG]  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
4	[BUG]  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
5	[BUG]  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
6	[BUG]  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
7	[BUG]  [BUGGY]  name.removeAliasIfPossible(ref,  namespace);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]  name.removeAliasIfPossible(ref,  namespace);  [BUGGY]  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.removeAliasIfPossible(ref,  namespace);	name.removeRef(ref);  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]  name.addRef(ref);  [BUGGY]  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);	name.removeRef(ref);  	compilable	  [FE]  AssertionFailedError  	11	12	replace
9	[BUG]  [BUGGY]  name.addRef(ref);  [FE]  AssertionFailedError  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]  name.addRef(ref);  [BUGGY]  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);	name.removeRef(ref);  	compilable	  [FE]  AssertionFailedError  	11	12	replace
10	[BUG]  [BUGGY]  name.removeAlias(ref);  [CE]  cannot  find  symbol  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]  name.removeAlias(ref);  [BUGGY]  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.removeAlias(ref);	name.removeRef(ref);  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
11	[BUG]  [BUGGY]  name.setAliasingGets(ref);  [CE]  cannot  find  symbol  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]  name.setAliasingGets(ref);  [BUGGY]  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.setAliasingGets(ref);	name.removeRef(ref);  	non-compiled	[CE]  cannot  find  symbol	11	None	replace
12	[BUG]  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
13	[BUG]  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
14	[BUG]  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
15	[BUG]  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
16	[BUG]  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
17	[BUG]  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
18	[BUG]  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}  [CONTEXT]  if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]  name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	12	None	add
