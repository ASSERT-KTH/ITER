bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Name  name  =  ref.removeAlias(name,  namespace);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.removeAlias(name,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAlias(name,  namespace);	  Name    name    =    ref.removeAlias(name);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	66	None	replace
2	[BUG]  [BUGGY]  Name  name  =  ref.removeAlias(null);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.removeAlias(null);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAlias(null);	  Name    name    =    ref.removeAlias(name);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	66	None	replace
3	[BUG]  [BUGGY]  name.removeAlias(name);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.removeAlias(name);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.removeAlias(name);	  name.removeAlias(namespace);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
4	[BUG]  [BUGGY]  name.removeAlias(name,  ref);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.removeAlias(name,  ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.removeAlias(name,  ref);	  name.removeAlias(namespace);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
5	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!in  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!in  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!in	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	83	None	replace
6	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAli  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAli  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAli	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	83	None	replace
7	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
8	[BUG]  [BUGGY]  Name  name.removeAliasIfPossible(ref,  namespace));  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name.removeAliasIfPossible(ref,  namespace));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name.removeAliasIfPossible(ref,  namespace));	  Name    name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  ';'  expected	56	None	replace
9	[BUG]  [BUGGY]  Name  name.removeAlias(ref,  namespace);  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name.removeAlias(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name.removeAlias(ref,  namespace);	  Name    name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  ';'  expected	56	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    name.addRef(ref);    }    name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }	  timeout    	compilable	  [FE]  AssertionFailedError  	98	12	add
11	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    name.addRef(ref);    }    name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }	  timeout    	compilable	  [FE]  AssertionFailedError  	98	12	add
12	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.add  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.add  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.add	  timeout    	non-compiled	[CE]  ';'  expected	98	None	add
13	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name	  timeout    	non-compiled	[CE]  ';'  expected	98	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }	  timeout    	compilable	  [FE]  AssertionFailedError  	98	12	add
15	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }	  timeout    	compilable	  [FE]  AssertionFailedError  	98	12	add
16	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.	  timeout    	non-compiled	[CE]  illegal  start  of  expression	98	None	add
17	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAli  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAli  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAli	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	4	None	replace
18	[BUG]  [BUGGY]  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
19	[BUG]  [BUGGY]  Name  name  =  inlineAliasIfPossible(ref,  namespace);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  inlineAliasIfPossible(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  inlineAliasIfPossible(ref,  namespace);	  name.addRef(ref);    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	97	None	replace
20	[BUG]  [BUGGY]  Name  name  =  inlineAlias(ref,  namespace);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]      NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  inlineAlias(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  inlineAlias(ref,  namespace);	  name.addRef(ref);    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	97	None	replace
21	[BUG]  [BUGGY]  Name  name  =  inlineAliasOnExternType(ref,  namespace);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]        NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  inlineAliasOnExternType(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  inlineAliasOnExternType(ref,  namespace);	  name.addRef(ref);    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	97	None	replace
22	[BUG]  [BUGGY]  Name  name  =  inlineAliasOnExternTypes(ref,  namespace);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]          NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  inlineAliasOnExternTypes(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  inlineAliasOnExternTypes(ref,  namespace);	  name.addRef(ref);    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	97	None	replace
23	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
24	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
25	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
26	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
27	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  &&  ref.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
28	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
29	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasesIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
30	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAlia  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAlia  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAlia	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasesIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  ')'  expected	87	None	replace
31	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAli  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAli  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAli	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAli    	non-compiled	[CE]  ')'  expected	30	None	replace
32	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAli  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAli  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAli	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAli    	non-compiled	[CE]  ')'  expected	30	None	replace
33	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALI  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALI  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALI	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAli    	non-compiled	[CE]  ')'  expected	30	None	replace
34	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAli    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
35	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]                              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAli    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
36	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
37	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
38	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  inlineAliasIfPossible(ref,  namespace))  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
39	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  inlineAliasIfPossible(ref,  namespace))  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
40	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  inlineAliasIfPossible(ref,  namespace))  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
41	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  inlineAliasIfPossible(ref,  nameSpace))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  inlineAliasIfPossible(ref,  nameSpace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  inlineAliasIfPossible(ref,  nameSpace))  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
42	[BUG]  [BUGGY]  ||  ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }	  ||    ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
43	[BUG]  [BUGGY]  Name  name  =  ref.addRef(ref);  if(!name.hasRef())  {  name.addRef(ref);  }  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.addRef(ref);  if(!name.hasRef())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.addRef(ref);  if(!name.hasRef())  {  name.addRef(ref);  }	  name.addRef(ref);    if(!name.hasRef())    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	29	None	replace
44	[BUG]  [BUGGY]  Name  name  =  refs.add(ref);  if(!name.hasRef())  {  name.addRef(ref);  }  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  refs.add(ref);  if(!name.hasRef())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  refs.add(ref);  if(!name.hasRef())  {  name.addRef(ref);  }	  name.addRef(ref);    if(!name.hasRef())    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	29	None	replace
45	[BUG]  [BUGGY]  Name  name  =  ref.addRef(name);  if(!name.hasRef())  {  name.addRef(ref);  }  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.addRef(name);  if(!name.hasRef())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.addRef(name);  if(!name.hasRef())  {  name.addRef(ref);  }	  name.addRef(ref);    if(!name.hasRef())    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	29	None	replace
46	[BUG]  [BUGGY]  Name  name  =  ref.addRef(ref);  if(!name.hasRefs())  {  name.addRef(ref);  }  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.addRef(ref);  if(!name.hasRefs())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.addRef(ref);  if(!name.hasRefs())  {  name.addRef(ref);  }	  name.addRef(ref);    if(!name.hasRefs())    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	28	None	replace
47	[BUG]  [BUGGY]  Name  name  =  refs.addRef(ref);  if(!name.hasRefs())  {  name.addRef(ref);  }  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  refs.addRef(ref);  if(!name.hasRefs())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  refs.addRef(ref);  if(!name.hasRefs())  {  name.addRef(ref);  }	  name.addRef(ref);    if(!name.hasRefs())    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	28	None	replace
48	[BUG]  [BUGGY]  Name  name  =  ref.addRef(name);  if(!name.hasRefs())  {  name.addRef(ref);  }  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.addRef(name);  if(!name.hasRefs())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.addRef(name);  if(!name.hasRefs())  {  name.addRef(ref);  }	  name.addRef(ref);    if(!name.hasRefs())    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	28	None	replace
49	[BUG]  [BUGGY]  removeAliasIfPossible(ref,  name.aliasingGets);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  removeAliasIfPossible(ref,  name.aliasingGets);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	removeAliasIfPossible(ref,  name.aliasingGets);	  removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
50	[BUG]  [BUGGY]  removeAliasIfPossible(ref,  namespace,  name.aliasingGets);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  removeAliasIfPossible(ref,  namespace,  name.aliasingGets);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	removeAliasIfPossible(ref,  namespace,  name.aliasingGets);	  removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
51	[BUG]  [BUGGY]  removeAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes);  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  removeAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	removeAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes);	  removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
52	[BUG]  [BUGGY]  removeAliasIfPossible(ref,  namespace,  name.globalSets);  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  removeAliasIfPossible(ref,  namespace,  name.globalSets);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	removeAliasIfPossible(ref,  namespace,  name.globalSets);	  removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
53	[BUG]  [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace))  {	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
54	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  name  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  name  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  name	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  ')'  expected	44	None	replace
55	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  name  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  name  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  name	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  ')'  expected	44	None	replace
56	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  name  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  name  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  name	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  ')'  expected	44	None	replace
57	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
58	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( "  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( "	  if(ref.type!=    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	58	None	replace
59	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
60	[BUG]  [BUGGY]  Name.removeAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name.removeAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name.removeAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes);	  Name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
61	[BUG]  [BUGGY]  Name.removeAliasIfPossible(ref,  namespace,  ref.type);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name.removeAliasIfPossible(ref,  namespace,  ref.type);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name.removeAliasIfPossible(ref,  namespace,  ref.type);	  Name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
62	[BUG]  [BUGGY]  Name.removeAliasIfPossible(ref,  namespace,  inlinePropertiesOnExternTypes);  [CE]  cannot  find  symbol  inlinePropertiesOnExternTypes  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name.removeAliasIfPossible(ref,  namespace,  inlinePropertiesOnExternTypes);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name.removeAliasIfPossible(ref,  namespace,  inlinePropertiesOnExternTypes);	  Name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol  inlinePropertiesOnExternTypes	55	None	replace
63	[BUG]  [BUGGY]  Name.removeAliasIfPossible(ref,  namespace,  name.aliasingGets);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name.removeAliasIfPossible(ref,  namespace,  name.aliasingGets);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name.removeAliasIfPossible(ref,  namespace,  name.aliasingGets);	  Name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
64	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
65	[BUG]  [BUGGY]  ref.removeAlias(namespace);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ref.removeAlias(namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	ref.removeAlias(namespace);	  ref.removeAlias(name);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
66	[BUG]  [BUGGY]  refs.removeAlias(name);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  refs.removeAlias(name);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	refs.removeAlias(name);	  ref.removeAlias(name);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
67	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAli  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAli  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAli	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ')'  expected	59	None	replace
68	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
69	[BUG]  [BUGGY]  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
70	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
71	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,  namespace))  {	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
72	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAli    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
73	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAli    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
74	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAli  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAli  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAli	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAli    	non-compiled	[CE]  ')'  expected	5	None	replace
75	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAli    	non-compiled	[CE]  ')'  expected	5	None	replace
76	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!in!=  name.removeRef(ref);  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!in!=  name.removeRef(ref);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!in!=  name.removeRef(ref);  }	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!in    	non-compiled	[CE]  ')'  expected	6	None	replace
77	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!in!=  name.removeRef(ref);  }  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!in!=  name.removeRef(ref);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!in!=  name.removeRef(ref);  }	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!in    	non-compiled	[CE]  ')'  expected	6	None	replace
78	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!in    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
79	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);        if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  	compilable	  [FE]  NullPointerException  	96	12	add
80	[BUG]  [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  	compilable	  [FE]  NullPointerException  	96	12	add
81	[BUG]  [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
82	[BUG]  [BUGGY]  timeout  [FE]        NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);        if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  }	  	compilable	timeout	96	1	add
83	[BUG]  [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  }  timeout  [FE]        NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  }	  	compilable	timeout	96	1	add
84	[BUG]  [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  name.addRef(ref);  if(inlineAliasIfLocal(ref,  namespace))  {  name.addRef(ref);  }  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  name.addRef(ref);  if(inlineAliasIfLocal(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    name.addRef(ref);  if(inlineAliasIfLocal(ref,  namespace))  {  name.addRef(ref);  }	  	non-compiled	[CE]  cannot  find  symbol	96	None	add
85	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);        if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  	compilable	  [FE]  NullPointerException  	96	12	add
86	[BUG]  [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  	compilable	  [FE]  NullPointerException  	96	12	add
87	[BUG]  [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]              NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
88	[BUG]  [BUGGY]  timeout  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Preconditions.checkState(!inlineAliasIfPossible(ref,  namespace));  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	Preconditions.checkState(!inlineAliasIfPossible(ref,  namespace));	  if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	timeout	85	1	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(!inlineAliasIfPossible(ref,  namespace));  timeout  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Preconditions.checkState(!inlineAliasIfPossible(ref,  namespace));  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Preconditions.checkState(!inlineAliasIfPossible(ref,  namespace));	  if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	timeout	85	1	replace
90	[BUG]  [BUGGY]  refs.removeAliasIfPossible(name,  namespace);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  refs.removeAliasIfPossible(name,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	refs.removeAliasIfPossible(name,  namespace);	  ref.removeAliasIfPossible(name,    namespace);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
91	[BUG]  [BUGGY]  rep.removeAliasIfPossible(name,  namespace);  [CE]  cannot  find  symbol  rep  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  rep.removeAliasIfPossible(name,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	rep.removeAliasIfPossible(name,  namespace);	  ref.removeAliasIfPossible(name,    namespace);    	non-compiled	[CE]  cannot  find  symbol  rep	19	None	replace
92	[BUG]  [BUGGY]  Ref.removeAliasIfPossible(name,  namespace);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Ref.removeAliasIfPossible(name,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Ref.removeAliasIfPossible(name,  namespace);	  ref.removeAliasIfPossible(name,    namespace);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
93	[BUG]  [BUGGY]  Name  name  =  ref.removeAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.removeAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes);	  Name    name    =    ref.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	88	None	replace
94	[BUG]  [BUGGY]  Name  name  =  ref.removeAliasIfPossible(namespace,  ref);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.removeAliasIfPossible(namespace,  ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAliasIfPossible(namespace,  ref);	  Name    name    =    ref.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	88	None	replace
95	[BUG]  [BUGGY]  Name  name  =  ref.removeAliasIfPossible(ref,  namespace,  scope);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.removeAliasIfPossible(ref,  namespace,  scope);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAliasIfPossible(ref,  namespace,  scope);	  Name    name    =    ref.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	88	None	replace
96	[BUG]  [BUGGY]  Name  name  =  refs.removeAliasIfPossible(ref,  namespace);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  refs.removeAliasIfPossible(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  refs.removeAliasIfPossible(ref,  namespace);	  Name    name    =    ref.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	88	None	replace
97	[BUG]  [BUGGY]  ref.removeAliasIfPossible(namespace,  ref);  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ref.removeAliasIfPossible(namespace,  ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	ref.removeAliasIfPossible(namespace,  ref);	  ref.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
98	[BUG]  [BUGGY]  refs.removeAliasIfPossible(ref,  namespace);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  refs.removeAliasIfPossible(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	refs.removeAliasIfPossible(ref,  namespace);	  ref.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
99	[BUG]  [BUGGY]  ref.removeAliasIfPossible(name,  ref);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ref.removeAliasIfPossible(name,  ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	ref.removeAliasIfPossible(name,  ref);	  ref.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
100	[BUG]  [BUGGY]  name.inlineAliasIfPossible(ref,  ref.type));  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.inlineAliasIfPossible(ref,  ref.type));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.inlineAliasIfPossible(ref,  ref.type));	  name.inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  ';'  expected	90	None	replace
101	[BUG]  [BUGGY]  name.inlineAliasIfPossible(ref,  ref.scope));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.inlineAliasIfPossible(ref,  ref.scope));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.inlineAliasIfPossible(ref,  ref.scope));	  name.inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  ';'  expected	90	None	replace
102	[BUG]  [BUGGY]  name.inlineAlias(ref,  namespace));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.inlineAlias(ref,  namespace));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.inlineAlias(ref,  namespace));	  name.inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  ';'  expected	90	None	replace
103	[BUG]  [BUGGY]  name.inlineAliasIfPossible(ref,  namespace,  ref.type));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.inlineAliasIfPossible(ref,  namespace,  ref.type));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.inlineAliasIfPossible(ref,  namespace,  ref.type));	  name.inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  ';'  expected	90	None	replace
104	[BUG]  [BUGGY]  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
105	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||!inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||!inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||!inlineAliasIfPossible(ref,  namespace))  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||!inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
106	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal()  ||!inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal()  ||!inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal()  ||!inlineAliasIfPossible(ref,  namespace))  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||!inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
107	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||!inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||!inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||!inlineAliasIfPossible(ref,  namespace))  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||!inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
108	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
109	[BUG]  [BUGGY]  if(name.globalSets  ==  1)  {  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1)  {  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1)  {  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
110	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
111	[BUG]  [BUGGY]  name.setAliasingGets(ref.namespace);  [CE]  cannot  find  symbol  namespace  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.setAliasingGets(ref.namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.setAliasingGets(ref.namespace);	  name.setAliasingGets(namespace);    	non-compiled	[CE]  cannot  find  symbol  namespace	8	None	replace
112	[BUG]  [BUGGY]  name.setAliasingGets(namespace,  ref.scope);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.setAliasingGets(namespace,  ref.scope);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.setAliasingGets(namespace,  ref.scope);	  name.setAliasingGets(namespace);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
113	[BUG]  [BUGGY]  name.addAlias(ref.type,  namespace));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAlias(ref.type,  namespace));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(ref.type,  namespace));	  name.addAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  ';'  expected	12	None	replace
114	[BUG]  [BUGGY]  name.addAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes));	  name.addAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  ';'  expected	12	None	replace
115	[BUG]  [BUGGY]  name.addAliasIfPossible(ref,  ref.type));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAliasIfPossible(ref,  ref.type));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAliasIfPossible(ref,  ref.type));	  name.addAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  ';'  expected	12	None	replace
116	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAli  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAli  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAli	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  ')'  expected	77	None	replace
117	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
118	[BUG]  [BUGGY]  if(inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(inlineAliasIfPossible(ref,  namespace))  {	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
119	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
120	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
121	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAli  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAli  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAli	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  ')'  expected	73	None	replace
122	[BUG]  [BUGGY]  if(name.globalSets!=  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAli  [CE]  ')'  expected  [FE]                            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets!=  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAli  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets!=  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAli	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  ')'  expected	73	None	replace
123	[BUG]  [BUGGY]  name.setAliasingGets(ref,  namespace,  collapsePropertiesOnExternTypes);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.setAliasingGets(ref,  namespace,  collapsePropertiesOnExternTypes);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.setAliasingGets(ref,  namespace,  collapsePropertiesOnExternTypes);	  name.setAliasingGets(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
124	[BUG]  [BUGGY]  name.setAliasingGets(ref,  namespace,  inlinePropertiesOnExternTypes);  [CE]  cannot  find  symbol  inlinePropertiesOnExternTypes  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.setAliasingGets(ref,  namespace,  inlinePropertiesOnExternTypes);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.setAliasingGets(ref,  namespace,  inlinePropertiesOnExternTypes);	  name.setAliasingGets(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol  inlinePropertiesOnExternTypes	9	None	replace
125	[BUG]  [BUGGY]  name.setAliasingGets(ref,  namespace,  inlineAliasIfPossible(ref));  [CE]  method  inlineAliasIfPossible  in  class  CollapseProperties  cannot  be  applied  to  given  types;  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.setAliasingGets(ref,  namespace,  inlineAliasIfPossible(ref));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.setAliasingGets(ref,  namespace,  inlineAliasIfPossible(ref));	  name.setAliasingGets(ref,    namespace);    	non-compiled	[CE]  method  inlineAliasIfPossible  in  class  CollapseProperties  cannot  be  applied  to  given  types;	9	None	replace
126	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
127	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
128	[BUG]  [BUGGY]  ||  ref.scope.isExtern())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.scope.isExtern())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isExtern())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
129	[BUG]  [BUGGY]  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
130	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  ')'  expected	71	None	replace
131	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
132	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
133	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
134	[BUG]  [BUGGY]  namespace.removeAliasIfPossible(ref,  name);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  namespace.removeAliasIfPossible(ref,  name);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	namespace.removeAliasIfPossible(ref,  name);	  namespace.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
135	[BUG]  [BUGGY]  namespace.removeAliasIfPossible(ref,  name.aliasingGets);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  namespace.removeAliasIfPossible(ref,  name.aliasingGets);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	namespace.removeAliasIfPossible(ref,  name.aliasingGets);	  namespace.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
136	[BUG]  [BUGGY]  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
137	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
138	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( "  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( "	  if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	86	None	replace
139	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
140	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.localSets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.localSets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.localSets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
141	[BUG]  [BUGGY]  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
142	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
143	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( "  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( "	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	50	None	replace
144	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
145	[BUG]  [BUGGY]  Name  ref  =  refs.get(ref);  [CE]  variable  ref  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  ref  =  refs.get(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  ref  =  refs.get(ref);	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    name.addRef(ref);    }    timeout    	non-compiled	[CE]  variable  ref  is  already  defined  in  method  inlineAliases(GlobalNamespace)	99	None	replace
146	[BUG]  [BUGGY]  Name  name  =  ref.getName();  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.getName();  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.getName();	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    name.addRef(ref);    }    timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	99	None	replace
147	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
148	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.localSets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.localSets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.localSets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
149	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
150	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( "  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( "	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	69	None	replace
151	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  return;  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasesIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
152	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  name  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  name  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  name	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasesIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  ')'  expected	94	None	replace
153	[BUG]  [BUGGY]  name.addAliasIfPossible(ref,  namespace))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAliasIfPossible(ref,  namespace))  {  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAliasIfPossible(ref,  namespace))  {	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    name.addRef(ref);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
154	[BUG]  [BUGGY]  name.addAlias(namespace);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAlias(namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(namespace);	  name.addAlias(ref);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
155	[BUG]  [BUGGY]  name.addAlias(name,  ref);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAlias(name,  ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(name,  ref);	  name.addAlias(ref);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
156	[BUG]  [BUGGY]  name.addAlias(name);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAlias(name);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(name);	  name.addAlias(ref);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
157	[BUG]  [BUGGY]  Name  name.addAlias(ref);  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name.addAlias(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name.addAlias(ref);	  Name    name.removeAlias(ref);    	non-compiled	[CE]  ';'  expected	67	None	replace
158	[BUG]  [BUGGY]  Name  name.addAlias(ref,  namespace);  [CE]  ';'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name.addAlias(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name.addAlias(ref,  namespace);	  Name    name.removeAlias(ref);    	non-compiled	[CE]  ';'  expected	67	None	replace
159	[BUG]  [BUGGY]  Name  name.removeAliases(ref);  [CE]  ';'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name.removeAliases(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name.removeAliases(ref);	  Name    name.removeAlias(ref);    	non-compiled	[CE]  ';'  expected	67	None	replace
160	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  name  [CE]  ')'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  name  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  name	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAli    	non-compiled	[CE]  ')'  expected	1	None	replace
161	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  }	  name.addRef(ref);    Name    name.addRef(ref);    	compilable	timeout	26	1	replace
162	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  }  timeout  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  }	  name.addRef(ref);    Name    name.addRef(ref);    	compilable	timeout	26	1	replace
163	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  Name  name.addRef(ref);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  Name  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  Name  name.addRef(ref);  }	  name.addRef(ref);    Name    name.addRef(ref);    	non-compiled	[CE]  ';'  expected	26	None	replace
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  name.addRef(ref);  }	  name.addRef(ref);    Name    name.addRef(ref);    	compilable	  [FE]  AssertionFailedError  	26	12	replace
165	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  name.addRef(ref);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  name.addRef(ref);  }	  name.addRef(ref);    Name    name.addRef(ref);    	compilable	  [FE]  AssertionFailedError  	26	12	replace
166	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  }	  name.addRef(ref);    Name    name.addRef(ref);    	compilable	timeout	26	1	replace
167	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  }  timeout  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  }	  name.addRef(ref);    Name    name.addRef(ref);    	compilable	timeout	26	1	replace
168	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
169	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
170	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
171	[BUG]  [BUGGY]  &&  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  &&  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	&&  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {	  ||    ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
172	[BUG]  [BUGGY]  ||  ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {	  ||    ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
173	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {	  ||    ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
174	[BUG]  [BUGGY]  ref.removeAlias(name,  namespace);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ref.removeAlias(name,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	ref.removeAlias(name,  namespace);	  name.removeAlias(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
175	[BUG]  [BUGGY]  name.removeAlias(ref,  nameSpace);  [CE]  cannot  find  symbol  nameSpace  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.removeAlias(ref,  nameSpace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.removeAlias(ref,  nameSpace);	  name.removeAlias(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol  nameSpace	65	None	replace
176	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
177	[BUG]  [BUGGY]  if(name.globalSets  ==  1)  {  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1)  {  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1)  {  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
178	[BUG]  [BUGGY]  Name  name  =  ref.removeAlias(namespace,  type);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.removeAlias(namespace,  type);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAlias(namespace,  type);	  Name    name    =    ref.removeAlias(namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	95	None	replace
179	[BUG]  [BUGGY]  Name  name  =  ref.removeAlias(namespace,  name);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.removeAlias(namespace,  name);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAlias(namespace,  name);	  Name    name    =    ref.removeAlias(namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	95	None	replace
180	[BUG]  [BUGGY]  name.inlineAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.inlineAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.inlineAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes);	  name.inlineAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
181	[BUG]  [BUGGY]  name.inlineAliasIfPossible(ref,  namespace,  ref.type);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.inlineAliasIfPossible(ref,  namespace,  ref.type);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.inlineAliasIfPossible(ref,  namespace,  ref.type);	  name.inlineAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
182	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
183	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
184	[BUG]  [BUGGY]  ||  ref.scope.isExtern())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.scope.isExtern())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isExtern())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
185	[BUG]  [BUGGY]  ||  ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
186	[BUG]  [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace)    	non-compiled	[CE]  ')'  expected	48	None	replace
187	[BUG]  [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  Lists.newArrayList(name.getRefs());	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace)    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	48	None	replace
188	[BUG]  [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)!=  ')'  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)!=  ')'  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)!=  ')'	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace)    	non-compiled	[CE]  ')'  expected	48	None	replace
189	[BUG]  [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)  }  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)  }	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace)    	non-compiled	[CE]  ')'  expected	48	None	replace
190	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  name.addRef(ref);  }	  name.addRef(ref);    name.addRef(ref);    	compilable	timeout	25	1	replace
191	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  name.addRef(ref);  }  timeout  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  name.addRef(ref);  }	  name.addRef(ref);    name.addRef(ref);    	compilable	timeout	25	1	replace
192	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }	  name.addRef(ref);    name.addRef(ref);    	compilable	timeout	25	1	replace
193	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  timeout  [FE]      AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }	  name.addRef(ref);    name.addRef(ref);    	compilable	timeout	25	1	replace
194	[BUG]  [BUGGY]  timeout  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  	compilable	timeout	84	1	add
195	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  timeout  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  	compilable	timeout	84	1	add
196	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  If(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  If(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    If(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  	non-compiled	[CE]  ';'  expected	84	None	add
197	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    if(!inlineAliasIfPossible(ref,  namespace))  {  continue;	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
198	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  if(!inlineAliasIfFollow(ref,  namespace))  {  continue;  }  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  if(!inlineAliasIfFollow(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    if(!inlineAliasIfFollow(ref,  namespace))  {  continue;  }	  	non-compiled	[CE]  cannot  find  symbol	84	None	add
199	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  name	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    name    	non-compiled	[CE]  ')'  expected	2	None	replace
200	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAl  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAl  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAl	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    name    	non-compiled	[CE]  ')'  expected	2	None	replace
201	[BUG]  [BUGGY]  Name  name.addRef(ref);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name.addRef(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name.addRef(ref);	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name.addRef(ref);    }    	non-compiled	[CE]  ';'  expected	100	None	replace
202	[BUG]  [BUGGY]  Name  name  =  refs.get(ref);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  refs.get(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  refs.get(ref);	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	100	None	replace
203	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  name  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  name  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  name	  ||    ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
204	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace	  ||    ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
205	[BUG]  [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.addRef(ref);  }  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.addRef(ref);  }	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    for(Ref    ref    :    ref.namespace)    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	45	None	replace
206	[BUG]  [BUGGY]  Name  ref  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.addRef(ref);  }  [CE]  variable  ref  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  ref  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  ref  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.addRef(ref);  }	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    for(Ref    ref    :    ref.namespace)    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  ref  is  already  defined  in  method  inlineAliases(GlobalNamespace)	45	None	replace
207	[BUG]  [BUGGY]  Name  ref  =  Lists.newArrayList(name.getRefs());  [CE]  variable  ref  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  ref  =  Lists.newArrayList(name.getRefs());  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  ref  =  Lists.newArrayList(name.getRefs());	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    for(Ref    ref    :    ref.namespace)    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  ref  is  already  defined  in  method  inlineAliases(GlobalNamespace)	45	None	replace
208	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    for(Ref    ref    :    ref.namespace)    {    name.addRef(ref);    }    	compilable	timeout	45	1	replace
209	[BUG]  [BUGGY]  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  timeout  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    for(Ref    ref    :    ref.namespace)    {    name.addRef(ref);    }    	compilable	timeout	45	1	replace
210	[BUG]  [BUGGY]  if(name.globalSets!=  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets!=  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets!=  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
211	[BUG]  [BUGGY]  if(ref.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
212	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  ref.aliasingGets  >  0)  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  ref.aliasingGets  >  0)  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  ref.aliasingGets  >  0)  {	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
213	[BUG]  [BUGGY]  if(ref.globalSets  ==  1  &&  ref.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.globalSets  ==  1  &&  ref.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.globalSets  ==  1  &&  ref.localSets  ==  0  &&  name.aliasingGets  >  0)  {	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
214	[BUG]  [BUGGY]  if(name.globalSets  ==  1  ||  name.localSets  ==  0  ||  name.aliasingGets  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  ||  name.localSets  ==  0  ||  name.aliasingGets  >  0)  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  ||  name.localSets  ==  0  ||  name.aliasingGets  >  0)  {	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
215	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(name.globalSets!=  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAli  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(name.globalSets!=  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAli  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(name.globalSets!=  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAli	  if(name.globalSets!=    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAli    	non-compiled	[CE]  ')'  expected	31	None	replace
216	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets!=  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAli  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets!=  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAli  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets!=  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAli	  if(name.globalSets!=    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAli    	non-compiled	[CE]  ')'  expected	31	None	replace
217	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    name.addRef(ref);  name.addRef(ref);  name.addRef(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);        name.addRef(ref);    name.addRef(ref);  name.addRef(ref);	  	compilable	timeout	24	1	add
218	[BUG]  [BUGGY]  name.addRef(ref);    name.addRef(ref);  name.addRef(ref);  name.addRef(ref);  timeout  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    name.addRef(ref);  name.addRef(ref);  name.addRef(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        name.addRef(ref);    name.addRef(ref);  name.addRef(ref);	  	compilable	timeout	24	1	add
219	[BUG]  [BUGGY]  name.addRef(ref);    name.addRef(ref);  Name  name.addRef(ref);  name.addRef(ref);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    name.addRef(ref);  Name  name.addRef(ref);  name.addRef(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        name.addRef(ref);    Name  name.addRef(ref);  name.addRef(ref);	  	non-compiled	[CE]  ';'  expected	24	None	add
220	[BUG]  [BUGGY]  name.addRef(ref);    name.addRef(ref);  Name.addRef(ref);  name.addRef(ref);  [CE]  non-static  method  addRef(Ref)  cannot  be  referenced  from  a  static  context  [FE]        AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    name.addRef(ref);  Name.addRef(ref);  name.addRef(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        name.addRef(ref);    Name.addRef(ref);  name.addRef(ref);	  	non-compiled	[CE]  non-static  method  addRef(Ref)  cannot  be  referenced  from  a  static  context	24	None	add
221	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    name.addRef(ref);  name.addRef(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);        name.addRef(ref);    name.addRef(ref);	  	compilable	timeout	24	1	add
222	[BUG]  [BUGGY]  name.addRef(ref);    name.addRef(ref);  name.addRef(ref);  timeout  [FE]          AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    name.addRef(ref);  name.addRef(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        name.addRef(ref);    name.addRef(ref);	  	compilable	timeout	24	1	add
223	[BUG]  [BUGGY]  name.addRef(ref);    name.addRef(ref);  name.addRef(ref);  name.addRef(ref;  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    name.addRef(ref);  name.addRef(ref);  name.addRef(ref;  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        name.addRef(ref);    name.addRef(ref);  name.addRef(ref;	  	non-compiled	[CE]  ')'  expected	24	None	add
224	[BUG]  [BUGGY]  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
225	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    name.addRef(ref);    }    name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }	  	compilable	timeout	46	1	add
226	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  timeout  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    name.addRef(ref);    }    name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }	  	compilable	timeout	46	1	add
227	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }	  	compilable	timeout	46	1	add
228	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  timeout  [FE]      AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }	  	compilable	timeout	46	1	add
229	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
230	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    name.addRef(ref);    }    name.addRef(ref);  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }	  	compilable	timeout	46	1	add
231	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  timeout  [FE]          AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    name.addRef(ref);    }    name.addRef(ref);  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }	  	compilable	timeout	46	1	add
232	[BUG]  [BUGGY]  name.addRef(ref,  namespace);  [CE]  method  addRef  in  class  Name  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref,  namespace);	  name.addRef(ref);    Name.addRef(ref);    	non-compiled	[CE]  method  addRef  in  class  Name  cannot  be  applied  to  given  types;	27	None	replace
233	[BUG]  [BUGGY]  Name.addRef(ref,  namespace);  [CE]  method  addRef  in  class  Name  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name.addRef(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name.addRef(ref,  namespace);	  name.addRef(ref);    Name.addRef(ref);    	non-compiled	[CE]  method  addRef  in  class  Name  cannot  be  applied  to  given  types;	27	None	replace
234	[BUG]  [BUGGY]  Name.addRef(ref);  [CE]  non-static  method  addRef(Ref)  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name.addRef(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name.addRef(ref);	  name.addRef(ref);    Name.addRef(ref);    	non-compiled	[CE]  non-static  method  addRef(Ref)  cannot  be  referenced  from  a  static  context	27	None	replace
235	[BUG]  [BUGGY]  name.addAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAliasIfPossible(ref,  namespace,  collapsePropertiesOnExternTypes);	  name.addAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
236	[BUG]  [BUGGY]  namespace.addAliasIfPossible(ref,  namespace);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  namespace.addAliasIfPossible(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	namespace.addAliasIfPossible(ref,  namespace);	  name.addAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
237	[BUG]  [BUGGY]  name.addAliasIfPossible(ref,  namespace,  ref.type);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAliasIfPossible(ref,  namespace,  ref.type);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAliasIfPossible(ref,  namespace,  ref.type);	  name.addAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
238	[BUG]  [BUGGY]  name.addAlias(ref,  namespace,  collapsePropertiesOnExternTypes);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAlias(ref,  namespace,  collapsePropertiesOnExternTypes);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(ref,  namespace,  collapsePropertiesOnExternTypes);	  name.addAlias(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
239	[BUG]  [BUGGY]  name.addAlias(ref,  namespace,  inlinePropertiesOnExternTypes);  [CE]  cannot  find  symbol  inlinePropertiesOnExternTypes  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAlias(ref,  namespace,  inlinePropertiesOnExternTypes);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(ref,  namespace,  inlinePropertiesOnExternTypes);	  name.addAlias(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol  inlinePropertiesOnExternTypes	13	None	replace
240	[BUG]  [BUGGY]  name.addAlias(ref,  namespace,  ref.type);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAlias(ref,  namespace,  ref.type);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(ref,  namespace,  ref.type);	  name.addAlias(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
241	[BUG]  [BUGGY]  namespace.addAlias(ref,  namespace);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  namespace.addAlias(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	namespace.addAlias(ref,  namespace);	  name.addAlias(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
242	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
243	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue  [CE]  ';'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
244	[BUG]  [BUGGY]  namespace.removeAlias(name);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  namespace.removeAlias(name);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	namespace.removeAlias(name);	  name.removeAlias(namespace);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
245	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    name.addRef(ref);    }    name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
246	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_SET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [CE]  cannot  find  symbol  ALIASING_SET  [FE]      AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_SET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    name.addRef(ref);    }    name.addRef(ref);  if(ref.type  ==  Type.ALIASING_SET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }	  	non-compiled	[CE]  cannot  find  symbol  ALIASING_SET	46	None	add
247	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_FILE  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [CE]  cannot  find  symbol  ALIASING_FILE  [FE]        AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_FILE  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    name.addRef(ref);    }    name.addRef(ref);  if(ref.type  ==  Type.ALIASING_FILE  ||  ref.scope.isLocal())  {  name.addRef(ref);  }	  	non-compiled	[CE]  cannot  find  symbol  ALIASING_FILE	46	None	add
248	[BUG]  [BUGGY]  removeAliasIfPossible(ref,  namespace,  ref.type);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  removeAliasIfPossible(ref,  namespace,  ref.type);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	removeAliasIfPossible(ref,  namespace,  ref.type);	  removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
249	[BUG]  [BUGGY]  removeAliasIfPossible(ref,  namespace,  ref.scope);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  removeAliasIfPossible(ref,  namespace,  ref.scope);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	removeAliasIfPossible(ref,  namespace,  ref.scope);	  removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
250	[BUG]  [BUGGY]  removeAliasIfPossible(ref,  namespace,  ref.namespace);  [CE]  cannot  find  symbol  namespace  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  removeAliasIfPossible(ref,  namespace,  ref.namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	removeAliasIfPossible(ref,  namespace,  ref.namespace);	  removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol  namespace	20	None	replace
251	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasesIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
252	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasesIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
253	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAl  [CE]  ')'  expected  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAl  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAl	  if(name.globalSets!=    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAli    	non-compiled	[CE]  ')'  expected	31	None	replace
254	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {	  if(name.globalSets!=    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAli    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
255	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
256	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
257	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( "  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( "	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	57	None	replace
258	[BUG]  [BUGGY]  name.addAliasIfPossible(ref,  ref.aliasingGets);  [CE]  cannot  find  symbol  aliasingGets  [FE]        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAliasIfPossible(ref,  ref.aliasingGets);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAliasIfPossible(ref,  ref.aliasingGets);	  name.addAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol  aliasingGets	10	None	replace
259	[BUG]  [BUGGY]  name.addAliasIfPossible(ref,  aliasingGets);  [CE]  cannot  find  symbol  aliasingGets  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAliasIfPossible(ref,  aliasingGets);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAliasIfPossible(ref,  aliasingGets);	  name.addAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol  aliasingGets	10	None	replace
260	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
261	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(!inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  name.addRef(ref);  }	  name.addRef(ref);    name.addRef(ref);    	compilable	timeout	25	1	replace
262	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  name.addRef(ref);  }  timeout  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  name.addRef(ref);  }	  name.addRef(ref);    name.addRef(ref);    	compilable	timeout	25	1	replace
263	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  name.addRef(ref);  }  [CE]  cannot  find  symbol  aliasingGets  [FE]      AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  name.addRef(ref);  }	  name.addRef(ref);    name.addRef(ref);    	non-compiled	[CE]  cannot  find  symbol  aliasingGets	25	None	replace
264	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.aliasingGets  >  0)  {  name.addRef(ref);  }  [CE]  cannot  find  symbol  aliasingGets  [FE]        AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.aliasingGets  >  0)  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.aliasingGets  >  0)  {  name.addRef(ref);  }	  name.addRef(ref);    name.addRef(ref);    	non-compiled	[CE]  cannot  find  symbol  aliasingGets	25	None	replace
265	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
266	[BUG]  [BUGGY]  Name.removeAlias(ref,  namespace);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name.removeAlias(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name.removeAlias(ref,  namespace);	  name.removeAlias(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
267	[BUG]  [BUGGY]  name.inlineAliasIfPossible(ref,  ref.namespace));  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.inlineAliasIfPossible(ref,  ref.namespace));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.inlineAliasIfPossible(ref,  ref.namespace));	  name.inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  ';'  expected	90	None	replace
268	[BUG]  [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
269	[BUG]  [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
270	[BUG]  [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(re  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(re  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(re	  	non-compiled	[CE]  ')'  expected	96	None	add
271	[BUG]  [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef  [CE]  ';'  expected  [FE]          NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef	  	non-compiled	[CE]  ';'  expected	96	None	add
272	[BUG]  [BUGGY]  name.setAliasingGets(ref.aliasingGets);  [CE]  cannot  find  symbol  aliasingGets  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.setAliasingGets(ref.aliasingGets);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.setAliasingGets(ref.aliasingGets);	  name.setAliasingGets(namespace);    	non-compiled	[CE]  cannot  find  symbol  aliasingGets	8	None	replace
273	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
274	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ".);  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
275	[BUG]  [BUGGY]  namespace.inlineAliasIfPossible(ref,  namespace);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  namespace.inlineAliasIfPossible(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	namespace.inlineAliasIfPossible(ref,  namespace);	  name.inlineAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
276	[BUG]  [BUGGY]  Name.inlineAliasIfPossible(ref,  namespace);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name.inlineAliasIfPossible(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name.inlineAliasIfPossible(ref,  namespace);	  name.inlineAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
277	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }	  ||    ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
278	[BUG]  [BUGGY]  Name  name.removeAliasIfPossible(ref,  aliasingGets);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name.removeAliasIfPossible(ref,  aliasingGets);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name.removeAliasIfPossible(ref,  aliasingGets);	  Name    name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  ';'  expected	56	None	replace
279	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
280	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
281	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue  [CE]  ';'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
282	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
283	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( "  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( "	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	49	None	replace
284	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    name    	non-compiled	[CE]  ')'  expected	2	None	replace
285	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    name    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
286	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
287	[BUG]  [BUGGY]  Name  name  =  ref.removeAliasIfPossible(ref,  aliasingGets);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.removeAliasIfPossible(ref,  aliasingGets);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAliasIfPossible(ref,  aliasingGets);	  Name    name    =    ref.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	88	None	replace
288	[BUG]  [BUGGY]  Name  name  =  ref.removeAliasIfPossible(ref,  namespace,  args);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.removeAliasIfPossible(ref,  namespace,  args);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAliasIfPossible(ref,  namespace,  args);	  Name    name    =    ref.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	88	None	replace
289	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!in  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!in  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!in	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!in    	non-compiled	[CE]  ')'  expected	6	None	replace
290	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!in    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
291	[BUG]  [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||!inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||!inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||!inlineAliasIfPossible(ref,  namespace))  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||!inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
292	[BUG]  [BUGGY]  Name.removeAliasIfPossible(ref,  aliasingGets);  [CE]  cannot  find  symbol  aliasingGets  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name.removeAliasIfPossible(ref,  aliasingGets);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name.removeAliasIfPossible(ref,  aliasingGets);	  Name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol  aliasingGets	55	None	replace
293	[BUG]  [BUGGY]  Name.removeAliasIfPossible(ref,  ref.aliasingGets);  [CE]  cannot  find  symbol  aliasingGets  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name.removeAliasIfPossible(ref,  ref.aliasingGets);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name.removeAliasIfPossible(ref,  ref.aliasingGets);	  Name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol  aliasingGets	55	None	replace
294	[BUG]  [BUGGY]  Name.removeAliasIfPossible(ref,  namespace,  ref.scope);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name.removeAliasIfPossible(ref,  namespace,  ref.scope);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name.removeAliasIfPossible(ref,  namespace,  ref.scope);	  Name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
295	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( "  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( "	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	68	None	replace
296	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  &&  ref.aliasingGets  >  0)  {  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  &&  ref.aliasingGets  >  0)  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  &&  ref.aliasingGets  >  0)  {	  if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
297	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  &&  ref.aliasingGets  >  0)  {  continue;  }  [CE]  cannot  find  symbol  aliasingGets  [FE]      NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  &&  ref.aliasingGets  >  0)  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  &&  ref.aliasingGets  >  0)  {  continue;  }	  if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol  aliasingGets	85	None	replace
298	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {	  if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
299	[BUG]  [BUGGY]  timeout  [FE]          NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  continue;  }	  if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	timeout	85	1	replace
300	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  continue;  }  timeout  [FE]          NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  continue;  }	  if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	timeout	85	1	replace
301	[BUG]  [BUGGY]  namespace.removeAliasIfPossible(ref,  nameSpace);  [CE]  cannot  find  symbol  nameSpace  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  namespace.removeAliasIfPossible(ref,  nameSpace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	namespace.removeAliasIfPossible(ref,  nameSpace);	  namespace.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol  nameSpace	89	None	replace
302	[BUG]  [BUGGY]  name.addRef(ref);    name.addRef(ref);  name.addRef(ref);  name.addRef(ref,  namespace);  [CE]  method  addRef  in  class  Name  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    name.addRef(ref);  name.addRef(ref);  name.addRef(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        name.addRef(ref);    name.addRef(ref);  name.addRef(ref,  namespace);	  	non-compiled	[CE]  method  addRef  in  class  Name  cannot  be  applied  to  given  types;	24	None	add
303	[BUG]  [BUGGY]  ||  ref.scope.isGlobal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.scope.isGlobal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isGlobal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
304	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
305	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.addRef(ref);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.addRef(ref);  }	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    for(Ref    ref    :    ref.namespace)    {    name.addRef(ref);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
306	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.add  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.add  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.add	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    for(Ref    ref    :    ref.namespace)    {    name.addRef(ref);    }    	non-compiled	[CE]  not  a  statement	45	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Preconditions.checkState(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Preconditions.checkState(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
308	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  inlineAliasesIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  inlineAliasesIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal()  ||  inlineAliasesIfPossible(ref,  namespace))  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
309	[BUG]  [BUGGY]  name.addRef(ref,  name);  [CE]  method  addRef  in  class  Name  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref,  name);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref,  name);	  name.addRef(ref);    Name.addRef(ref);    	non-compiled	[CE]  method  addRef  in  class  Name  cannot  be  applied  to  given  types;	27	None	replace
310	[BUG]  [BUGGY]  ref.type  =  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ref.type  =  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	ref.type  =  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  ';'  expected	76	None	replace
311	[BUG]  [BUGGY]  Name  name  =  ref.removeAlias(namespace,  namespace);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.removeAlias(namespace,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAlias(namespace,  namespace);	  Name    name    =    ref.removeAlias(namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	95	None	replace
312	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
313	[BUG]  [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  1)  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  1)  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  1)  {	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
314	[BUG]  [BUGGY]  name.addAlias(ref,  ref.aliasingGets);  [CE]  cannot  find  symbol  aliasingGets  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAlias(ref,  ref.aliasingGets);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(ref,  ref.aliasingGets);	  name.addAlias(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol  aliasingGets	13	None	replace
315	[BUG]  [BUGGY]  name.addAlias(ref,  namespace,  inlineAlias);  [CE]  cannot  find  symbol  inlineAlias  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAlias(ref,  namespace,  inlineAlias);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(ref,  namespace,  inlineAlias);	  name.addAlias(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol  inlineAlias	13	None	replace
316	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  if(!inlineAliasIfPossible(ref,  nameSpace))  {  continue;  }  [CE]  cannot  find  symbol  nameSpace  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  if(!inlineAliasIfPossible(ref,  nameSpace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    if(!inlineAliasIfPossible(ref,  nameSpace))  {  continue;  }	  	non-compiled	[CE]  cannot  find  symbol  nameSpace	84	None	add
317	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
318	[BUG]  [BUGGY]  name.addAliasIfPossible(ref,  ref.aliasingGets));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAliasIfPossible(ref,  ref.aliasingGets));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAliasIfPossible(ref,  ref.aliasingGets));	  name.addAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  ';'  expected	12	None	replace
319	[BUG]  [BUGGY]  name.addAliasIfPossible(ref,  ref.namespace));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAliasIfPossible(ref,  ref.namespace));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAliasIfPossible(ref,  ref.namespace));	  name.addAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  ';'  expected	12	None	replace
320	[BUG]  [BUGGY]  name.addAlias(ref,  name);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAlias(ref,  name);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(ref,  name);	  name.addAlias(ref);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
321	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    name.addRef(ref);    }    name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);	  timeout    	non-compiled	[CE]  illegal  start  of  expression	98	None	add
322	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( "  [CE]  unclosed  string  literal  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( "  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( "	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	59	None	replace
323	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.type  ==  Type	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAli    	non-compiled	[CE]  ')'  expected	30	None	replace
324	[BUG]  [BUGGY]  Preconditions.checkState(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  ';'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Preconditions.checkState(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Preconditions.checkState(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  ';'  expected	23	None	replace
325	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  }	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
326	[BUG]  [BUGGY]  Name  name.setAliasingGets(ref,  namespace);  [CE]  ';'  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name.setAliasingGets(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name.setAliasingGets(ref,  namespace);	  name.setAliasingGets(ref,    namespace);    	non-compiled	[CE]  ';'  expected	9	None	replace
327	[BUG]  [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Ref.NAMESPACE_REDEFINED_WARNING  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
328	[BUG]  [BUGGY]  ref.removeAliasIfPossible(namespace,  name);  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ref.removeAliasIfPossible(namespace,  name);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	ref.removeAliasIfPossible(namespace,  name);	  ref.removeAliasIfPossible(name,    namespace);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
329	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
330	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ".);  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
331	[BUG]  [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)!=  ')'  expected  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)!=  ')'  expected  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)!=  ')'  expected	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace)    	non-compiled	[CE]  ')'  expected	48	None	replace
332	[BUG]  [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfP  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfP  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfP	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace)    	non-compiled	[CE]  ')'  expected	48	None	replace
333	[BUG]  [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace)    	non-compiled	[CE]  ')'  expected	48	None	replace
334	[BUG]  [BUGGY]  Name  name  =  refs.get(ref.type);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  refs.get(ref.type);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  refs.get(ref.type);	  name.addRef(ref);    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	97	None	replace
335	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
336	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!  [CE]  illegal  start  of  expression  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
337	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
338	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace))  {	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
339	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  ')'  expected	44	None	replace
340	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  ')'  expected	44	None	replace
341	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  return;  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasesIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
342	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  return;  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasesIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
343	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(ref.	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAlias    	non-compiled	[CE]  <identifier>  expected	43	None	replace
344	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
345	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
346	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  break;  }  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  break;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  break;  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
347	[BUG]  [BUGGY]  name.addAliasIfPossible(ref,  namespace)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAliasIfPossible(ref,  namespace)  {  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAliasIfPossible(ref,  namespace)  {	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    name.addRef(ref);    }    	non-compiled	[CE]  ';'  expected	47	None	replace
348	[BUG]  [BUGGY]  Name  name  =  refs.addRef(name);  if(!name.hasRefs())  {  name.addRef(ref);  }  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  refs.addRef(name);  if(!name.hasRefs())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  refs.addRef(name);  if(!name.hasRefs())  {  name.addRef(ref);  }	  name.addRef(ref);    if(!name.hasRefs())    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	28	None	replace
349	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
350	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
351	[BUG]  [BUGGY]  Name  name  =  refs.addRef(ref);  if(!name.hasRef())  {  name.addRef(ref);  }  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  refs.addRef(ref);  if(!name.hasRef())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  refs.addRef(ref);  if(!name.hasRef())  {  name.addRef(ref);  }	  name.addRef(ref);    if(!name.hasRef())    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	29	None	replace
352	[BUG]  [BUGGY]  Name  name  =  refs.addRef(name);  if(!name.hasRef())  {  name.addRef(ref);  }  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  refs.addRef(name);  if(!name.hasRef())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  refs.addRef(name);  if(!name.hasRef())  {  name.addRef(ref);  }	  name.addRef(ref);    if(!name.hasRef())    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	29	None	replace
353	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    name.addRef(ref);    }    timeout    	compilable	  [FE]  AssertionFailedError  	99	12	replace
354	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    name.addRef(ref);    }    timeout    	compilable	  [FE]  AssertionFailedError  	99	12	replace
355	[BUG]  [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type!=  Type.ALIASING_GET)  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
356	[BUG]  [BUGGY]  Name  name  =  new  Name(ref.getName());  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  new  Name(ref.getName());  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  new  Name(ref.getName());	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	100	None	replace
357	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
358	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  inlineAliasIfPossible(ref,  namespace))  {	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
359	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	compilable	  [FE]  NullPointerException  	80	12	replace
360	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  }  [FE]  NullPointerException  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	compilable	  [FE]  NullPointerException  	80	12	replace
361	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isUnknownType())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isUnknownType())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isUnknownType())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
362	[BUG]  [BUGGY]  if(!inlineAliasOnExternTypes)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasOnExternTypes)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasOnExternTypes)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
363	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	compilable	  [FE]  NullPointerException  	71	12	replace
364	[BUG]  [BUGGY]  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [FE]  NullPointerException  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	compilable	  [FE]  NullPointerException  	71	12	replace
365	[BUG]  [BUGGY]  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	&&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
366	[BUG]  [BUGGY]  ||  ref.scope.isUnknown())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.scope.isUnknown())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isUnknown())  {  if(inlineAliasIfPossible(ref,  namespace))  {  return;  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
367	[BUG]  [BUGGY]  name.addRef(ref,  ref);  [CE]  method  addRef  in  class  Name  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref,  ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref,  ref);	  name.addRef(ref);    Name.addRef(ref);    	non-compiled	[CE]  method  addRef  in  class  Name  cannot  be  applied  to  given  types;	27	None	replace
368	[BUG]  [BUGGY]  name.inlineAliasIfPossible(ref,  namespace,  ref.scope));  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.inlineAliasIfPossible(ref,  namespace,  ref.scope));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.inlineAliasIfPossible(ref,  namespace,  ref.scope));	  name.inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  ';'  expected	90	None	replace
369	[BUG]  [BUGGY]  name.inline(ref,  namespace));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.inline(ref,  namespace));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.inline(ref,  namespace));	  name.inlineAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  ';'  expected	90	None	replace
370	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
371	[BUG]  [BUGGY]  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	&&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
372	[BUG]  [BUGGY]  ||  ref.scope.isUnknown())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.scope.isUnknown())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isUnknown())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
373	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAlia  [CE]  ')'  expected  [FE]                          junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAlia  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(inlineAlia	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAlia    	non-compiled	[CE]  ')'  expected	32	None	replace
374	[BUG]  [BUGGY]  if(!inlineAliasOnExternTypes)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasOnExternTypes)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasOnExternTypes)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
375	[BUG]  [BUGGY]  if(!inlineAliasingGets)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasingGets)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasingGets)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
376	[BUG]  [BUGGY]  timeout  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	timeout	53	1	replace
377	[BUG]  [BUGGY]  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  timeout  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	timeout	53	1	replace
378	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.localSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.localSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.localSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
379	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal()  ||  name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
380	[BUG]  [BUGGY]  Name  name  =  refs.add(ref);  if(!name.hasRefs())  {  name.addRef(ref);  }  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  refs.add(ref);  if(!name.hasRefs())  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  refs.add(ref);  if(!name.hasRefs())  {  name.addRef(ref);  }	  name.addRef(ref);    if(!name.hasRefs())    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	28	None	replace
381	[BUG]  [BUGGY]  namespace.removeAlias(ref,  namespace);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  namespace.removeAlias(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	namespace.removeAlias(ref,  namespace);	  name.removeAlias(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
382	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace))  {	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
383	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace)	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  ')'  expected	44	None	replace
384	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  if(name.aliasingGets  >  0)  {  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  if(name.aliasingGets  >  0)  {  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  if(name.aliasingGets  >  0)  {  }	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
385	[BUG]  [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  if(!inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  Lists.newArrayList(name.getRefs());  if(!inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  Lists.newArrayList(name.getRefs());  if(!inlineAliasIfPossible(ref,  namespace))  {	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
386	[BUG]  [BUGGY]  MutableReference  <  Ref>  name  =  inlineAliasIfPossible(ref,  namespace);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  MutableReference  <  Ref>  name  =  inlineAliasIfPossible(ref,  namespace);  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	MutableReference  <  Ref>  name  =  inlineAliasIfPossible(ref,  namespace);	  if(ref.type!=    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
387	[BUG]  [BUGGY]  MutableReference  <  Ref>  name  =  inlineAliasIfPossible(ref,  namespace)?  null  :  ref.scope.getName();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  MutableReference  <  Ref>  name  =  inlineAliasIfPossible(ref,  namespace)?  null  :  ref.scope.getName();  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	MutableReference  <  Ref>  name  =  inlineAliasIfPossible(ref,  namespace)?  null  :  ref.scope.getName();	  if(ref.type!=    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
388	[BUG]  [BUGGY]  Name  name  =  inlineAliasIfPossible(ref,  namespace)?  null  :  ref.scope.getName();  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  inlineAliasIfPossible(ref,  namespace)?  null  :  ref.scope.getName();  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  inlineAliasIfPossible(ref,  namespace)?  null  :  ref.scope.getName();	  if(ref.type!=    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	58	None	replace
389	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ".);  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
390	[BUG]  [BUGGY]  MutableReference  <  Ref>  name  =  inlineAliasIfPossible(ref,  namespace)?  null  :  ref.scope.getRootReference();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  MutableReference  <  Ref>  name  =  inlineAliasIfPossible(ref,  namespace)?  null  :  ref.scope.getRootReference();  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	MutableReference  <  Ref>  name  =  inlineAliasIfPossible(ref,  namespace)?  null  :  ref.scope.getRootReference();	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
391	[BUG]  [BUGGY]  MutableReference  <  Ref>  name  =  inlineAliasIfPossible(ref,  namespace)&&  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  MutableReference  <  Ref>  name  =  inlineAliasIfPossible(ref,  namespace)&&  throw  new  IllegalStateException( " ");  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	MutableReference  <  Ref>  name  =  inlineAliasIfPossible(ref,  namespace)&&  throw  new  IllegalStateException( " ");	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
392	[BUG]  [BUGGY]  MutableReference  <  Ref>  name  =  inlineAlias(ref,  namespace);  [CE]  cannot  find  symbol  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  MutableReference  <  Ref>  name  =  inlineAlias(ref,  namespace);  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	MutableReference  <  Ref>  name  =  inlineAlias(ref,  namespace);	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
393	[BUG]  [BUGGY]  Name  name  =  inlineAliasAndPossible(ref,  namespace);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  inlineAliasAndPossible(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  inlineAliasAndPossible(ref,  namespace);	  name.addRef(ref);    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	97	None	replace
394	[BUG]  [BUGGY]  Name  name  =  inlineAliases(ref,  namespace);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]      NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  inlineAliases(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  inlineAliases(ref,  namespace);	  name.addRef(ref);    if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	97	None	replace
395	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace!=  name.removeRef(ref);  }  [CE]  ')'  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace!=  name.removeRef(ref);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace!=  name.removeRef(ref);  }	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    name    	non-compiled	[CE]  ')'  expected	2	None	replace
396	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  >=  name.removeRef(ref);  }  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  >=  name.removeRef(ref);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  >=  name.removeRef(ref);  }	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    name    	non-compiled	[CE]  ')'  expected	2	None	replace
397	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  >>  name.removeRef(ref);  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  >>  name.removeRef(ref);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  >>  name.removeRef(ref);  }	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    name    	non-compiled	[CE]  ')'  expected	2	None	replace
398	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAl  [CE]  ')'  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAl  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!inlineAl	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAli    	non-compiled	[CE]  ')'  expected	5	None	replace
399	[BUG]  [BUGGY]  name.setAliasingGets(inlineAliasIfPossible(ref,  namespace));  [CE]  cannot  find  symbol  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.setAliasingGets(inlineAliasIfPossible(ref,  namespace));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.setAliasingGets(inlineAliasIfPossible(ref,  namespace));	  name.setAliasingGets(namespace);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
400	[BUG]  [BUGGY]  timeout  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  return;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	compilable	timeout	72	1	replace
401	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  return;  }  timeout  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  return;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    return;    }    	compilable	timeout	72	1	replace
402	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    return;    }    	compilable	  [FE]  NullPointerException  	14	12	replace
403	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [FE]  NullPointerException  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,  namespace))  {  return;  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    return;    }    	compilable	  [FE]  NullPointerException  	14	12	replace
404	[BUG]  [BUGGY]  name.addAliasIfPossible(ref,  namespace,  inlineAliasOnExternTypes);  [CE]  cannot  find  symbol  inlineAliasOnExternTypes  [FE]        AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAliasIfPossible(ref,  namespace,  inlineAliasOnExternTypes);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAliasIfPossible(ref,  namespace,  inlineAliasOnExternTypes);	  name.addAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasOnExternTypes	10	None	replace
405	[BUG]  [BUGGY]  removeAliasIfPossible(ref,  namespace,  inlineAliases);  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  removeAliasIfPossible(ref,  namespace,  inlineAliases);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	removeAliasIfPossible(ref,  namespace,  inlineAliases);	  removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
406	[BUG]  [BUGGY]  removeAliasIfPossible(ref,  namespace,  inlineAliasOnExternTypes);  [CE]  cannot  find  symbol  inlineAliasOnExternTypes  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  removeAliasIfPossible(ref,  namespace,  inlineAliasOnExternTypes);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	removeAliasIfPossible(ref,  namespace,  inlineAliasOnExternTypes);	  removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasOnExternTypes	20	None	replace
407	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  continue;  }	  if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	  [FE]  NullPointerException  	85	12	replace
408	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  continue;  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,  namespace)&&  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  continue;  }	  if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	  [FE]  NullPointerException  	85	12	replace
409	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace)||  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(!inlineAliasIfPossible(ref,  namespace)||  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  continue;  }	  if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	  [FE]  NullPointerException  	85	12	replace
410	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace)||  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  continue;  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace)||  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,  namespace)||  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  continue;  }	  if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	  [FE]  NullPointerException  	85	12	replace
411	[BUG]  [BUGGY]  timeout  [FE]        NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(inlineAliasIfPossible(ref,  namespace)||  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(inlineAliasIfPossible(ref,  namespace)||  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  continue;  }	  if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	timeout	85	1	replace
412	[BUG]  [BUGGY]  if(inlineAliasIfPossible(ref,  namespace)||  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  continue;  }  timeout  [FE]        NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(inlineAliasIfPossible(ref,  namespace)||  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(inlineAliasIfPossible(ref,  namespace)||  ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  continue;  }	  if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	timeout	85	1	replace
413	[BUG]  [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(inlineAliasOnExternTypes)  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(inlineAliasOnExternTypes)  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    if(inlineAliasOnExternTypes)  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
414	[BUG]  [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(inlineAliasOnExternTypes)  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  }  [CE]  cannot  find  symbol  inlineAliasOnExternTypes  [FE]      NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  if(inlineAliasOnExternTypes)  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(inlineAliasIfPossible(ref,    namespace))    {    name.addRef(ref);    }    if(inlineAliasOnExternTypes)  {  name.addRef(ref);  if(inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  }	  	non-compiled	[CE]  cannot  find  symbol  inlineAliasOnExternTypes	96	None	add
415	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal()  ||  inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal()  ||  inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal()  ||  inlineAliasIfPossible(ref,  namespace))  {	  if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal()    ||    inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
416	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasesIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
417	[BUG]  [BUGGY]  Name  name  =  ref.namespace.removeAliasIfPossible(ref,  namespace);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.namespace.removeAliasIfPossible(ref,  namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.namespace.removeAliasIfPossible(ref,  namespace);	  Name    name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	56	None	replace
418	[BUG]  [BUGGY]  Name  name  =  ref.namespace.removeAliasIfPossible(ref);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.namespace.removeAliasIfPossible(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.namespace.removeAliasIfPossible(ref);	  Name    name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	56	None	replace
419	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  if(!inlineAliasesIfPossible(ref,  namespace))  {  continue;  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  continue;  }  if(!inlineAliasesIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,    namespace))    {    continue;    }    if(!inlineAliasesIfPossible(ref,  namespace))  {  continue;  }	  	non-compiled	[CE]  cannot  find  symbol	84	None	add
420	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(!inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  name.addRef(ref);    name.addRef(ref);    	compilable	timeout	25	1	replace
421	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  timeout  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,  namespace))  {  name.addRef(ref);  }	  name.addRef(ref);    name.addRef(ref);    	compilable	timeout	25	1	replace
422	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.type  ==  Type.ALIASING_GET)  {	  if(ref.type    ==    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
423	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ".);  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
424	[BUG]  [BUGGY]  if(inlineAliasesIfPossible(ref,  namespace))  {  return;  }  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(inlineAliasesIfPossible(ref,  namespace))  {  return;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(inlineAliasesIfPossible(ref,  namespace))  {  return;  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasesIfPossible(ref,    namespace))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
425	[BUG]  [BUGGY]  Name  name  =  ref.removeAlias(nameSpace);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.removeAlias(nameSpace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAlias(nameSpace);	  Name    name    =    ref.removeAlias(name);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	66	None	replace
426	[BUG]  [BUGGY]  timeout  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	compilable	timeout	51	1	replace
427	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  timeout  [FE]                        junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	compilable	timeout	51	1	replace
428	[BUG]  [BUGGY]  name.addAlias(ref.type);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAlias(ref.type);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(ref.type);	  name.addAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
429	[BUG]  [BUGGY]  name.addAliasIfPossible(ref,  namespace,  ref.scope));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAliasIfPossible(ref,  namespace,  ref.scope));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAliasIfPossible(ref,  namespace,  ref.scope));	  name.addAliasIfPossible(ref,    namespace));    	non-compiled	[CE]  ';'  expected	12	None	replace
430	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  Name  name  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.addRef(ref);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  Name  name  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  Name  name  =  Lists.newArrayList(name.getRefs());  for(Ref  ref  :  ref.namespace)  {  name.addRef(ref);  }	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    for(Ref    ref    :    ref.namespace)    {    name.addRef(ref);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
431	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ".);  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
432	[BUG]  [BUGGY]  Name  name  =  ref.removeAliasIfPossible(ref,  namespace,  inlineAliases);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.removeAliasIfPossible(ref,  namespace,  inlineAliases);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAliasIfPossible(ref,  namespace,  inlineAliases);	  Name    name    =    ref.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	88	None	replace
433	[BUG]  [BUGGY]  Name  name  =  ref.removeAliasIfPossible(ref,  namespace,  inlineAlias());  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.removeAliasIfPossible(ref,  namespace,  inlineAlias());  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAliasIfPossible(ref,  namespace,  inlineAlias());	  Name    name    =    ref.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	88	None	replace
434	[BUG]  [BUGGY]  if(inlineAliasesIfPossible(ref,  namespace))  {  continue;  }  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(inlineAliasesIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(inlineAliasesIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasesIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
435	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.name.aliasingGets  >  0)  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
436	[BUG]  [BUGGY]  Name  name  =  ref.namespace.removeAlias(namespace);  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.namespace.removeAlias(namespace);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.namespace.removeAlias(namespace);	  Name    name    =    ref.removeAlias(namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	95	None	replace
437	[BUG]  [BUGGY]  Name  name  =  ref.removeAlias(namespace,  inlineAliasIfPossible(ref,  namespace));  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  ref.removeAlias(namespace,  inlineAliasIfPossible(ref,  namespace));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  ref.removeAlias(namespace,  inlineAliasIfPossible(ref,  namespace));	  Name    name    =    ref.removeAlias(namespace);    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	95	None	replace
438	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  else  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  else  {  name.addRef(ref);  }	  name.addRef(ref);    Name    name.addRef(ref);    	compilable	timeout	26	1	replace
439	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  else  {  name.addRef(ref);  }  timeout  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  else  {  name.addRef(ref);  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  else  {  name.addRef(ref);  }	  name.addRef(ref);    Name    name.addRef(ref);    	compilable	timeout	26	1	replace
440	[BUG]  [BUGGY]  name.setAliasingGets(inlineAliasesIfPossible(ref,  namespace));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.setAliasingGets(inlineAliasesIfPossible(ref,  namespace));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.setAliasingGets(inlineAliasesIfPossible(ref,  namespace));	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    name.addRef(ref);    }    timeout    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
441	[BUG]  [BUGGY]  MutableReference  <  Ref>  name  =  inlineAliasIfPossible(ref,  namespace)?  null  :  ref.type;  [CE]  cannot  find  symbol  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  MutableReference  <  Ref>  name  =  inlineAliasIfPossible(ref,  namespace)?  null  :  ref.type;  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	MutableReference  <  Ref>  name  =  inlineAliasIfPossible(ref,  namespace)?  null  :  ref.type;	  if(ref.type!=    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
442	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {	  ||    ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
443	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAlias  ==  name.removeRef(ref);  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAlias  ==  name.removeRef(ref);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAlias  ==  name.removeRef(ref);  }	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAlias    	non-compiled	[CE]  ')'  expected	43	None	replace
444	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAlias  ==  name.removeRef(ref);  }  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAlias  ==  name.removeRef(ref);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAlias  ==  name.removeRef(ref);  }	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAlias    	non-compiled	[CE]  ')'  expected	43	None	replace
445	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if(inlineAliasIfPossible(ref,  namespace	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace)    	non-compiled	[CE]  ')'  expected	48	None	replace
446	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  if(name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if  [CE]  '('  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  if(name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  if(name.aliasingGets  >  0)  {  Name  name  =  Lists.newArrayList(name.getRefs());  if	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name    =    Lists.newArrayList(name.getRefs());    if(inlineAliasIfPossible(ref,    namespace)    	non-compiled	[CE]  '('  expected	48	None	replace
447	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef	  timeout    	non-compiled	[CE]  ';'  expected	98	None	add
448	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  &&  name.aliasingGets  >  0)  {	  timeout    	non-compiled	[CE]  illegal  start  of  expression	98	None	add
449	[BUG]  [BUGGY]  Name.removeAliasIfPossible(ref,  namespace,  inlineAliasOnExternTypes);  [CE]  cannot  find  symbol  inlineAliasOnExternTypes  [FE]            junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name.removeAliasIfPossible(ref,  namespace,  inlineAliasOnExternTypes);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name.removeAliasIfPossible(ref,  namespace,  inlineAliasOnExternTypes);	  Name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol  inlineAliasOnExternTypes	55	None	replace
450	[BUG]  [BUGGY]  Name.removeAliasIfPossible(ref,  namespace,  inlineAlias());  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name.removeAliasIfPossible(ref,  namespace,  inlineAlias());  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name.removeAliasIfPossible(ref,  namespace,  inlineAlias());	  Name.removeAliasIfPossible(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
451	[BUG]  [BUGGY]  name.setAliasingGets(ref,  namespace,  inlineAliasIfPossible(ref,  namespace));  [CE]  cannot  find  symbol  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.setAliasingGets(ref,  namespace,  inlineAliasIfPossible(ref,  namespace));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.setAliasingGets(ref,  namespace,  inlineAliasIfPossible(ref,  namespace));	  name.setAliasingGets(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
452	[BUG]  [BUGGY]  timeout  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	timeout	70	1	replace
453	[BUG]  [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  timeout  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	timeout	70	1	replace
454	[BUG]  [BUGGY]  timeout  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  throw  new  IllegalArgumentException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	timeout	70	1	replace
455	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  throw  new  IllegalArgumentException( " ");  }  timeout  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(!inlineAliasIfPossible(ref,  namespace))  throw  new  IllegalArgumentException( " ");  }	  if(ref.type!=    Type.ALIASING_GET)    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	timeout	70	1	replace
456	[BUG]  [BUGGY]  Iterator  <  Ref>  name  =  refs.iterator().next();  [CE]  cannot  find  symbol  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Iterator  <  Ref>  name  =  refs.iterator().next();  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Iterator  <  Ref>  name  =  refs.iterator().next();	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
457	[BUG]  [BUGGY]  Iterator  <  Ref>  name  =  refs.iterator();  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Iterator  <  Ref>  name  =  refs.iterator();  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Iterator  <  Ref>  name  =  refs.iterator();	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
458	[BUG]  [BUGGY]  Iterator  <  Ref>  namespace  =  refs.iterator();  [CE]  cannot  find  symbol  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Iterator  <  Ref>  namespace  =  refs.iterator();  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Iterator  <  Ref>  namespace  =  refs.iterator();	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
459	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(in!=  name.removeRef(ref);  }  [CE]  ')'  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(in!=  name.removeRef(ref);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(in!=  name.removeRef(ref);  }	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!in    	non-compiled	[CE]  ')'  expected	6	None	replace
460	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!in!=  name.removeRef(ref);  }  [CE]  ')'  expected  [FE]                      junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET)  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!in!=  name.removeRef(ref);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET)  {  if(name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {  if(!in!=  name.removeRef(ref);  }	  if(name.globalSets    ==    1    &&    name.localSets    ==    0    &&    name.aliasingGets    >    0)    {    if(ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!in    	non-compiled	[CE]  ')'  expected	6	None	replace
461	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  }	  	compilable	timeout	46	1	add
462	[BUG]  [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  }  timeout  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  }  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        if(ref.type    ==    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    name.addRef(ref);    }    if(ref.type  ==  Type.ALIASING_GET)  {  name.addRef(ref);  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  name.addRef(ref);  }  }	  	compilable	timeout	46	1	add
463	[BUG]  [BUGGY]  name.addRef(ref);    name.addRef(ref);  name.add(ref);  name.addRef(ref);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    name.addRef(ref);  name.add(ref);  name.addRef(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        name.addRef(ref);    name.add(ref);  name.addRef(ref);	  	non-compiled	[CE]  cannot  find  symbol	24	None	add
464	[BUG]  [BUGGY]  name.addRef(ref);    name.addRef(ref);  name.addName(ref);  name.addRef(ref);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addRef(ref);    name.addRef(ref);  name.addName(ref);  name.addRef(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addRef(ref);        name.addRef(ref);    name.addName(ref);  name.addRef(ref);	  	non-compiled	[CE]  cannot  find  symbol	24	None	add
465	[BUG]  [BUGGY]  Namespace  namespace  =  name.removeAlias(ref);  [CE]  cannot  find  symbol  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Namespace  namespace  =  name.removeAlias(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Namespace  namespace  =  name.removeAlias(ref);	  name.removeAlias(namespace);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
466	[BUG]  [BUGGY]  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	&&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
467	[BUG]  [BUGGY]  ||  ref.scope.isUnknown())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.scope.isUnknown())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.scope.isUnknown())  {  if(inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
468	[BUG]  [BUGGY]  if(!inlineAliasingGets)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(!inlineAliasingGets)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  Il  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(!inlineAliasingGets)  {  if(ref.type!=  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  Il	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	57	None	replace
469	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  ||  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalArgumentException( " ".);  }	  if(ref.type!=    Type.ALIASING_GET    ||    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
470	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]                    junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  throw  new  IllegalStateException( " ".);  }	  if(ref.type!=    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
471	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]              junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }	  ||    ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
472	[BUG]  [BUGGY]  &&  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  &&  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	&&  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace))  {  }	  ||    ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
473	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(inlineAliasIfPossible(ref,  namespace	  ||    ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
474	[BUG]  [BUGGY]  namespace.addAlias(ref);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  namespace.addAlias(ref);  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	namespace.addAlias(ref);	  name.addAlias(ref);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
475	[BUG]  [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  ||  ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	||  ref.type  ==  Type.ALIASING_GET  &&  name.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }	  ||    ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
476	[BUG]  [BUGGY]  &&  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [CE]  illegal  start  of  expression  [FE]                  junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  &&  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	&&  ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if(!inlineAliasIfPossible(ref,  namespace))  {  }	  ||    ref.type    ==    Type.ALIASING_GET    &&    ref.scope.isLocal())    {    if(!inlineAliasIfPossible(ref,    namespace))    {    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
477	[BUG]  [BUGGY]  timeout  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	add	if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	timeout	54	1	replace
478	[BUG]  [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  continue;  }  timeout  [FE]                junit.framework.AssertionFailedError:  Expected:  function  f(){return  function(){var  args=arguments;setTimeout(function(){alert(args)}      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  continue;  }  [BUGGY]      name.removeRef(ref);  }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	if(ref.type  ==  Type.ALIASING_GET  &&  inlineAliasIfPossible(ref,  namespace))  {  continue;  }	  if(ref.type    ==    Type.ALIASING_GET)    {    if(inlineAliasIfPossible(ref,    namespace))    {    continue;    }    	compilable	timeout	54	1	replace
479	[BUG]  [BUGGY]  name.addAlias(ref,  namespace,  inlineAliasIfPossible(ref,  namespace));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAlias(ref,  namespace,  inlineAliasIfPossible(ref,  namespace));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(ref,  namespace,  inlineAliasIfPossible(ref,  namespace));	  name.addAlias(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
480	[BUG]  [BUGGY]  name.addAlias(ref,  inlineAliasIfPossible(ref,  namespace));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAlias(ref,  inlineAliasIfPossible(ref,  namespace));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(ref,  inlineAliasIfPossible(ref,  namespace));	  name.addAlias(ref,    namespace);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
481	[BUG]  [BUGGY]  name.addAlias(ref,  namespace,  inlineAliasIfPossible(ref));  [CE]  method  inlineAliasIfPossible  in  class  CollapseProperties  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  name.addAlias(ref,  namespace,  inlineAliasIfPossible(ref));  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	name.addAlias(ref,  namespace,  inlineAliasIfPossible(ref));	  name.addAlias(ref,    namespace);    	non-compiled	[CE]  method  inlineAliasIfPossible  in  class  CollapseProperties  cannot  be  applied  to  given  types;	13	None	replace
482	[BUG]  [BUGGY]  Name  name  =  inlineAliasIfPossible(ref,  namespace)?  ref  :  ref;  [CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)  [FE]            AssertionFailedError      [CONTEXT]      if  (name.globalSets  ==  1  &&  name.localSets  ==  0  &&  name.aliasingGets  >  0)  {    List<Ref>  refs  =  Lists.newArrayList(name.getRefs());  for  (Ref  ref  :  refs)  {  if  (ref.type  ==  Type.ALIASING_GET  &&  ref.scope.isLocal())  {  if  (inlineAliasIfPossible(ref,  namespace))  {      [BUGGY]  Name  name  =  inlineAliasIfPossible(ref,  namespace)?  ref  :  ref;  [BUGGY]      }  }  }  }  [CLASS]  CollapseProperties  1  [METHOD]  inlineAliases  [RETURN_TYPE]  void  GlobalNamespace  namespace  [VARIABLES]  AbstractCompiler  compiler  Ref  ref  boolean  collapsePropertiesOnExternTypes  inlineAliases  DiagnosticType  NAMESPACE_REDEFINED_WARNING  UNSAFE_NAMESPACE_WARNING  UNSAFE_THIS  List  globalNames  refs  Map  nameMap  GlobalNamespace  namespace  Deque  workList  Name  name  	projects/Closure130/src/com/google/javascript/jscomp/CollapseProperties.java	0.2886751345948129	181	181	1	replace	Name  name  =  inlineAliasIfPossible(ref,  namespace)?  ref  :  ref;	  name.addRef(ref);    if(ref.type    ==    Type.ALIASING_GET    &&    name.aliasingGets    >    0)    {    Name    name.addRef(ref);    }    	non-compiled	[CE]  variable  name  is  already  defined  in  method  inlineAliases(GlobalNamespace)	100	None	replace
