bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  Flushable)out).closePath();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).closePath();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).closePath();	  ((    Flushable)out).closeFile();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	20	None	replace
2	[BUG]  [BUGGY]  ((  Flushable)out).closeFiles();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).closeFiles();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).closeFiles();	  ((    Flushable)out).closeFile();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	20	None	replace
3	[BUG]  [BUGGY]  ((  Flushable)out).seek(newRecord,  out,  0);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(newRecord,  out,  0);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(newRecord,  out,  0);	  ((    Flushable)out).seek(newRecord,    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	11	None	replace
4	[BUG]  [BUGGY]  ((  Flushable)out).seek(newRecord,  out,  format);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(newRecord,  out,  format);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(newRecord,  out,  format);	  ((    Flushable)out).seek(newRecord,    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	11	None	replace
5	[BUG]  [BUGGY]  ((  Flushable)out).seek(newRecord,  0);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(newRecord,  0);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(newRecord,  0);	  ((    Flushable)out).seek(newRecord,    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	11	None	replace
6	[BUG]  [BUGGY]  ((  Flushable)out).seek(newRecord,  out,  false);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(newRecord,  out,  false);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(newRecord,  out,  false);	  ((    Flushable)out).seek(newRecord,    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	11	None	replace
7	[BUG]  [BUGGY]  ((  Flushable)out).fill(new  Record(),  format);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(new  Record(),  format);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(new  Record(),  format);	  ((    Flushable)out).fill(new    Record(),    newRecord());    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	24	None	replace
8	[BUG]  [BUGGY]  ((  Flushable)out).fill(new  Record(),  this.newRecord());  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(new  Record(),  this.newRecord());  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(new  Record(),  this.newRecord());	  ((    Flushable)out).fill(new    Record(),    newRecord());    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	24	None	replace
9	[BUG]  [BUGGY]  ((  Flushable)out).fill(new  Record(),  out,  newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(new  Record(),  out,  newRecord);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(new  Record(),  out,  newRecord);	  ((    Flushable)out).fill(new    Record(),    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	14	None	replace
10	[BUG]  [BUGGY]  ((  Flushable)out).fill(new  Record(),  out,  this);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(new  Record(),  out,  this);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(new  Record(),  out,  this);	  ((    Flushable)out).fill(new    Record(),    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	14	None	replace
11	[BUG]  [BUGGY]  ((  Flushable)out).fill(new  Record(),  out,  false);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(new  Record(),  out,  false);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(new  Record(),  out,  false);	  ((    Flushable)out).fill(new    Record(),    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	14	None	replace
12	[BUG]  [BUGGY]  ((  Flushable)out).fill(record,  newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(record,  newRecord);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(record,  newRecord);	  ((    Flushable)out).fill(record);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	23	None	replace
13	[BUG]  [BUGGY]  ((  Flushable)out).fill(data);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(data);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(data);	  ((    Flushable)out).fill(record);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	23	None	replace
14	[BUG]  [BUGGY]  out  =(Flushable)out;  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  out  =(Flushable)out;  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	out  =(Flushable)out;	  if(out    instanceof    Flushable)    {    out    =(Flushable)out;    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
15	[BUG]  [BUGGY]  if(out  instanceof  Appendable)  {  out  =(Appendable)out;  }  else  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                          NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  if(out  instanceof  Appendable)  {  out  =(Appendable)out;  }  else  {  out.flush();  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(out  instanceof  Appendable)  {  out  =(Appendable)out;  }  else  {  out.flush();  }	  if(out    instanceof    Flushable)    {    out    =(Flushable)out;    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
16	[BUG]  [BUGGY]  if(out  instanceof  FilterOutput)  {  out  =(Flushable)out;  }  else  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  if(out  instanceof  FilterOutput)  {  out  =(Flushable)out;  }  else  {  out.flush();  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(out  instanceof  FilterOutput)  {  out  =(Flushable)out;  }  else  {  out.flush();  }	  if(out    instanceof    Flushable)    {    out    =(Flushable)out;    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
17	[BUG]  [BUGGY]  if(out  instanceof  Appendable)  {  out  =(Appendable)out;  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  if(out  instanceof  Appendable)  {  out  =(Appendable)out;  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(out  instanceof  Appendable)  {  out  =(Appendable)out;  }	  if(out    instanceof    Flushable)    {    out    =(Flushable)out;    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
18	[BUG]  [BUGGY]  if(out  instanceof  Flushable)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  if(out  instanceof  Flushable)  {  out.flush();  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(out  instanceof  Flushable)  {  out.flush();  }	  out.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
19	[BUG]  [BUGGY]  if(out  instanceof  Flushable)  {  out.flush();  }  else  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  if(out  instanceof  Flushable)  {  out.flush();  }  else  {  out.flush();  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(out  instanceof  Flushable)  {  out.flush();  }  else  {  out.flush();  }	  out.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
20	[BUG]  [BUGGY]  if(out  instanceof  Flushable)  {  out.flush();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  if(out  instanceof  Flushable)  {  out.flush();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(out  instanceof  Flushable)  {  out.flush();  }  else  {  throw  new  IllegalStateException( " ");  }	  out.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
21	[BUG]  [BUGGY]  ((  Flushable)out).seek(this.newRecord,  out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(this.newRecord,  out);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(this.newRecord,  out);	  ((    Flushable)out).seek(this.newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	22	None	replace
22	[BUG]  [BUGGY]  ((  Flushable)out).seek(this.newRecord,  this.format);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(this.newRecord,  this.format);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(this.newRecord,  this.format);	  ((    Flushable)out).seek(this.newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	22	None	replace
23	[BUG]  [BUGGY]  ((  Flushable)out).shutdownAll();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).shutdownAll();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).shutdownAll();	  ((    Flushable)out).shutdown();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	9	None	replace
24	[BUG]  [BUGGY]  sweep((  Flushable)out).flush();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  sweep((  Flushable)out).flush();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	sweep((  Flushable)out).flush();	  if(out    instanceof    Flushable)    {    ((    Flushable)out).flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
25	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().flush();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().flush();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	Thread.currentThread().getContextClassLoader().flush();	  if(out    instanceof    Flushable)    {    ((    Flushable)out).flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
26	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	Thread.currentThread().interrupt();	  if(out    instanceof    Flushable)    {    ((    Flushable)out).flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
27	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	Thread.currentThread().getContextClassLoader().reset();	  if(!(out    instanceof    Flushable))    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	19	None	replace
28	[BUG]  [BUGGY]  ((  Flushable)out).fill(format,  newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(format,  newRecord);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(format,  newRecord);	  ((    Flushable)out).fill(newRecord,    format);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	8	None	replace
29	[BUG]  [BUGGY]  ((  Flushable)out).fill(newRecord,  format,  out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(newRecord,  format,  out);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(newRecord,  format,  out);	  ((    Flushable)out).fill(newRecord,    format);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	8	None	replace
30	[BUG]  [BUGGY]  ((  Flushable)out).fill(newRecord,  format,  newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(newRecord,  format,  newRecord);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(newRecord,  format,  newRecord);	  ((    Flushable)out).fill(newRecord,    format);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	8	None	replace
31	[BUG]  [BUGGY]  ((  Flushable)out).fill(newRecord,  format,  file);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(newRecord,  format,  file);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(newRecord,  format,  file);	  ((    Flushable)out).fill(newRecord,    format);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	8	None	replace
32	[BUG]  [BUGGY]  ((  Flushable)out).seek(cSVFormat);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(cSVFormat);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(cSVFormat);	  ((    Flushable)out).seek(record);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	21	None	replace
33	[BUG]  [BUGGY]  ((  Flushable)out).seek(data);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(data);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(data);	  ((    Flushable)out).seek(record);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	21	None	replace
34	[BUG]  [BUGGY]  if(newRecord  ==  false)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  if(newRecord  ==  false)  {  out.flush();  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(newRecord  ==  false)  {  out.flush();  }	  if(newRecord)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	18	None	replace
35	[BUG]  [BUGGY]  if(newRecord!=  false)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  if(newRecord!=  false)  {  out.flush();  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(newRecord!=  false)  {  out.flush();  }	  if(newRecord)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	18	None	replace
36	[BUG]  [BUGGY]  ((  Flushable)out).fill(new  Record(),  file);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(new  Record(),  file);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(new  Record(),  file);	  ((    Flushable)out).fill(new    Record(),    newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	15	None	replace
37	[BUG]  [BUGGY]  ((  Flushable)out).fill(new  Record(),  newRecord,  format);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(new  Record(),  newRecord,  format);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(new  Record(),  newRecord,  format);	  ((    Flushable)out).fill(new    Record(),    newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	15	None	replace
38	[BUG]  [BUGGY]  ((  Flushable)out).printStackTrace();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).printStackTrace();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).printStackTrace();	  ((    Flushable)out).println();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	17	None	replace
39	[BUG]  [BUGGY]  ((  Flushable)out).print(this);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).print(this);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).print(this);	  ((    Flushable)out).println();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	17	None	replace
40	[BUG]  [BUGGY]  out  =(Function)out.clone();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  out  =(Function)out.clone();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	out  =(Function)out.clone();	  if(out    instanceof    Flushable)    {    ((    Flushable)out).flush();    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
41	[BUG]  [BUGGY]  ((  Flushable)out).flush();  }  else  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).flush();  }  else  {  out.flush();  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).flush();  }  else  {  out.flush();  }	  if(out    instanceof    Flushable)    {    ((    Flushable)out).flush();    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
42	[BUG]  [BUGGY]  out  =(Function)out).flush();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                          NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  out  =(Function)out).flush();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	out  =(Function)out).flush();	  if(out    instanceof    Flushable)    {    ((    Flushable)out).flush();    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
43	[BUG]  [BUGGY]  [Delete]  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  [Delete]  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	[Delete]	  if(!(out    instanceof    Flushable))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	25	None	replace
44	[BUG]  [BUGGY]  Parchet.checkState(!(out  instanceof  Flushable))  {  throw  new  IllegalStateException( " ");  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  Parchet.checkState(!(out  instanceof  Flushable))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	Parchet.checkState(!(out  instanceof  Flushable))  {  throw  new  IllegalStateException( " ");  }	  if(!(out    instanceof    Flushable))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	25	None	replace
45	[BUG]  [BUGGY]  Parchet.checkState(!(out  instanceof  Flushable))  throw  new  IllegalStateException( " ");  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  Parchet.checkState(!(out  instanceof  Flushable))  throw  new  IllegalStateException( " ");  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	Parchet.checkState(!(out  instanceof  Flushable))  throw  new  IllegalStateException( " ");	  if(!(out    instanceof    Flushable))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	25	None	replace
46	[BUG]  [BUGGY]  Parchet.checkState(!(out  instanceof  Filterable))  {  throw  new  IllegalStateException( " ");  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  Parchet.checkState(!(out  instanceof  Filterable))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	Parchet.checkState(!(out  instanceof  Filterable))  {  throw  new  IllegalStateException( " ");  }	  if(!(out    instanceof    Flushable))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	25	None	replace
47	[BUG]  [BUGGY]  ((  Flushable)out).fill(true);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(true);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(true);	  ((    Flushable)out).fill(false);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
48	[BUG]  [BUGGY]  ((  Flushable)out).fill(false,  out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(false,  out);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(false,  out);	  ((    Flushable)out).fill(false);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
49	[BUG]  [BUGGY]  ((  Flushable)out).fill(false,  true);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(false,  true);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(false,  true);	  ((    Flushable)out).fill(false);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
50	[BUG]  [BUGGY]  ((  Flushable)out).seekCSV(this.format);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seekCSV(this.format);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seekCSV(this.format);	  ((    Flushable)out).seek(this.format);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
51	[BUG]  [BUGGY]  ((  Flushable)out).seek(this.format,  this.record);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(this.format,  this.record);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(this.format,  this.record);	  ((    Flushable)out).seek(this.format);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
52	[BUG]  [BUGGY]  ((  Flushable)out).seek(this.format,  newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(this.format,  newRecord);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(this.format,  newRecord);	  ((    Flushable)out).seek(this.format);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
53	[BUG]  [BUGGY]  ((  Flushable)out).fill(cSVFormat,  out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(cSVFormat,  out);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(cSVFormat,  out);	  ((    Flushable)out).fill(newRecord,    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
54	[BUG]  [BUGGY]  ((  Flushable)out).fill(newRecord,  out,  format);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(newRecord,  out,  format);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(newRecord,  out,  format);	  ((    Flushable)out).fill(newRecord,    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
55	[BUG]  [BUGGY]  ((  Flushable)out).fill(newRecord,  out,  0);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(newRecord,  out,  0);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(newRecord,  out,  0);	  ((    Flushable)out).fill(newRecord,    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
56	[BUG]  [BUGGY]  ((  Flushable)out).fill(newRecord,  out,  this);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(newRecord,  out,  this);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(newRecord,  out,  this);	  ((    Flushable)out).fill(newRecord,    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
57	[BUG]  [BUGGY]  ((  Flushable)out).seek(true);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(true);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(true);	  ((    Flushable)out).seek(false);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	16	None	replace
58	[BUG]  [BUGGY]  ((  Flushable)out).seek(0);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(0);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(0);	  ((    Flushable)out).seek(false);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	16	None	replace
59	[BUG]  [BUGGY]  ((  Flushable)out).seek(false,  true);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(false,  true);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(false,  true);	  ((    Flushable)out).seek(false);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	16	None	replace
60	[BUG]  [BUGGY]  ((  Flushable)out).throwAsIOException();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).throwAsIOException();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).throwAsIOException();	  ((    Flushable)out).throwInternal();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	10	None	replace
61	[BUG]  [BUGGY]  ((  Flushable)out).throwException(newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).throwException(newRecord);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).throwException(newRecord);	  ((    Flushable)out).throwInternal();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	10	None	replace
62	[BUG]  [BUGGY]  ((  Flushable)out).seek(format,  newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(format,  newRecord);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(format,  newRecord);	  ((    Flushable)out).seek(newRecord,    format);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	13	None	replace
63	[BUG]  [BUGGY]  ((  Flushable)out).seek(newRecord,  format,  out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(newRecord,  format,  out);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(newRecord,  format,  out);	  ((    Flushable)out).seek(newRecord,    format);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	13	None	replace
64	[BUG]  [BUGGY]  ((  Flushable)out).seek(newRecord,  format,  newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(newRecord,  format,  newRecord);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(newRecord,  format,  newRecord);	  ((    Flushable)out).seek(newRecord,    format);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	13	None	replace
65	[BUG]  [BUGGY]  ((  Flushable)out).fill(cSVFormat,  newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(cSVFormat,  newRecord);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(cSVFormat,  newRecord);	  ((    Flushable)out).fill(cSVFormat);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	7	None	replace
66	[BUG]  [BUGGY]  ((  Flushable)out).fill(cSVFormat,  true);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(cSVFormat,  true);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(cSVFormat,  true);	  ((    Flushable)out).fill(cSVFormat);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	7	None	replace
67	[BUG]  [BUGGY]  ((  Flushable)out).fill(cSVFormat,  format);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(cSVFormat,  format);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(cSVFormat,  format);	  ((    Flushable)out).fill(cSVFormat);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	7	None	replace
68	[BUG]  [BUGGY]  ((  Flushable)out).print(newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).print(newRecord);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).print(newRecord);	  ((    Flushable)out).println();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	17	None	replace
69	[BUG]  [BUGGY]  ((  Flushable)out).fill(new  Record(),  out,  newRecord());  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(new  Record(),  out,  newRecord());  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(new  Record(),  out,  newRecord());	  ((    Flushable)out).fill(new    Record(),    newRecord());    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	24	None	replace
70	[BUG]  [BUGGY]  ((  Flushable)out).fill(cSVFormat,  newRecord,  out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(cSVFormat,  newRecord,  out);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(cSVFormat,  newRecord,  out);	  ((    Flushable)out).fill(newRecord,    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
71	[BUG]  [BUGGY]  ((  Flushable)out).seek(this.format,  out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(this.format,  out);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(this.format,  out);	  ((    Flushable)out).seek(this.format);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
72	[BUG]  [BUGGY]  ((  Flushable)out).fill(false,  newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(false,  newRecord);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(false,  newRecord);	  ((    Flushable)out).fill(false);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
73	[BUG]  [BUGGY]  OutputStream  out  =(OutputStream)out;  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  OutputStream  out  =(OutputStream)out;  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	OutputStream  out  =(OutputStream)out;	  if(out    instanceof    Flushable)    {    out    =(Flushable)out;    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
74	[BUG]  [BUGGY]  Appendable  out  =(Appendable)out;  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                          NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  Appendable  out  =(Appendable)out;  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	Appendable  out  =(Appendable)out;	  if(out    instanceof    Flushable)    {    out    =(Flushable)out;    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
75	[BUG]  [BUGGY]  OutputFilter  out  =(OutputFilter)out;  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  OutputFilter  out  =(OutputFilter)out;  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	OutputFilter  out  =(OutputFilter)out;	  if(out    instanceof    Flushable)    {    out    =(Flushable)out;    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
76	[BUG]  [BUGGY]  sweepTo(out,  false)  {  ((  Flushable)out).flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  sweepTo(out,  false)  {  ((  Flushable)out).flush();  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	sweepTo(out,  false)  {  ((  Flushable)out).flush();  }	  if(out    instanceof    Flushable)    {    ((    Flushable)out).flush();    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
77	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  OutputStream  out  =  getOutputStream();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	OutputStream  out  =  getOutputStream();	  if(!(out    instanceof    Flushable))    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	19	None	replace
78	[BUG]  [BUGGY]  OutputStream  out  =  this.format.getOutputStream();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  OutputStream  out  =  this.format.getOutputStream();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	OutputStream  out  =  this.format.getOutputStream();	  if(!(out    instanceof    Flushable))    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	19	None	replace
79	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(out);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	OutputStream  out  =  new  FileOutputStream(out);	  if(!(out    instanceof    Flushable))    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	19	None	replace
80	[BUG]  [BUGGY]  Thread.currentThread().intermediateThread();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  Thread.currentThread().intermediateThread();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	Thread.currentThread().intermediateThread();	  if(out    instanceof    Flushable)    {    ((    Flushable)out).flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
81	[BUG]  [BUGGY]  sweeper(newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  sweeper(newRecord);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	sweeper(newRecord);	  if(!(out    instanceof    Flushable))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	25	None	replace
82	[BUG]  [BUGGY]  sweepers(newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  sweepers(newRecord);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	sweepers(newRecord);	  if(!(out    instanceof    Flushable))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	25	None	replace
83	[BUG]  [BUGGY]  sweeper(newRecord)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  sweeper(newRecord)  {  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	sweeper(newRecord)  {	  if(!(out    instanceof    Flushable))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	25	None	replace
84	[BUG]  [BUGGY]  ((  Flushable)out).throwException( " ");  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).throwException( " ");  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).throwException( " ");	  ((    Flushable)out).throwInternal();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	10	None	replace
85	[BUG]  [BUGGY]  if(newRecord  ||  out!=  null)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  if(newRecord  ||  out!=  null)  {  out.flush();  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(newRecord  ||  out!=  null)  {  out.flush();  }	  if(newRecord)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	18	None	replace
86	[BUG]  [BUGGY]  ((  Flushable)out).closeInput();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).closeInput();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).closeInput();	  ((    Flushable)out).closeFile();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	20	None	replace
87	[BUG]  [BUGGY]  if(out  instanceof  Flushable)  {  out.flush();  }  else  {  System.err.println( "Failed  to  flush: "  +  out.getMessage());  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  if(out  instanceof  Flushable)  {  out.flush();  }  else  {  System.err.println( "Failed  to  flush: "  +  out.getMessage());  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(out  instanceof  Flushable)  {  out.flush();  }  else  {  System.err.println( "Failed  to  flush: "  +  out.getMessage());  }	  out.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
88	[BUG]  [BUGGY]  if(out  instanceof  Flushable)  {  out.flush();  }  else  {  System.err.println( "Failed  to  flush: "  +  out.toString());  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  if(out  instanceof  Flushable)  {  out.flush();  }  else  {  System.err.println( "Failed  to  flush: "  +  out.toString());  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(out  instanceof  Flushable)  {  out.flush();  }  else  {  System.err.println( "Failed  to  flush: "  +  out.toString());  }	  out.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
89	[BUG]  [BUGGY]  ((  Flushable)out).seek(this.newRecord,  0);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(this.newRecord,  0);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(this.newRecord,  0);	  ((    Flushable)out).seek(this.newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	22	None	replace
90	[BUG]  [BUGGY]  ((  Flushable)out).fill(new  Record(),  record);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(new  Record(),  record);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(new  Record(),  record);	  ((    Flushable)out).fill(new    Record(),    newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	15	None	replace
91	[BUG]  [BUGGY]  ==  [Delete]  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ==  [Delete]  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	==  [Delete]	  if(!(out    instanceof    Flushable))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	25	None	replace
92	[BUG]  [BUGGY]  >>  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  >>  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	>>	  if(!(out    instanceof    Flushable))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	25	None	replace
93	[BUG]  [BUGGY]  >>  [Delete]  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  >>  [Delete]  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	>>  [Delete]	  if(!(out    instanceof    Flushable))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	25	None	replace
94	[BUG]  [BUGGY]  {  ((  Flushable)out).flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  {  ((  Flushable)out).flush();  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	{  ((  Flushable)out).flush();  }	  if(out    instanceof    Flushable)    {    ((    Flushable)out).flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
95	[BUG]  [BUGGY]  {  ((  Flushable)out).flush();  }  else  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  {  ((  Flushable)out).flush();  }  else  {  out.flush();  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	{  ((  Flushable)out).flush();  }  else  {  out.flush();  }	  if(out    instanceof    Flushable)    {    ((    Flushable)out).flush();    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
96	[BUG]  [BUGGY]  {  ((  Flushable)out).flush();  }  else  {  out.close();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  {  ((  Flushable)out).flush();  }  else  {  out.close();  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	{  ((  Flushable)out).flush();  }  else  {  out.close();  }	  if(out    instanceof    Flushable)    {    ((    Flushable)out).flush();    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
97	[BUG]  [BUGGY]  ((  Flushable)out).fill(cvsFormat);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(cvsFormat);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(cvsFormat);	  ((    Flushable)out).fill(record);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	23	None	replace
98	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(System.getProperty( "file.separator "));  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(System.getProperty( "file.separator "));  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	OutputStream  out  =  new  FileOutputStream(System.getProperty( "file.separator "));	  if(!(out    instanceof    Flushable))    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	19	None	replace
99	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(System.getProperty( "line.separator "));  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(System.getProperty( "line.separator "));  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	OutputStream  out  =  new  FileOutputStream(System.getProperty( "line.separator "));	  if(!(out    instanceof    Flushable))    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	19	None	replace
100	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(System.getProperty( "user.home "));  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(System.getProperty( "user.home "));  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	OutputStream  out  =  new  FileOutputStream(System.getProperty( "user.home "));	  if(!(out    instanceof    Flushable))    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	19	None	replace
101	[BUG]  [BUGGY]  if(out  instanceof  Appendable)  {  out  =(Appendable)out;  }  else  {  out.close();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  if(out  instanceof  Appendable)  {  out  =(Appendable)out;  }  else  {  out.close();  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(out  instanceof  Appendable)  {  out  =(Appendable)out;  }  else  {  out.close();  }	  if(out    instanceof    Flushable)    {    out    =(Flushable)out;    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
102	[BUG]  [BUGGY]  ((  Flushable)out).seek(this.newRecord,  format);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(this.newRecord,  format);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(this.newRecord,  format);	  ((    Flushable)out).seek(this.newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	22	None	replace
103	[BUG]  [BUGGY]  ((  Flushable)out).seek(newRecord,  out,  true);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(newRecord,  out,  true);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(newRecord,  out,  true);	  ((    Flushable)out).seek(newRecord,    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	11	None	replace
104	[BUG]  [BUGGY]  ((  Flushable)out).throwCodeChange();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).throwCodeChange();  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).throwCodeChange();	  ((    Flushable)out).throwInternal();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	10	None	replace
105	[BUG]  [BUGGY]  ((  Flushable)out).seek(false,  out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(false,  out);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(false,  out);	  ((    Flushable)out).seek(false);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	16	None	replace
106	[BUG]  [BUGGY]  if(out  instanceof  Flushable)  {  out.flush();  }  else  {  out.close();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  if(out  instanceof  Flushable)  {  out.flush();  }  else  {  out.close();  }  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(out  instanceof  Flushable)  {  out.flush();  }  else  {  out.close();  }	  out.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
107	[BUG]  [BUGGY]  ((  Flushable)out).seek(this.format,  this.newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).seek(this.format,  this.newRecord);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(this.format,  this.newRecord);	  ((    Flushable)out).seek(this.format);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
108	[BUG]  [BUGGY]  ((  Flushable)out).fill(newRecord,  out,  false);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(newRecord,  out,  false);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(newRecord,  out,  false);	  ((    Flushable)out).fill(newRecord,    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
109	[BUG]  [BUGGY]  ((  Flushable)out).fill(new  Record(),  this);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {      [BUGGY]  ((  Flushable)out).fill(new  Record(),  this);  [BUGGY]      }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(new  Record(),  this);	  ((    Flushable)out).fill(new    Record(),    newRecord());    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	24	None	replace
