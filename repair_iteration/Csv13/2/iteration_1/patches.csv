bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  Flushable)out).fill(false);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]        NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).fill(false);  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(false);	  ((    Flushable)out).flip();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
2	[BUG]  [BUGGY]  out.flush();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  out.flush();  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	out.flush();	      	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
3	[BUG]  [BUGGY]  if(out  instanceof  Flushable)  {  ((  Flushable)out).flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  if(out  instanceof  Flushable)  {  ((  Flushable)out).flush();  }  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(out  instanceof  Flushable)  {  ((  Flushable)out).flush();  }	      	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
4	[BUG]  [BUGGY]  if(out  instanceof  Flushable)  {  ((  Flushable)out).flush();  }  else  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  if(out  instanceof  Flushable)  {  ((  Flushable)out).flush();  }  else  {  out.flush();  }  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(out  instanceof  Flushable)  {  ((  Flushable)out).flush();  }  else  {  out.flush();  }	      	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
5	[BUG]  [BUGGY]  if(out  instanceof  Flushable)  {  out  =(Flushable)out;  }  else  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  if(out  instanceof  Flushable)  {  out  =(Flushable)out;  }  else  {  out.flush();  }  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(out  instanceof  Flushable)  {  out  =(Flushable)out;  }  else  {  out.flush();  }	      	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
6	[BUG]  [BUGGY]  ((  Flushable)out).fill(newRecord,  out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]          NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).fill(newRecord,  out);  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(newRecord,  out);	  ((    Flushable)out).fill(newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
7	[BUG]  [BUGGY]  ((  Flushable)out).fill(cSVFormat);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).fill(cSVFormat);  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(cSVFormat);	  ((    Flushable)out).fill(newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
8	[BUG]  [BUGGY]  ((  Flushable)out).fill(newRecord,  format);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).fill(newRecord,  format);  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(newRecord,  format);	  ((    Flushable)out).fill(newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
9	[BUG]  [BUGGY]  ((  Flushable)out).shutdown();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]        NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).shutdown();  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).shutdown();	  ((    Flushable)out).close();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
10	[BUG]  [BUGGY]  ((  Flushable)out).throwInternal();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]          NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).throwInternal();  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).throwInternal();	  ((    Flushable)out).close();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
11	[BUG]  [BUGGY]  ((  Flushable)out).seek(newRecord,  out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).seek(newRecord,  out);  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(newRecord,  out);	  ((    Flushable)out).seek(newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
12	[BUG]  [BUGGY]  ((  Flushable)out).seek(this.format);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).seek(this.format);  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(this.format);	  ((    Flushable)out).seek(newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
13	[BUG]  [BUGGY]  ((  Flushable)out).seek(newRecord,  format);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).seek(newRecord,  format);  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(newRecord,  format);	  ((    Flushable)out).seek(newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
14	[BUG]  [BUGGY]  ((  Flushable)out).fill(new  Record(),  out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]          NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).fill(new  Record(),  out);  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(new  Record(),  out);	  ((    Flushable)out).fill(new    Record());    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
15	[BUG]  [BUGGY]  ((  Flushable)out).fill(new  Record(),  newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).fill(new  Record(),  newRecord);  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(new  Record(),  newRecord);	  ((    Flushable)out).fill(new    Record());    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
16	[BUG]  [BUGGY]  ((  Flushable)out).seek(false);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).seek(false);  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(false);	  ((    Flushable)out).seek(newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
17	[BUG]  [BUGGY]  ((  Flushable)out).println();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]        NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).println();  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).println();	  ((    Flushable)out).flip();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
18	[BUG]  [BUGGY]  if(newRecord)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  if(newRecord)  {  out.flush();  }  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(newRecord)  {  out.flush();  }	      	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
19	[BUG]  [BUGGY]  if(!(out  instanceof  Flushable))  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  if(!(out  instanceof  Flushable))  {  out.flush();  }  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(!(out  instanceof  Flushable))  {  out.flush();  }	      	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
20	[BUG]  [BUGGY]  ((  Flushable)out).closeFile();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]        NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).closeFile();  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).closeFile();	  ((    Flushable)out).close();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
21	[BUG]  [BUGGY]  ((  Flushable)out).seek(record);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).seek(record);  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(record);	  ((    Flushable)out).seek(newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
22	[BUG]  [BUGGY]  ((  Flushable)out).seek(this.newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).seek(this.newRecord);  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).seek(this.newRecord);	  ((    Flushable)out).seek(newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
23	[BUG]  [BUGGY]  ((  Flushable)out).fill(record);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]          NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).fill(record);  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(record);	  ((    Flushable)out).fill(newRecord);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
24	[BUG]  [BUGGY]  ((  Flushable)out).fill(new  Record(),  newRecord());  [CE]  validate()  has  private  access  in  CSVFormat  [FE]          NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  ((  Flushable)out).fill(new  Record(),  newRecord());  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	((  Flushable)out).fill(new  Record(),  newRecord());	  ((    Flushable)out).fill(new    Record());    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
25	[BUG]  [BUGGY]  if(!(out  instanceof  Flushable))  {  throw  new  IllegalStateException( " ");  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {    [BUGGY]  if(!(out  instanceof  Flushable))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	101	101	10	replace	if(!(out  instanceof  Flushable))  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
