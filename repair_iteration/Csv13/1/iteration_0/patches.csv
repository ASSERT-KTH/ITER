bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(out  instanceof  Filterable)  {  [CE]  cannot  find  symbol  [FE]    NoClassDefFoundError  [CONTEXT]  public  void  flush()  throws  IOException  {  [BUGGY]  if(out  instanceof  Filterable)  {  [BUGGY]  ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Filterable)  {	if  (out  instanceof  Flushable)  {  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
2	[BUG]  [BUGGY]  if(out  instanceof  Flushable  <  =  0)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]      NoClassDefFoundError  [CONTEXT]  public  void  flush()  throws  IOException  {  [BUGGY]  if(out  instanceof  Flushable  <  =  0)  {  [BUGGY]  ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Flushable  <  =  0)  {	if  (out  instanceof  Flushable)  {  	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
3	[BUG]  [BUGGY]  if(out  instanceof  FilterOutput)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]        NoClassDefFoundError  [CONTEXT]  public  void  flush()  throws  IOException  {  [BUGGY]  if(out  instanceof  FilterOutput)  {  [BUGGY]  ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  FilterOutput)  {	if  (out  instanceof  Flushable)  {  	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
4	[BUG]  [BUGGY]    [CE]  validate()  has  private  access  in  CSVFormat  [FE]          NoClassDefFoundError  [CONTEXT]  public  void  flush()  throws  IOException  {  [BUGGY]    [BUGGY]  ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	  	if  (out  instanceof  Flushable)  {  	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
5	[BUG]  [BUGGY]  if(out  instanceof  File)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]    NoClassDefFoundError  [CONTEXT]  public  void  flush()  throws  IOException  {  [BUGGY]  if(out  instanceof  File)  {  [BUGGY]  ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  File)  {	if  (out  instanceof  Flushable)  {  	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
6	[BUG]  [BUGGY]  if(out  instanceof  Flushable  <  NoClassDefFoundError)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]    NoClassDefFoundError  [CONTEXT]  public  void  flush()  throws  IOException  {  [BUGGY]  if(out  instanceof  Flushable  <  NoClassDefFoundError)  {  [BUGGY]  ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Flushable  <  NoClassDefFoundError)  {	if  (out  instanceof  Flushable)  {  	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
