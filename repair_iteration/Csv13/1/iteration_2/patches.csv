bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(newRecord)  {  for(Flushable  out  :  out.values())  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(newRecord)  {  for(Flushable  out  :  out.values())  {  out.flush();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(newRecord)  {  for(Flushable  out  :  out.values())  {  out.flush();  }	  if(out!=    null)    {    for(Flushable    out    :    out.values())    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	17	None	replace
2	[BUG]  [BUGGY]  if(out!=  null)  {  for(Flushable  out  :  out.values())  {  out.close();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out!=  null)  {  for(Flushable  out  :  out.values())  {  out.close();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out!=  null)  {  for(Flushable  out  :  out.values())  {  out.close();  }	  if(out!=    null)    {    for(Flushable    out    :    out.values())    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	17	None	replace
3	[BUG]  [BUGGY]  if(newRecord)  {  out.flush();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(newRecord)  {  out.flush();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(newRecord)  {  out.flush();  }  else  {  throw  new  IllegalStateException( " ");  }	  out.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	18	None	replace
4	[BUG]  [BUGGY]  if(out  instanceof  FilterOutput  <  =  NoClassDefFoundError)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  FilterOutput  <  =  NoClassDefFoundError)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  FilterOutput  <  =  NoClassDefFoundError)  {	  if(out    instanceof    FilterOutput    <    NoClassDefFoundError)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	24	None	replace
5	[BUG]  [BUGGY]  if(out  instanceof  FilterOutput  <  NoClassDefFoundError  ||  out  instanceof  Fillable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  FilterOutput  <  NoClassDefFoundError  ||  out  instanceof  Fillable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  FilterOutput  <  NoClassDefFoundError  ||  out  instanceof  Fillable)  {	  if(out    instanceof    FilterOutput    <    NoClassDefFoundError)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	24	None	replace
6	[BUG]  [BUGGY]  if(out  instanceof  FilterOutput  >=  NoClassDefFoundError)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  FilterOutput  >=  NoClassDefFoundError)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  FilterOutput  >=  NoClassDefFoundError)  {	  if(out    instanceof    FilterOutput    <    NoClassDefFoundError)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	24	None	replace
7	[BUG]  [BUGGY]  if(out  instanceof  Fillable  <  =  NoClassDefFoundError)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  <  =  NoClassDefFoundError)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  <  =  NoClassDefFoundError)  {	  if(out    instanceof    Flushable    <    =    NoClassDefFoundError)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	7	None	replace
8	[BUG]  [BUGGY]  if(out  instanceof  Flushable!=  NoClassDefFoundError)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Flushable!=  NoClassDefFoundError)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Flushable!=  NoClassDefFoundError)  {	  if(out    instanceof    Flushable    <    =    NoClassDefFoundError)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	7	None	replace
9	[BUG]  [BUGGY]  if(out  instanceof  Fillable  <  Flushable>)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  <  Flushable>)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  <  Flushable>)  {	  if(out    instanceof    Fillable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
10	[BUG]  [BUGGY]  if(out  instanceof  Fastable  <  NoClassDefFoundError)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fastable  <  NoClassDefFoundError)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fastable  <  NoClassDefFoundError)  {	  if(out    instanceof    Fastable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	9	None	replace
11	[BUG]  [BUGGY]  if(out  instanceof  Fastable  ||  out  instanceof  Fastable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fastable  ||  out  instanceof  Fastable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fastable  ||  out  instanceof  Fastable)  {	  if(out    instanceof    Fastable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	9	None	replace
12	[BUG]  [BUGGY]  if(newRecord  ==  null)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(newRecord  ==  null)  {  out.flush();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(newRecord  ==  null)  {  out.flush();  }	  if(out!=    null)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
13	[BUG]  [BUGGY]  if(out  instanceof  Fillable  ==  NoClassDefFoundError)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  ==  NoClassDefFoundError)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  ==  NoClassDefFoundError)  {	  if(out    instanceof    Flushable    ==    NoClassDefFoundError)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	16	None	replace
14	[BUG]  [BUGGY]  if(out  instanceof  Filterable  ==  NoClassDefFoundError)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Filterable  ==  NoClassDefFoundError)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Filterable  ==  NoClassDefFoundError)  {	  if(out    instanceof    Flushable    ==    NoClassDefFoundError)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	16	None	replace
15	[BUG]  [BUGGY]  if(out  instanceof  Filterable  &&  out  instanceof  Filterable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Filterable  &&  out  instanceof  Filterable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Filterable  &&  out  instanceof  Filterable)  {	  if(out    instanceof    Filterable    ||    out    instanceof    Filterable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	20	None	replace
16	[BUG]  [BUGGY]  if(out  instanceof  Fillable  ||  out  instanceof  Filterable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  ||  out  instanceof  Filterable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  ||  out  instanceof  Filterable)  {	  if(out    instanceof    Filterable    ||    out    instanceof    Filterable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	20	None	replace
17	[BUG]  [BUGGY]  if(out  instanceof  Throwable  ||  out  instanceof  Filterable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Throwable  ||  out  instanceof  Filterable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Throwable  ||  out  instanceof  Filterable)  {	  if(out    instanceof    Filterable    ||    out    instanceof    Filterable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	20	None	replace
18	[BUG]  [BUGGY]  if(out  instanceof  Flushable  &&  out  instanceof  Filterable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Flushable  &&  out  instanceof  Filterable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Flushable  &&  out  instanceof  Filterable)  {	  if(out    instanceof    Filterable    ||    out    instanceof    Filterable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	20	None	replace
19	[BUG]  [BUGGY]  if(newRecord!=  false)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(newRecord!=  false)  {  out.flush();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(newRecord!=  false)  {  out.flush();  }	  if(newRecord)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
20	[BUG]  [BUGGY]  if(out  instanceof  Filterable  <  NoClassDefFoundError  ||  out  instanceof  Fillable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Filterable  <  NoClassDefFoundError  ||  out  instanceof  Fillable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Filterable  <  NoClassDefFoundError  ||  out  instanceof  Fillable)  {	  if(out    instanceof    Filterable    <    NoClassDefFoundError)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	8	None	replace
21	[BUG]  [BUGGY]  if(out  instanceof  Filterable  &&  out  instanceof  FileOutputStream)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Filterable  &&  out  instanceof  FileOutputStream)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Filterable  &&  out  instanceof  FileOutputStream)  {	  if(out    instanceof    Filterable    ||    out    instanceof    FileOutputStream)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	21	None	replace
22	[BUG]  [BUGGY]  if(out  instanceof  Fillable  ||  out  instanceof  FileOutputStream)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  ||  out  instanceof  FileOutputStream)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  ||  out  instanceof  FileOutputStream)  {	  if(out    instanceof    Filterable    ||    out    instanceof    FileOutputStream)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	21	None	replace
23	[BUG]  [BUGGY]  if(out  instanceof  Flushable  &&  out  instanceof  FileOutputStream)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Flushable  &&  out  instanceof  FileOutputStream)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Flushable  &&  out  instanceof  FileOutputStream)  {	  if(out    instanceof    Filterable    ||    out    instanceof    FileOutputStream)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	21	None	replace
24	[BUG]  [BUGGY]  if(out  instanceof  FileOutputStream  ||  out  instanceof  Filterable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  FileOutputStream  ||  out  instanceof  Filterable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  FileOutputStream  ||  out  instanceof  Filterable)  {	  if(out    instanceof    Filterable    ||    out    instanceof    FileOutputStream)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	21	None	replace
25	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(this.format!=  null)  {  this.format.flush();  }	  this.format.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	23	None	replace
26	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  else  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  else  {  out.flush();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(this.format!=  null)  {  this.format.flush();  }  else  {  out.flush();  }	  this.format.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	23	None	replace
27	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(this.format!=  null)  {  this.format.flush();  }  else  {  throw  new  IllegalStateException( " ");  }	  this.format.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	23	None	replace
28	[BUG]  [BUGGY]  if(out  instanceof  FilterOutput  ||  newRecord)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  FilterOutput  ||  newRecord)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  FilterOutput  ||  newRecord)  {	  if(out    instanceof    FilterOutput    &&    newRecord)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	15	None	replace
29	[BUG]  [BUGGY]  if(out  instanceof  FilterOutput  &&  newRecord  ==  false)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  FilterOutput  &&  newRecord  ==  false)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  FilterOutput  &&  newRecord  ==  false)  {	  if(out    instanceof    FilterOutput    &&    newRecord)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	15	None	replace
30	[BUG]  [BUGGY]  if(out  instanceof  FilterOutput  &&  newRecord!=  false)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  FilterOutput  &&  newRecord!=  false)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  FilterOutput  &&  newRecord!=  false)  {	  if(out    instanceof    FilterOutput    &&    newRecord)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	15	None	replace
31	[BUG]  [BUGGY]  if(out  instanceof  FilterOutput  &&  newRecord!=  null)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  FilterOutput  &&  newRecord!=  null)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  FilterOutput  &&  newRecord!=  null)  {	  if(out    instanceof    FilterOutput    &&    newRecord)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	15	None	replace
32	[BUG]  [BUGGY]  if(out  instanceof  FileOutputStream  <  NoClassDefFoundError  ||  out  instanceof  Flushable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  FileOutputStream  <  NoClassDefFoundError  ||  out  instanceof  Flushable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  FileOutputStream  <  NoClassDefFoundError  ||  out  instanceof  Flushable)  {	  if(out    instanceof    Flushable    <    NoClassDefFoundError    ||    out    instanceof    FileOutputStream)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	22	None	replace
33	[BUG]  [BUGGY]  if(out  instanceof  Fillable  <  NoClassDefFoundError  ||  out  instanceof  FileOutputStream)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  <  NoClassDefFoundError  ||  out  instanceof  FileOutputStream)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  <  NoClassDefFoundError  ||  out  instanceof  FileOutputStream)  {	  if(out    instanceof    Flushable    <    NoClassDefFoundError    ||    out    instanceof    FileOutputStream)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	22	None	replace
34	[BUG]  [BUGGY]  if(out  instanceof  Flushable  <  NoClassDefFoundError  &&  out  instanceof  FileOutputStream)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Flushable  <  NoClassDefFoundError  &&  out  instanceof  FileOutputStream)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Flushable  <  NoClassDefFoundError  &&  out  instanceof  FileOutputStream)  {	  if(out    instanceof    Flushable    <    NoClassDefFoundError    ||    out    instanceof    FileOutputStream)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	22	None	replace
35	[BUG]  [BUGGY]  if(out  instanceof  Filterable  ==  0)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Filterable  ==  0)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Filterable  ==  0)  {	  if(out    instanceof    Flushable!=    0)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	14	None	replace
36	[BUG]  [BUGGY]  if(out  instanceof  Fillable!=  0)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable!=  0)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable!=  0)  {	  if(out    instanceof    Flushable!=    0)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	14	None	replace
37	[BUG]  [BUGGY]  appendable.close();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  appendable.close();  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	appendable.close();	  appendable.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
38	[BUG]  [BUGGY]  appendable.clear();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                          NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  appendable.clear();  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	appendable.clear();	  appendable.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
39	[BUG]  [BUGGY]  Appendable  out  =  getAppendable();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  Appendable  out  =  getAppendable();  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	Appendable  out  =  getAppendable();	  appendable.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
40	[BUG]  [BUGGY]  if(out  instanceof  Filterable  &&  out  instanceof  Flushable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Filterable  &&  out  instanceof  Flushable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Filterable  &&  out  instanceof  Flushable)  {	  if(out    instanceof    Filterable    ||    out    instanceof    Flushable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	19	None	replace
41	[BUG]  [BUGGY]  if(out  instanceof  Flushable  ||  out  instanceof  Filterable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Flushable  ||  out  instanceof  Filterable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Flushable  ||  out  instanceof  Filterable)  {	  if(out    instanceof    Filterable    ||    out    instanceof    Flushable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	19	None	replace
42	[BUG]  [BUGGY]  if(out  instanceof  Fillable  ||  out  instanceof  Flushable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  ||  out  instanceof  Flushable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  ||  out  instanceof  Flushable)  {	  if(out    instanceof    Filterable    ||    out    instanceof    Flushable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	19	None	replace
43	[BUG]  [BUGGY]  if(out  instanceof  Fillable  <?>)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  <?>)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  <?>)  {	  if(out    instanceof    Filterable    <?>)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	13	None	replace
44	[BUG]  [BUGGY]  if(out  instanceof  Flushable  <?>)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Flushable  <?>)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Flushable  <?>)  {	  if(out    instanceof    Filterable    <?>)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	13	None	replace
45	[BUG]  [BUGGY]  if(out  instanceof  Throwable  <?>)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Throwable  <?>)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Throwable  <?>)  {	  if(out    instanceof    Filterable    <?>)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	13	None	replace
46	[BUG]  [BUGGY]  if(out  instanceof  Fillable  >=  NoClassDefFoundError)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  >=  NoClassDefFoundError)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  >=  NoClassDefFoundError)  {	  if(out    instanceof    Fillable    <    NoClassDefFoundError)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
47	[BUG]  [BUGGY]  ((  Flushable)out).close();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  ((  Flushable)out).close();  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	((  Flushable)out).close();	  ((    Flushable)out).flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
48	[BUG]  [BUGGY]  ((  Flushable)in).flush();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  ((  Flushable)in).flush();  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	((  Flushable)in).flush();	  ((    Flushable)out).flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
49	[BUG]  [BUGGY]  ((  Flushable)out).flip();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  ((  Flushable)out).flip();  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	((  Flushable)out).flip();	  ((    Flushable)out).flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
50	[BUG]  [BUGGY]  if(out  instanceof  Filterable  &&  out  instanceof  Fillable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Filterable  &&  out  instanceof  Fillable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Filterable  &&  out  instanceof  Fillable)  {	  if(out    instanceof    Filterable    ||    out    instanceof    Fillable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
51	[BUG]  [BUGGY]  if(out  instanceof  Fillable  &&  out  instanceof  Filterable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  &&  out  instanceof  Filterable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  &&  out  instanceof  Filterable)  {	  if(out    instanceof    Filterable    ||    out    instanceof    Fillable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
52	[BUG]  [BUGGY]  if(out  instanceof  Fillable  ==  0)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  ==  0)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  ==  0)  {	  if(out    instanceof    Fillable    <    =    0)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	11	None	replace
53	[BUG]  [BUGGY]  if(out  instanceof  Fillable  >=  0)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  >=  0)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  >=  0)  {	  if(out    instanceof    Fillable    <    =    0)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	11	None	replace
54	[BUG]  [BUGGY]  if(out  instanceof  Fillable  <  =  0  ||  out  instanceof  Fillable  <  =  0)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  <  =  0  ||  out  instanceof  Fillable  <  =  0)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  <  =  0  ||  out  instanceof  Fillable  <  =  0)  {	  if(out    instanceof    Fillable    <    =    0)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	11	None	replace
55	[BUG]  [BUGGY]  if(out  instanceof  Filterable  {  0)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Filterable  {  0)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Filterable  {  0)  {	  if(out    instanceof    Flushable    ==    0)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	10	None	replace
56	[BUG]  [BUGGY]  if(out  instanceof  Flushable  ==  false)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Flushable  ==  false)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Flushable  ==  false)  {	  if(out    instanceof    Flushable    ==    0)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	10	None	replace
57	[BUG]  [BUGGY]  if(out  instanceof  FileOutputStream)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  FileOutputStream)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  FileOutputStream)  {	  if(out    instanceof    Flushable    ==    0)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	10	None	replace
58	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  else  {  System.err.println( "Failed  to  flush: "  +  this.format.getName());  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  else  {  System.err.println( "Failed  to  flush: "  +  this.format.getName());  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(this.format!=  null)  {  this.format.flush();  }  else  {  System.err.println( "Failed  to  flush: "  +  this.format.getName());  }	  this.format.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	23	None	replace
59	[BUG]  [BUGGY]  if(out  instanceof  Fastable  <?>)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fastable  <?>)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fastable  <?>)  {	  if(out    instanceof    Filterable    <?>)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	13	None	replace
60	[BUG]  [BUGGY]  if(out  instanceof  FileOutputStream  <  NoClassDefFoundError  ||  out  instanceof  FileOutputStream)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  FileOutputStream  <  NoClassDefFoundError  ||  out  instanceof  FileOutputStream)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  FileOutputStream  <  NoClassDefFoundError  ||  out  instanceof  FileOutputStream)  {	  if(out    instanceof    Flushable    <    NoClassDefFoundError    ||    out    instanceof    FileOutputStream)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	22	None	replace
61	[BUG]  [BUGGY]  if(out  ==  null)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  ==  null)  {  out.flush();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  ==  null)  {  out.flush();  }	  if(out!=    null)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
62	[BUG]  [BUGGY]  if(out  instanceof  Flushable  ||  out  instanceof  Fillable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Flushable  ||  out  instanceof  Fillable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Flushable  ||  out  instanceof  Fillable)  {	  if(out    instanceof    Filterable    ||    out    instanceof    Fillable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
63	[BUG]  [BUGGY]  if(out  instanceof  FilterOutput  &&  newRecord  <  =  File.separator)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  FilterOutput  &&  newRecord  <  =  File.separator)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  FilterOutput  &&  newRecord  <  =  File.separator)  {	  if(out    instanceof    FilterOutput    &&    newRecord)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	15	None	replace
64	[BUG]  [BUGGY]  if(out  instanceof  Fastable  ||  out  instanceof  Fillable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fastable  ||  out  instanceof  Fillable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fastable  ||  out  instanceof  Fillable)  {	  if(out    instanceof    Fastable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	9	None	replace
65	[BUG]  [BUGGY]  for(Flushable  out  :  out.values())  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  for(Flushable  out  :  out.values())  {  out.flush();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	for(Flushable  out  :  out.values())  {  out.flush();  }	  if(out!=    null)    {    for(Flushable    out    :    out.values())    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	17	None	replace
66	[BUG]  [BUGGY]  if(newRecord)  {  out.close();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(newRecord)  {  out.close();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(newRecord)  {  out.close();  }	  if(newRecord)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
67	[BUG]  [BUGGY]  if(out!=  null)  {  appendable.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out!=  null)  {  appendable.flush();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out!=  null)  {  appendable.flush();  }	  appendable.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
68	[BUG]  [BUGGY]  if(out!=  null)  {  appendable.flush();  }  else  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                          NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out!=  null)  {  appendable.flush();  }  else  {  out.flush();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out!=  null)  {  appendable.flush();  }  else  {  out.flush();  }	  appendable.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
69	[BUG]  [BUGGY]  if(out  instanceof  Fillable  >)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  >)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  >)  {	  if(out    instanceof    Fillable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
70	[BUG]  [BUGGY]  out.close();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  out.close();  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	out.close();	  out.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	18	None	replace
71	[BUG]  [BUGGY]  if(out  instanceof  Filterable  <  NoClassDefFoundError  ||  out  instanceof  Filterable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Filterable  <  NoClassDefFoundError  ||  out  instanceof  Filterable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Filterable  <  NoClassDefFoundError  ||  out  instanceof  Filterable)  {	  if(out    instanceof    Filterable    <    NoClassDefFoundError)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	8	None	replace
72	[BUG]  [BUGGY]  if(out  instanceof  Fillable  <  NoClassDefFoundError  ||  out  instanceof  Fillable  <  NoClassDefFoundError)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  <  NoClassDefFoundError  ||  out  instanceof  Fillable  <  NoClassDefFoundError)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  <  NoClassDefFoundError  ||  out  instanceof  Fillable  <  NoClassDefFoundError)  {	  if(out    instanceof    Fillable    <    NoClassDefFoundError)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
73	[BUG]  [BUGGY]  if(out  instanceof  FilterOutput  &&  newRecord  >  0)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  FilterOutput  &&  newRecord  >  0)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  FilterOutput  &&  newRecord  >  0)  {	  if(out    instanceof    FilterOutput    &&    newRecord)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	15	None	replace
74	[BUG]  [BUGGY]  if(out  instanceof  Fillable  <  NoClassDefFoundError  ||  out  instanceof  Filterable)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  <  NoClassDefFoundError  ||  out  instanceof  Filterable)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  <  NoClassDefFoundError  ||  out  instanceof  Filterable)  {	  if(out    instanceof    Fillable    <    NoClassDefFoundError)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
75	[BUG]  [BUGGY]  ((  File)out).flush();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  ((  File)out).flush();  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	((  File)out).flush();	  if(out!=    null)    {    for(Flushable    out    :    out.values())    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	17	None	replace
76	[BUG]  [BUGGY]  this.appendable.flush();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  this.appendable.flush();  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	this.appendable.flush();	  appendable.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
77	[BUG]  [BUGGY]  Appendable  out  =  getFormat().flush();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                          NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  Appendable  out  =  getFormat().flush();  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	Appendable  out  =  getFormat().flush();	  appendable.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
78	[BUG]  [BUGGY]  if(out  instanceof  Fillable!=  false)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable!=  false)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable!=  false)  {	  if(out    instanceof    Fillable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
79	[BUG]  [BUGGY]  if(out  instanceof  Filterable  ||  out  instanceof  Class  <?>)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Filterable  ||  out  instanceof  Class  <?>)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Filterable  ||  out  instanceof  Class  <?>)  {	  if(out    instanceof    Filterable    ||    out    instanceof    Flushable)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	19	None	replace
80	[BUG]  [BUGGY]  if(out  instanceof  Filterable  {  NoClassDefFoundError)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Filterable  {  NoClassDefFoundError)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Filterable  {  NoClassDefFoundError)  {	  if(out    instanceof    Flushable    ==    NoClassDefFoundError)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	16	None	replace
81	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  else  {  for(int  i  =  0;  i  <  this.format.size();  ++i)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  else  {  for(int  i  =  0;  i  <  this.format.size();  ++i)  {  out.flush();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(this.format!=  null)  {  this.format.flush();  }  else  {  for(int  i  =  0;  i  <  this.format.size();  ++i)  {  out.flush();  }	  this.format.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	23	None	replace
82	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  else  {  for(int  i  =  0;  i  <  this.format.size();  ++i)  {  out.close();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  else  {  for(int  i  =  0;  i  <  this.format.size();  ++i)  {  out.close();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(this.format!=  null)  {  this.format.flush();  }  else  {  for(int  i  =  0;  i  <  this.format.size();  ++i)  {  out.close();  }	  this.format.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	23	None	replace
83	[BUG]  [BUGGY]  if(out  instanceof  FilterOutput  <  NoClassDefFoundError  ||  out  instanceof  FilterOutput  >=  false)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  FilterOutput  <  NoClassDefFoundError  ||  out  instanceof  FilterOutput  >=  false)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  FilterOutput  <  NoClassDefFoundError  ||  out  instanceof  FilterOutput  >=  false)  {	  if(out    instanceof    FilterOutput    <    NoClassDefFoundError)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	24	None	replace
84	[BUG]  [BUGGY]  if(out  instanceof  Fillable  <  0)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Fillable  <  0)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Fillable  <  0)  {	  if(out    instanceof    Fillable    <    =    0)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	11	None	replace
85	[BUG]  [BUGGY]  if(newRecord!=  null)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(newRecord!=  null)  {  out.flush();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(newRecord!=  null)  {  out.flush();  }	  if(newRecord)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
86	[BUG]  [BUGGY]  if(newRecord  ==  false)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(newRecord  ==  false)  {  out.flush();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(newRecord  ==  false)  {  out.flush();  }	  if(newRecord)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
87	[BUG]  [BUGGY]  if(out  instanceof  Filterable  <?>  &&  out  instanceof  Filterable  <?>)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Filterable  <?>  &&  out  instanceof  Filterable  <?>)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Filterable  <?>  &&  out  instanceof  Filterable  <?>)  {	  if(out    instanceof    Filterable    <?>)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	13	None	replace
88	[BUG]  [BUGGY]  if(out  instanceof  Flushable  ==  NoClassDefFoundError  ||  out  instanceof  FileOutputStream)  {  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out  instanceof  Flushable  ==  NoClassDefFoundError  ||  out  instanceof  FileOutputStream)  {  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out  instanceof  Flushable  ==  NoClassDefFoundError  ||  out  instanceof  FileOutputStream)  {	  if(out    instanceof    Flushable    <    NoClassDefFoundError    ||    out    instanceof    FileOutputStream)    {    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	22	None	replace
89	[BUG]  [BUGGY]  if(out!=  null)  {  out.flush();  }  else  {  out.flush();  }  [CE]  illegal  start  of  expression  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {      [BUGGY]  if(out!=  null)  {  out.flush();  }  else  {  out.flush();  }  [BUGGY]      ((Flushable)  out).flush();  }  }  [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	100	100	10	replace	if(out!=  null)  {  out.flush();  }  else  {  out.flush();  }	  out.flush();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
