bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(newRecord!=  false)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  if(newRecord!=  false)  {  out.flush();  }  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(newRecord!=  false)  {  out.flush();  }	  if(newRecord)    {    out.flush();    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
2	[BUG]  [BUGGY]  if(newRecord  ==  false)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  if(newRecord  ==  false)  {  out.flush();  }  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(newRecord  ==  false)  {  out.flush();  }	  if(newRecord)    {    out.flush();    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
3	[BUG]  [BUGGY]  if(newRecord!=  null)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  if(newRecord!=  null)  {  out.flush();  }  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(newRecord!=  null)  {  out.flush();  }	  if(newRecord)    {    out.flush();    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
4	[BUG]  [BUGGY]  out.flush();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  out.flush();  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	out.flush();	  if(newRecord)    {    out.flush();    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
5	[BUG]  [BUGGY]  if(newRecord)  {  out.flush();  }  else  {  System.err.println( "Failed  to  flush: "+out.getMessage());  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  if(newRecord)  {  out.flush();  }  else  {  System.err.println( "Failed  to  flush: "+out.getMessage());  }  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(newRecord)  {  out.flush();  }  else  {  System.err.println( "Failed  to  flush: "+out.getMessage());  }	      	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
6	[BUG]  [BUGGY]  System.err.println( "Failed  to  flush: "  +  out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]        NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  System.err.println( "Failed  to  flush: "  +  out);  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	System.err.println( "Failed  to  flush: "  +  out);	  if(newRecord)    {    out.flush();    }    else    {    System.err.println(   "Failed    to    flush:   "    +    out);    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
7	[BUG]  [BUGGY]  safeMultiply(out,  newRecord)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]          NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  safeMultiply(out,  newRecord)  {  out.flush();  }  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	safeMultiply(out,  newRecord)  {  out.flush();  }	  if(newRecord)    {    out.flush();    }    else    {    System.err.println(   "Failed    to    flush:   "    +    out);    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
8	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]          NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(this.format!=  null)  {  this.format.flush();  }	  this.format.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
9	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  else  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  else  {  out.flush();  }  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(this.format!=  null)  {  this.format.flush();  }  else  {  out.flush();  }	  this.format.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
10	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  if(this.format!=  null)  {  this.format.flush();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(this.format!=  null)  {  this.format.flush();  }  else  {  throw  new  IllegalStateException( " ");  }	  this.format.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
11	[BUG]  [BUGGY]  this.format.flush(out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]          NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  this.format.flush(out);  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	this.format.flush(out);	  this.format.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
12	[BUG]  [BUGGY]  this.format.close();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  this.format.close();  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	this.format.close();	  this.format.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
13	[BUG]  [BUGGY]  System.err.println( "Found  to  flush: "  +  out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]        NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  System.err.println( "Found  to  flush: "  +  out);  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	System.err.println( "Found  to  flush: "  +  out);	  if(newRecord)    {    out.flush();    }    else    {    System.err.println(   "Failed    to    flush:   "    +    out);    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
14	[BUG]  [BUGGY]  if(newRecord)  {  out.flush();  }  else  {  System.err.println( "Failed  to  flush: "+out.getClass().getName());  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  if(newRecord)  {  out.flush();  }  else  {  System.err.println( "Failed  to  flush: "+out.getClass().getName());  }  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(newRecord)  {  out.flush();  }  else  {  System.err.println( "Failed  to  flush: "+out.getClass().getName());  }	      	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
15	[BUG]  [BUGGY]  if(newRecord)  {  out.close();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]        NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  if(newRecord)  {  out.close();  }  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(newRecord)  {  out.close();  }	  if(newRecord)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
16	[BUG]  [BUGGY]  ((  Record)out).flush();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]          NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  ((  Record)out).flush();  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	((  Record)out).flush();	  if(newRecord)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	1	None	replace
17	[BUG]  [BUGGY]  if(out  instanceof  CSVFormat)  {  this.format.flush();  }  else  {  ((  CSVFormat)out).flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]          NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  if(out  instanceof  CSVFormat)  {  this.format.flush();  }  else  {  ((  CSVFormat)out).flush();  }  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(out  instanceof  CSVFormat)  {  this.format.flush();  }  else  {  ((  CSVFormat)out).flush();  }	  this.format.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
18	[BUG]  [BUGGY]  if(out  instanceof  CSVFormat)  {  this.format.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  if(out  instanceof  CSVFormat)  {  this.format.flush();  }  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(out  instanceof  CSVFormat)  {  this.format.flush();  }	  this.format.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
19	[BUG]  [BUGGY]  if(out  instanceof  CSVFormat)  {  this.format.flush();  }  else  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError    [CONTEXT]    public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }    [BUGGY]  if(out  instanceof  CSVFormat)  {  this.format.flush();  }  else  {  out.flush();  }  [BUGGY]      [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(out  instanceof  CSVFormat)  {  this.format.flush();  }  else  {  out.flush();  }	  this.format.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	2	None	replace
