bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  System.err.println( "Failed  to  flush: "+out.getClass().getName());  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  System.err.println( "Failed  to  flush: "+out.getClass().getName());  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	System.err.println( "Failed  to  flush: "+out.getClass().getName());	  if(newRecord)    {    out.flush();    }    else    {    System.err.println(   "Failed    to    flush:   "+out.getClass().getName());    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	14	None	replace
2	[BUG]  [BUGGY]  out.close();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  out.close();  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	out.close();	  if(newRecord)    {    out.close();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	15	None	replace
3	[BUG]  [BUGGY]  if(newRecord!=  false)  {  out.close();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(newRecord!=  false)  {  out.close();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(newRecord!=  false)  {  out.close();  }	  if(newRecord)    {    out.close();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	15	None	replace
4	[BUG]  [BUGGY]  if(newRecord  ==  false)  {  out.close();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(newRecord  ==  false)  {  out.close();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(newRecord  ==  false)  {  out.close();  }	  if(newRecord)    {    out.close();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	15	None	replace
5	[BUG]  [BUGGY]  this.format.flush(out,  newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  this.format.flush(out,  newRecord);  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	this.format.flush(out,  newRecord);	  this.format.flush(out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	11	None	replace
6	[BUG]  [BUGGY]  this.format.flush(newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  this.format.flush(newRecord);  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	this.format.flush(newRecord);	  this.format.flush(out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	11	None	replace
7	[BUG]  [BUGGY]  System.err.println( "Found  to  flush: "  +  out,  newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  System.err.println( "Found  to  flush: "  +  out,  newRecord);  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	System.err.println( "Found  to  flush: "  +  out,  newRecord);	  System.err.println(   "Found    to    flush:   "    +    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	13	None	replace
8	[BUG]  [BUGGY]  System.err.println( "Found  to  flush: "  +  out.toString());  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  System.err.println( "Found  to  flush: "  +  out.toString());  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	System.err.println( "Found  to  flush: "  +  out.toString());	  System.err.println(   "Found    to    flush:   "    +    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	13	None	replace
9	[BUG]  [BUGGY]  System.err.println( "Found  to  flush: "  +  out.getMessage());  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  System.err.println( "Found  to  flush: "  +  out.getMessage());  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	System.err.println( "Found  to  flush: "  +  out.getMessage());	  System.err.println(   "Found    to    flush:   "    +    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	13	None	replace
10	[BUG]  [BUGGY]  if(out  instanceof  CSVFormat!=  false)  {  this.format.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(out  instanceof  CSVFormat!=  false)  {  this.format.flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(out  instanceof  CSVFormat!=  false)  {  this.format.flush();  }	  if(out    instanceof    CSVFormat)    {    this.format.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	18	None	replace
11	[BUG]  [BUGGY]  if(out  instanceof  CSVFormat  ==  false)  {  this.format.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(out  instanceof  CSVFormat  ==  false)  {  this.format.flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(out  instanceof  CSVFormat  ==  false)  {  this.format.flush();  }	  if(out    instanceof    CSVFormat)    {    this.format.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	18	None	replace
12	[BUG]  [BUGGY]  if(newRecord)  {  if(this.format!=  null)  {  this.format.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(newRecord)  {  if(this.format!=  null)  {  this.format.flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(newRecord)  {  if(this.format!=  null)  {  this.format.flush();  }	  if(this.format!=    null)    {    this.format.flush();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	10	None	replace
13	[BUG]  [BUGGY]  System.err.println( "Failed  to  flush: "+out.getMessage());  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  System.err.println( "Failed  to  flush: "+out.getMessage());  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	System.err.println( "Failed  to  flush: "+out.getMessage());	  if(newRecord)    {    out.flush();    }    else    {    System.err.println(   "Failed    to    flush:   "+out.getMessage());    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	5	None	replace
14	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.close();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(this.format!=  null)  {  this.format.close();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(this.format!=  null)  {  this.format.close();  }	  this.format.close();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
15	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.close();  }  else  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(this.format!=  null)  {  this.format.close();  }  else  {  out.flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(this.format!=  null)  {  this.format.close();  }  else  {  out.flush();  }	  this.format.close();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
16	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(this.format!=  null)  {  this.format.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(this.format!=  null)  {  this.format.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  this.format.close();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
17	[BUG]  [BUGGY]  if(newRecord)  {  if(out  instanceof  CSVFormat)  {  this.format.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(newRecord)  {  if(out  instanceof  CSVFormat)  {  this.format.flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(newRecord)  {  if(out  instanceof  CSVFormat)  {  this.format.flush();  }	  if(out    instanceof    CSVFormat)    {    this.format.flush();    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	19	None	replace
18	[BUG]  [BUGGY]  if(this.format!=  null)  {  if(out  instanceof  CSVFormat)  {  this.format.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(this.format!=  null)  {  if(out  instanceof  CSVFormat)  {  this.format.flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(this.format!=  null)  {  if(out  instanceof  CSVFormat)  {  this.format.flush();  }	  if(out    instanceof    CSVFormat)    {    this.format.flush();    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	19	None	replace
19	[BUG]  [BUGGY]  ((  CSVFormat)out).flush();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  ((  CSVFormat)out).flush();  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	((  CSVFormat)out).flush();	  if(out    instanceof    CSVFormat)    {    this.format.flush();    }    else    {    ((    CSVFormat)out).flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	17	None	replace
20	[BUG]  [BUGGY]  System.err.println( "Failed  to  flush: "  +  out,  newRecord);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  System.err.println( "Failed  to  flush: "  +  out,  newRecord);  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	System.err.println( "Failed  to  flush: "  +  out,  newRecord);	  System.err.println(   "Failed    to    flush:   "    +    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
21	[BUG]  [BUGGY]  System.err.println( "Failed  to  flush: "  +  out.toString());  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  System.err.println( "Failed  to  flush: "  +  out.toString());  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	System.err.println( "Failed  to  flush: "  +  out.toString());	  System.err.println(   "Failed    to    flush:   "    +    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
22	[BUG]  [BUGGY]  if(newRecord  ==  null)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                    NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(newRecord  ==  null)  {  out.flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(newRecord  ==  null)  {  out.flush();  }	  if(newRecord!=    null)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
23	[BUG]  [BUGGY]  if(out!=  null)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(out!=  null)  {  out.flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(out!=  null)  {  out.flush();  }	  if(newRecord!=    null)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	3	None	replace
24	[BUG]  [BUGGY]  if(out  instanceof  Appendable)  {  out.flush();  }  else  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(out  instanceof  Appendable)  {  out.flush();  }  else  {  out.flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(out  instanceof  Appendable)  {  out.flush();  }  else  {  out.flush();  }	  out.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
25	[BUG]  [BUGGY]  if(out  instanceof  Appendable)  {  out.flush();  }  else  {  out.close();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                        NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(out  instanceof  Appendable)  {  out.flush();  }  else  {  out.close();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(out  instanceof  Appendable)  {  out.flush();  }  else  {  out.close();  }	  out.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
26	[BUG]  [BUGGY]  ((  Record)out).close();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  ((  Record)out).close();  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	((  Record)out).close();	  ((    Record)out).flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	16	None	replace
27	[BUG]  [BUGGY]  ((  Record)in).flush();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  ((  Record)in).flush();  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	((  Record)in).flush();	  ((    Record)out).flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	16	None	replace
28	[BUG]  [BUGGY]  (this.format!=  null)?  this.format.flush()  :  null;  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  (this.format!=  null)?  this.format.flush()  :  null;  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	(this.format!=  null)?  this.format.flush()  :  null;	  if(this.format!=    null)    {    this.format.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	8	None	replace
29	[BUG]  [BUGGY]  safeMultiply(out,  newRecord)  {  out.close();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  safeMultiply(out,  newRecord)  {  out.close();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	safeMultiply(out,  newRecord)  {  out.close();  }	  safeMultiply(out,    newRecord)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	7	None	replace
30	[BUG]  [BUGGY]  flush(out,  newRecord)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  flush(out,  newRecord)  {  out.flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	flush(out,  newRecord)  {  out.flush();  }	  safeMultiply(out,    newRecord)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	7	None	replace
31	[BUG]  [BUGGY]  ((  Record)out).write('n');  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  ((  Record)out).write('n');  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	((  Record)out).write('n');	  ((    Record)out).flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	16	None	replace
32	[BUG]  [BUGGY]  if(out  instanceof  CSVPrinter)  {  this.format.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(out  instanceof  CSVPrinter)  {  this.format.flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(out  instanceof  CSVPrinter)  {  this.format.flush();  }	  if(out    instanceof    CSVFormat)    {    this.format.flush();    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	19	None	replace
33	[BUG]  [BUGGY]  System.err.println( "Found  to  flush: "  +  out).toString();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  System.err.println( "Found  to  flush: "  +  out).toString();  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	System.err.println( "Found  to  flush: "  +  out).toString();	  System.err.println(   "Found    to    flush:   "    +    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	13	None	replace
34	[BUG]  [BUGGY]  if(out!=  null)  {  out.flush();  }  else  {  System.err.println( "Failed  to  flush: "  +  out);  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                      NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(out!=  null)  {  out.flush();  }  else  {  System.err.println( "Failed  to  flush: "  +  out);  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(out!=  null)  {  out.flush();  }  else  {  System.err.println( "Failed  to  flush: "  +  out);  }	  out.flush();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	4	None	replace
35	[BUG]  [BUGGY]  if(out!=  null)  {  this.format.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(out!=  null)  {  this.format.flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(out!=  null)  {  this.format.flush();  }	  if(this.format!=    null)    {    this.format.flush();    }    else    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	9	None	replace
36	[BUG]  [BUGGY]  this.format.flush(out,  out);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  this.format.flush(out,  out);  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	this.format.flush(out,  out);	  this.format.flush(out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	11	None	replace
37	[BUG]  [BUGGY]  safeMultiply(out,  out)  {  out.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  safeMultiply(out,  out)  {  out.flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	safeMultiply(out,  out)  {  out.flush();  }	  safeMultiply(out,    newRecord)    {    out.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	7	None	replace
38	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.close();  }  else  {  System.err.println( "Failed  to  flush: "  +  out);  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(this.format!=  null)  {  this.format.close();  }  else  {  System.err.println( "Failed  to  flush: "  +  out);  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(this.format!=  null)  {  this.format.close();  }  else  {  System.err.println( "Failed  to  flush: "  +  out);  }	  this.format.close();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
39	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.close();  }  else  {  System.err.println( "Unable  to  flush: "  +  out);  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(this.format!=  null)  {  this.format.close();  }  else  {  System.err.println( "Unable  to  flush: "  +  out);  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(this.format!=  null)  {  this.format.close();  }  else  {  System.err.println( "Unable  to  flush: "  +  out);  }	  this.format.close();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
40	[BUG]  [BUGGY]  (this.format!=  null)?  this.format.flush()  :  out;  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  (this.format!=  null)?  this.format.flush()  :  out;  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	(this.format!=  null)?  this.format.flush()  :  out;	  if(this.format!=    null)    {    this.format.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	8	None	replace
41	[BUG]  [BUGGY]  System.err.println( "Failed  to  flush: "  +  out,  e);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  System.err.println( "Failed  to  flush: "  +  out,  e);  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	System.err.println( "Failed  to  flush: "  +  out,  e);	  System.err.println(   "Failed    to    flush:   "    +    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
42	[BUG]  [BUGGY]  if(out!=  null)  {  this.format.flush();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(out!=  null)  {  this.format.flush();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(out!=  null)  {  this.format.flush();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(this.format!=    null)    {    this.format.flush();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	10	None	replace
43	[BUG]  [BUGGY]  System.err.println( "Found  to  flush: "  +  out).println();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  System.err.println( "Found  to  flush: "  +  out).println();  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	System.err.println( "Found  to  flush: "  +  out).println();	  System.err.println(   "Found    to    flush:   "    +    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	13	None	replace
44	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.close();  }  else  {  for(int  i  =  0;  i  <  out.size();  ++i)  {  ((  CSVFormat)out).flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(this.format!=  null)  {  this.format.close();  }  else  {  for(int  i  =  0;  i  <  out.size();  ++i)  {  ((  CSVFormat)out).flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(this.format!=  null)  {  this.format.close();  }  else  {  for(int  i  =  0;  i  <  out.size();  ++i)  {  ((  CSVFormat)out).flush();  }	  this.format.close();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
45	[BUG]  [BUGGY]  if(this.format!=  null)  {  this.format.close();  }  else  {  for(int  i  =  0;  i  <  out.size();  ++i)  {  ((  CSVFormat)out).close();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(this.format!=  null)  {  this.format.close();  }  else  {  for(int  i  =  0;  i  <  out.size();  ++i)  {  ((  CSVFormat)out).close();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(this.format!=  null)  {  this.format.close();  }  else  {  for(int  i  =  0;  i  <  out.size();  ++i)  {  ((  CSVFormat)out).close();  }	  this.format.close();    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	12	None	replace
46	[BUG]  [BUGGY]  if(out  instanceof  CSVFormat)  {  ((  CSVFormat)out).flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(out  instanceof  CSVFormat)  {  ((  CSVFormat)out).flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(out  instanceof  CSVFormat)  {  ((  CSVFormat)out).flush();  }	  if(out    instanceof    CSVFormat)    {    this.format.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	18	None	replace
47	[BUG]  [BUGGY]  if(out  instanceof  CSVFormat  {  ((  CSVFormat)out).length()  >  this.format.length())  {  this.format.flush();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                  NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(out  instanceof  CSVFormat  {  ((  CSVFormat)out).length()  >  this.format.length())  {  this.format.flush();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(out  instanceof  CSVFormat  {  ((  CSVFormat)out).length()  >  this.format.length())  {  this.format.flush();  }	  if(out    instanceof    CSVFormat)    {    this.format.flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	18	None	replace
48	[BUG]  [BUGGY]  System.err.println( "Failed  to  flush: "  +  out).println();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  System.err.println( "Failed  to  flush: "  +  out).println();  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	System.err.println( "Failed  to  flush: "  +  out).println();	  System.err.println(   "Failed    to    flush:   "    +    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
49	[BUG]  [BUGGY]  System.err.println( "Failed  to  flush: "  +  this);  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  System.err.println( "Failed  to  flush: "  +  this);  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	System.err.println( "Failed  to  flush: "  +  this);	  System.err.println(   "Failed    to    flush:   "    +    out);    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	6	None	replace
50	[BUG]  [BUGGY]  out  =(out  instanceof  CSVFormat)?((  CSVFormat)out).flush()  :  this.format.toString();  [CE]  validate()  has  private  access  in  CSVFormat  [FE]              NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  out  =(out  instanceof  CSVFormat)?((  CSVFormat)out).flush()  :  this.format.toString();  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	out  =(out  instanceof  CSVFormat)?((  CSVFormat)out).flush()  :  this.format.toString();	  if(out    instanceof    CSVFormat)    {    this.format.flush();    }    else    {    ((    CSVFormat)out).flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	17	None	replace
51	[BUG]  [BUGGY]  out  =(out  instanceof  CSVFormat)?((  CSVFormat)out).flush()  :  null;  [CE]  validate()  has  private  access  in  CSVFormat  [FE]                NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  out  =(out  instanceof  CSVFormat)?((  CSVFormat)out).flush()  :  null;  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	out  =(out  instanceof  CSVFormat)?((  CSVFormat)out).flush()  :  null;	  if(out    instanceof    CSVFormat)    {    this.format.flush();    }    else    {    ((    CSVFormat)out).flush();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	17	None	replace
52	[BUG]  [BUGGY]  if(newRecord!=  null)  {  out.close();  }  [CE]  validate()  has  private  access  in  CSVFormat  [FE]            NoClassDefFoundError      [CONTEXT]      public  void  flush()  throws  IOException  {  if  (out  instanceof  Flushable)  {  ((Flushable)  out).flush();  }      [BUGGY]  if(newRecord!=  null)  {  out.close();  }  [BUGGY]        [CLASS]  CSVPrinter  [METHOD]  flush  [RETURN_TYPE]  void  [VARIABLES]  CSVFormat  format  boolean  newRecord  Appendable  out  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVPrinter.java	0.7071067811865475	103	103	10	replace	if(newRecord!=  null)  {  out.close();  }	  if(newRecord)    {    out.close();    }    	non-compiled	[CE]  validate()  has  private  access  in  CSVFormat	15	None	replace
