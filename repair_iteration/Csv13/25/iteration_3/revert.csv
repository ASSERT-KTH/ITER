projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validate();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.skipHeaderRecord=skipHeaderRecord;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(recordSeparator!=null){for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,headerComments,0,headerComments.length);}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(recordSeparator!=null){this.recordSeparator=ignoreSurroundingSpaces;}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=ignoreSurroundingSpaces;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.commentMarker=quoteMode==null?null:quoteMode.clone();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(!quoteCharacter.equals(delimiter)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(!quoteCharacter.equals("")){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.skipHeaderRecord=skipHeaderRecord.clone();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.nullString=nullString;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(!quoteCharacter.equals(commentStart)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter!=null||!quoteCharacter.equals(delimiter)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435||!quoteCharacter.equals(delimiter)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(!quoteCharacter.equals(commentMarker)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,headerComments,0,headerComments.length);}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(headerComments!=null){for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,headerCom
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(recordSeparator!=null){for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,headerComments,0,headerComments.length);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,header);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,headerComments);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,nullString);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter!=null||!quoteCharacter.equals("")){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter!=null&&!quoteCharacter.equals("")){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435||!quoteCharacter.equals("")){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=recordSeparator;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=nullString;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=delimiter;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.skipHeaderRecord=skippeHeaderRecord;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.skipHeaderRecord=ignoreHeaderRecord;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.skipHeaderRecord=null;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.commentMarker=quoteMode!=null?null:quoteMode.clone();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validateSurroundingSpaces();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validate(nullString);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validate(recordSeparator);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=ignoreEmptyLines;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435This.recordSeparator=ignoreSurroundingSpaces;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter!=null&&!quoteCharacter.equals(delimiter)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter!=null){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.skipHeaderRecord=skippingHeaderRecord;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Object[]headerComments=newObject[headerComments.size()];System.arraycopy(headerComments,0,headerComments,0,headerComments.length);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(headerComments!=null){for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(header!=null){validate();}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(header==null){validate();}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,delimiter);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Predefined.checkNotNull(header);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(recordSeparator==null){for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,headerCom
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(headerComments!=null){for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,headerComments
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(recordSeparator==null){for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435MutableCharacterDelimiterdelimiter=quoteCharacter.equals(delimiter)?null:quoteCharacter.toLowerCase();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=recordSeparator?null:ignoreSurroundingSpaces;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=recordSeparator?nullString:ignoreSurroundingSpaces;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.quoteCharacter=quoteCharacter==null?null:quoteCharacter.clone();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.quoteCharacter=quoteCharacter!=null?null:quoteCharacter.clone();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.commentMarker=quoteMode==null?null:quoteMode.toString();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(!isEmptyLines){validate();}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.skipHeaderRecord=skippedHeaderRecord;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=nullString?nullString:ignoreSurroundingSpaces;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=nullString?nullString:delimiter;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=ignoreSurroundingSpaces?nullString:recordSeparator;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435String[]headerComments=newObject[headerComments.size()];System.arraycopy(headerComments,0,headerComments,0,headerComments.length);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435System.arraycopy(headerComments,0,headerComments,0,headerComments.length);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435This.recordSeparator=recordSeparator;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435This.recordSeparator=nullString;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(delimiter==null){validate();}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,headerComments,ignoreEmptyLines);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,headerComments,null);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,headerComments,false);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435||!quoteCharacter.equals(commentStart)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435||!quoteCharacter.equals(commentMarker)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()+1];System.arraycopy(headerComments,0,headerComments,0,headerComments.length);}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435for(inti=1;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,headerComments,0,headerComments.length);}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,headerComments
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(headerComments!=null){for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(recordSeparator!=null){for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=null;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,nullString,delimiter);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,nullString,ignoreEmptyLines);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,nullString,0);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.skipHeaderRecord=skipHeaderRecord!=null?null:skipHeaderRecord.clone();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.skipHeaderRecord=skipHeaderRecord==null?null:skipHeaderRecord.clone();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=null?null:ignoreSurroundingSpaces;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=ignoreSurroundingSpaces?null:recordSeparator;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435MutableCharacterDelimiterdelimiter=quoteCharacter.equals(delimiter)?null:quoteCharacter.clone();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435MutableCharacterDelimiterdelimiter=quoteCharacter.equals(delimiter)?null:quoteCharacter.toUpperCase();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435MutableCharacterDelimiterdelimiter=quoteMode.equals(delimiter)?null:quoteCharacter.toLowerCase();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validate(nullString,header);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validate(nullString,headerComments);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validate(nullString,nullString);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Object[]headerComments=newObject[headerComments.length];System.arraycopy(headerComments,0,headerComments,0,headerComments.length);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(recordSeparator!=null){for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,headerCom
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Object[]headerComments=toStringArray(headerComments);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter==null&&!quoteCharacter.equals("")){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter==null||!quoteCharacter.equals("")){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=quoteCharacter;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=quoteMode;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter==null&&!quoteCharacter.equals(delimiter)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter==null||!quoteCharacter.equals(delimiter)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter!=null||!quoteCharacter.equals(commentMarker)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter!=null&&!quoteCharacter.equals(commentMarker)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter!=null||!quoteCharacter.equals(commentStart)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter!=null&&!quoteCharacter.equals(commentStart)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,delimiter,quoteCharacter);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,quoteCharacter);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(delimiter,recordSeparator);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,commentStart);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.quoteCharacter=quoteMode==null?null:quoteCharacter.clone();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validateSurroundingSpaces(recordSeparator);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validateSurroundingSpaces(true);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter!=null&&!quoteCharacter.equals("*")){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Validate.isTrue(!isEmptyLines);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Validate.isTrue(!isEmptyLines,isEmptyLines);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Validate.notEmpty(ignoreEmptyLines){validate();}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Predefined.checkNotNull(delimiter);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Predefined.checkNotNull(recordSeparator);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Predefined.checkState(header!=null);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Predefined.checkState(delimiter==null);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,headerCom
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(headerComments!=null){for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(head
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validate(recordSeparator,headerComments);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validate(recordSeparator,header);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validate(recordSeparator,nullString);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.nullString=delimiter;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.nullString=DEFAULT_NUMBER_STRING;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.nullString=DEFAULT_TYPE;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter==null){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435||quoteCharacter!=null){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435CharacterquoteCharacter=quoteCharacter.clone();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,header,ignoreEmptyLines);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,header,false);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,header,0);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=DEFAULT_REcordSECTION;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.commentMarker=quoteMode!=null?null:quoteMode.toString();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Object[]headerComments=newObject[headerComments.size()];System.arraycopy(headerComments,0,
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.skipHeaderRecord=skipHeaderRecord>=null?null:skipHeaderRecord.clone();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validateEmptyLines();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validateSurroundingSpaces(escape);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435System.arraycopy(headerComments,0,
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Object[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validate(delimiter);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validate(escape);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=newString(delimiter);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=delimiter==null?null:delimiter;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=delimiter==null?null:recordSeparator;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validate(nullString,null);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validate(nullString,DEFAULT);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(delimiter!=null){validate();}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=nullString?nullString:recordSeparator;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Predefined.checkNotNull(record);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(!quoteCharacter.equals(commentStart)&&!quoteCharacter.equals(delimiter)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.nullString=delimiter==null?null:delimiter;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.nullString=delimiter==null?null:toStringArray(delimiter);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.nullString=delimiter!=null?null:delimiter;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Object[]headerComments=newObject[headerComments.size()];System.arraycopy(headerComments,0,headerCom
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.skippingHeaderRecord=skipHeaderRecord;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435for(inti=0;i<headerComments.size();i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,headerComments,0,headerComments.length);}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435for(Objecti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,headerComments,0,headerComments.length);}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Object[]headerComments=newObject[headerComments.size()+1];System.arraycopy(headerComments,0,headerComments,0,headerComments.length);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Object[]headerComments=newObject[headerComments.size()];
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Object[]headerComments=toStringArray(headerComments);System.arraycopy(headerComments,0,headerComments,0,headerComments.length);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=nullString?null:ignoreSurroundingSpaces;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=null?null:recordSeparator;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Validate.notNull(ignoreEmptyLines);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=delimiter!=null?null:delimiter;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,headerComments,nullString);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter!=null){thrownewIllegalArgumentException("".);}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(quoteCharacter==null){thrownewIllegalArgumentException("".);}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(!isEmptyLines&&!isEmptyLines){validate();}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(!isEmptyLines&&!ignoreEmptyLines){validate();}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(!isEmptyLines&&!missingEmptyLines){validate();}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(headerComments!=null){for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,header
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,nullString,DEFAULT);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.nullString=delimiter==null?null:delimiter.clone();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(headerComments!=null){for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(headerComments!=null){Object[]headerComments=newObject[headerComments.size()];System.arraycopy(headerComments,0,headerComments,0,headerComments.length);}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Arrays.arraycopy(headerComments,0,headerComments,0,headerComments.length);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.skipHeaderRecord=skipHeaderRecord?null:skipHeaderRecord;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435validate(recordSeparator,delimiter);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,header,delimiter);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=nullString?null:recordSeparator;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=nullString?recordSeparator:ignoreSurroundingSpaces;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435This.quoteCharacter=quoteCharacter==null?null:quoteCharacter.clone();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=DEFAULT;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435MutableCharacterDelimiterdelimiter=quoteCharacter.equals(delimiter)?null:quoteCharacter.toOtherCase();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(!quoteCharacter.equals(commentMarker)&&!quoteCharacter.equals(commentStart)){thrownewIllegalArgumentException("");}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=nullString?nullString:null;
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(header!=null&&header.length()>0){validate();}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(header!=null&&header.length>0){validate();}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=delimiter==null?null:delimiter.clone();
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435if(headerComments!=null){for(inti=0;i<headerComments.length;i++){String[]headerComments=newString[headerComments.size()];System.arraycopy(headerComments,0,headerComments,0,headerComments.length);}
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Object[]headerComments=header.toArray(newObject[headerComments.size()]);System.arraycopy(headerComments,0,headerComments,0,headerComments.length);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Object[]headerComments=headers.size()];System.arraycopy(headerComments,0,headerComments,0,headerComments.length);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435Object[]headerComments=header.split(",");System.arraycopy(headerComments,0,headerComments,0,headerComments.length);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,headerComments,delimiter);
projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java435this.recordSeparator=toStringArray(recordSeparator,headerComments,DEFAULT);
