bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Character  commentStart  =  getCommentStart(c);  [CE]  illegal  start  of  type  [FE]              NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  Character  commentStart  =  getCommentStart(c);  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	Character  commentStart  =  getCommentStart(c);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  Character  commentStart  =  quoteCharacter.getCommentStart();  [CE]  illegal  start  of  type  [FE]                NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  Character  commentStart  =  quoteCharacter.getCommentStart();  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	Character  commentStart  =  quoteCharacter.getCommentStart();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  Character  c  =  quoteCharacter.charAt(i);  [CE]  illegal  start  of  type  [FE]                  NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  Character  c  =  quoteCharacter.charAt(i);  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	Character  c  =  quoteCharacter.charAt(i);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  Character  c  =  getCharacter();  [CE]  illegal  start  of  type  [FE]                    NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  Character  c  =  getCharacter();  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	Character  c  =  getCharacter();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  if(escapeCharacter  ==  null)  {  [CE]  illegal  start  of  type  [FE]            NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(escapeCharacter  ==  null)  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(escapeCharacter  ==  null)  {	  if(delimiter    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  if(header!=  null  ||  header.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]        NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(header!=  null  ||  header.length()  ==  0)  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(header!=  null  ||  header.length()  ==  0)  {	  if(header    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  if(header!=  null  &&  Arrays.toString(header)!=  null)  {  [CE]  illegal  start  of  type  [FE]        NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(header!=  null  &&  Arrays.toString(header)!=  null)  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(header!=  null  &&  Arrays.toString(header)!=  null)  {	  if(header!=    null    ||    Arrays.toString(header)!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  if(header!=  null  ||  Arrays.toString(header)  ==  null)  {  [CE]  illegal  start  of  type  [FE]          NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(header!=  null  ||  Arrays.toString(header)  ==  null)  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(header!=  null  ||  Arrays.toString(header)  ==  null)  {	  if(header!=    null    ||    Arrays.toString(header)!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  if(header  ==  null  ||  Arrays.toString(header)!=  null)  {  [CE]  illegal  start  of  type  [FE]            NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(header  ==  null  ||  Arrays.toString(header)!=  null)  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(header  ==  null  ||  Arrays.toString(header)!=  null)  {	  if(header!=    null    ||    Arrays.toString(header)!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  if(header!=  null  ||  header.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]            NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(header!=  null  ||  header.length()  >  0)  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(header!=  null  ||  header.length()  >  0)  {	  if(header!=    null    &&    header.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
11	[BUG]  [BUGGY]  if(header  ==  null  &&  header.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]              NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(header  ==  null  &&  header.length()  >  0)  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(header  ==  null  &&  header.length()  >  0)  {	  if(header!=    null    &&    header.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  if(header!=  null  &&  header.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(header!=  null  &&  header.length()  ==  0)  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(header!=  null  &&  header.length()  ==  0)  {	  if(header!=    null    &&    header.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  if(escapeCharacter!=  null  &&  quoteCharacter.equals(commentMarker))  {  [CE]  illegal  start  of  type  [FE]          NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(escapeCharacter!=  null  &&  quoteCharacter.equals(commentMarker))  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(escapeCharacter!=  null  &&  quoteCharacter.equals(commentMarker))  {	  if(header!=    null    &&    quoteCharacter.equals(commentMarker))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
14	[BUG]  [BUGGY]  if(delimiter!=  null  &&  quoteCharacter.equals(commentMarker))  {  [CE]  illegal  start  of  type  [FE]            NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(delimiter!=  null  &&  quoteCharacter.equals(commentMarker))  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(delimiter!=  null  &&  quoteCharacter.equals(commentMarker))  {	  if(header!=    null    &&    quoteCharacter.equals(commentMarker))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  if(delimiter!=  null  &&  quoteCharacter.equals(commentStart))  {  [CE]  illegal  start  of  type  [FE]              NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(delimiter!=  null  &&  quoteCharacter.equals(commentStart))  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(delimiter!=  null  &&  quoteCharacter.equals(commentStart))  {	  if(header!=    null    &&    quoteCharacter.equals(commentMarker))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  if(header!=  null  &&  quoteCharacter.equals(commentStart))  {  [CE]  illegal  start  of  type  [FE]                NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(header!=  null  &&  quoteCharacter.equals(commentStart))  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(header!=  null  &&  quoteCharacter.equals(commentStart))  {	  if(header!=    null    &&    quoteCharacter.equals(commentMarker))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
17	[BUG]  [BUGGY]  if(escapeCharacter!=  null  &&  quoteMode  ==  QuoteMode.NONE)  {  [CE]  illegal  start  of  type  [FE]        NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(escapeCharacter!=  null  &&  quoteMode  ==  QuoteMode.NONE)  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(escapeCharacter!=  null  &&  quoteMode  ==  QuoteMode.NONE)  {	  if(header!=    null    &&    quoteMode    ==    QuoteMode.NONE)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  if(delimiter!=  null  &&  quoteMode  ==  QuoteMode.NONE)  {  [CE]  illegal  start  of  type  [FE]          NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(delimiter!=  null  &&  quoteMode  ==  QuoteMode.NONE)  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(delimiter!=  null  &&  quoteMode  ==  QuoteMode.NONE)  {	  if(header!=    null    &&    quoteMode    ==    QuoteMode.NONE)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
19	[BUG]  [BUGGY]  if(delimiter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  [CE]  illegal  start  of  type  [FE]            NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(delimiter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(delimiter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {	  if(header!=    null    &&    quoteMode    ==    QuoteMode.NONE)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
20	[BUG]  [BUGGY]  Character  character  =  escapeCharacter.charAt(escapeCharacter);  [CE]  illegal  start  of  type  [FE]              NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  Character  character  =  escapeCharacter.charAt(escapeCharacter);  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	Character  character  =  escapeCharacter.charAt(escapeCharacter);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  Character  character  =  getCharacter();  [CE]  illegal  start  of  type  [FE]                NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  Character  character  =  getCharacter();  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	Character  character  =  getCharacter();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
22	[BUG]  [BUGGY]  Character  character  =  getCharacter(c);  [CE]  illegal  start  of  type  [FE]                  NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  Character  character  =  getCharacter(c);  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	Character  character  =  getCharacter(c);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  if(header!=  null  ||!header.equals(commentMarker))  {  [CE]  illegal  start  of  type  [FE]        NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(header!=  null  ||!header.equals(commentMarker))  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(header!=  null  ||!header.equals(commentMarker))  {	  if(header    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
24	[BUG]  [BUGGY]  if(header!=  null  ||!header.equals(delimiter))  {  [CE]  illegal  start  of  type  [FE]          NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(header!=  null  ||!header.equals(delimiter))  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(header!=  null  ||!header.equals(delimiter))  {	  if(header    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  if(header!=  null  &&  quoteCharacter.equals(delimiter))  {  [CE]  illegal  start  of  type  [FE]          NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(header!=  null  &&  quoteCharacter.equals(delimiter))  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(header!=  null  &&  quoteCharacter.equals(delimiter))  {	  if(header!=    null    &&    quoteCharacter.equals(commentMarker))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  if(header!=  null  &&  quoteMode!=  QuoteMode.NONE)  {  [CE]  illegal  start  of  type  [FE]        NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(header!=  null  &&  quoteMode!=  QuoteMode.NONE)  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(header!=  null  &&  quoteMode!=  QuoteMode.NONE)  {	  if(header!=    null    &&    quoteMode    ==    QuoteMode.NONE)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
27	[BUG]  [BUGGY]  if(delimiter!=  null  &&  delimiter.equals(commentMarker))  {  [CE]  illegal  start  of  type  [FE]          NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(delimiter!=  null  &&  delimiter.equals(commentMarker))  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(delimiter!=  null  &&  delimiter.equals(commentMarker))  {	  if(delimiter!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
28	[BUG]  [BUGGY]  if(header  ==  null  ||  header.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]        NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(header  ==  null  ||  header.length()  ==  0)  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(header  ==  null  ||  header.length()  ==  0)  {	  if(header    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
29	[BUG]  [BUGGY]  if(header  ==  null  ||  quoteMode  ==  QuoteMode.NONE)  {  [CE]  illegal  start  of  type  [FE]          NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(header  ==  null  ||  quoteMode  ==  QuoteMode.NONE)  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(header  ==  null  ||  quoteMode  ==  QuoteMode.NONE)  {	  if(header    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
30	[BUG]  [BUGGY]  Character  c  =  escapeCharacter.charAt(escapeCharacter.length()  -  1);  [CE]  illegal  start  of  type  [FE]              NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  Character  c  =  escapeCharacter.charAt(escapeCharacter.length()  -  1);  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	Character  c  =  escapeCharacter.charAt(escapeCharacter.length()  -  1);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  Character  c  =  escapeCharacter.charAt(commentStart);  [CE]  illegal  start  of  type  [FE]                NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  Character  c  =  escapeCharacter.charAt(commentStart);  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	Character  c  =  escapeCharacter.charAt(commentStart);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  Character  c  =  escapeCharacter.charAt(quoteCharacter.length()  -  1);  [CE]  illegal  start  of  type  [FE]                  NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  Character  c  =  escapeCharacter.charAt(quoteCharacter.length()  -  1);  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	Character  c  =  escapeCharacter.charAt(quoteCharacter.length()  -  1);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
33	[BUG]  [BUGGY]  if(header!=  null  &&  header.length()  >  0  ||  header.charAt(header.length()  -  1)!=  '/')  {  [CE]  illegal  start  of  type  [FE]            NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(header!=  null  &&  header.length()  >  0  ||  header.charAt(header.length()  -  1)!=  '/')  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(header!=  null  &&  header.length()  >  0  ||  header.charAt(header.length()  -  1)!=  '/')  {	  if(header!=    null    &&    header.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
34	[BUG]  [BUGGY]  if(delimiter  ==  null  &&  quoteCharacter.equals(commentMarker))  {  [CE]  illegal  start  of  type  [FE]            NoClassDefFoundError    [CONTEXT]    if  (escapeCharacter  !=  null  &&  escapeCharacter.equals(commentMarker))  {  throw  new  IllegalArgumentException(   "The  comment  start  and  the  escape  character  cannot  be  the  same  ('   "  +  commentMarker  +     "')   ");  }  if  (escapeCharacter  ==  null  &&  quoteMode  ==  QuoteMode.NONE)  {  throw  new  IllegalArgumentException(   "No  quotes  mode  set  but  no  escape  character  is  set   ");  }      [BUGGY]  if(delimiter  ==  null  &&  quoteCharacter.equals(commentMarker))  {  [BUGGY]    final  Set<String>  dupCheck  =  new  HashSet<String>();  for  (final  String  hdr  :  header)  {  if  (!dupCheck.add(hdr))  {  throw  new  IllegalArgumentException(   "The  header  contains  a  duplicate  entry:  '   "  +  hdr  +     "'  in     "  +  Arrays.toString(header));  }  }  }  }  [CLASS]  CSVFormat  Predefined  [METHOD]  validate  [RETURN_TYPE]  void  [VARIABLES]  boolean  allowMissingColumnNames  ignoreEmptyLines  ignoreHeaderCase  ignoreSurroundingSpaces  skipHeaderRecord  Set  dupCheck  Character  c  commentMarker  commentStart  escape  escapeCharacter  quoteChar  quoteCharacter  QuoteMode  quoteMode  char  c  delimiter  CSVFormat  DEFAULT  EXCEL  MYSQL  RFC4180  TDF  format  other  String  format  hdr  nullString  recordSeparator  String[]  header  headerComments  strings  Predefined  Default  Excel  MySQL  RFC4180  TDF  long  serialVersionUID  	projects/Csv13/src/main/java/org/apache/commons/csv/CSVFormat.java	0.4343722427630694	848	848	10	replace	if(delimiter  ==  null  &&  quoteCharacter.equals(commentMarker))  {	  if(delimiter    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
