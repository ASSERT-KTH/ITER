bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {	while  (pos  <  len)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	1	replace
2	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while  (pos  <  len  &&  input.charAt(pos)!=  '-')  {	while  (pos  <  len)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	1	replace
3	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	while  (pos  <  len  &&  input.length()  >  0)  {	while  (pos  <  len)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	1	replace
4	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]  while  (pos  <  len  &&  input.length()  >  0)  {  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while  (pos  <  len  &&  input.length()  >  0)  {	while  (pos  <  len)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	1	replace
5	[BUG]  [BUGGY]  while  (pos  <  len  &&  out.length()  >  0)  {  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]  while  (pos  <  len  &&  out.length()  >  0)  {  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while  (pos  <  len  &&  out.length()  >  0)  {	while  (pos  <  len)  {  	non-compiled	[CE]  cannot  find  symbol	16	None	replace
6	[BUG]  [BUGGY]    [CE]  class,  interface,  or  enum  expected  [FE]          StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]    [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	  	while  (pos  <  len)  {  	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
7	[BUG]  [BUGGY]    int  len  =  input.length();  [CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]    int  len  =  input.length();  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	    int  len  =  input.length();		non-compiled	[CE]  variable  len  is  already  defined  in  method  translate(CharSequence,Writer)	17	None	add
8	[BUG]  [BUGGY]    int  pos  =  input.length();  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]    int  pos  =  input.length();  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	    int  pos  =  input.length();		non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	17	None	add
9	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]    pos  +=  input.length();  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	    pos  +=  input.length();		compilable	  [FE]  ComparisonFailure  	17	1	add
10	[BUG]  [BUGGY]    pos  +=  input.length();  [FE]  ComparisonFailure  [FE]        StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]    pos  +=  input.length();  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	    pos  +=  input.length();		compilable	  [FE]  ComparisonFailure  	17	1	add
11	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]    pos  =  input.length();  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	    pos  =  input.length();		compilable	  [FE]  ComparisonFailure  	17	1	add
12	[BUG]  [BUGGY]    pos  =  input.length();  [FE]  ComparisonFailure  [FE]          StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]    pos  =  input.length();  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	    pos  =  input.length();		compilable	  [FE]  ComparisonFailure  	17	1	add
13	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]    pos  +=  len;  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	    pos  +=  len;		compilable	  [FE]  ComparisonFailure  	17	1	add
14	[BUG]  [BUGGY]    pos  +=  len;  [FE]  ComparisonFailure  [FE]            StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]    pos  +=  len;  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	    pos  +=  len;		compilable	  [FE]  ComparisonFailure  	17	1	add
15	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  'n')  {  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	while  (pos  <  len  &&  input.charAt(pos)!=  'n')  {	while  (pos  <  len)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	1	replace
16	[BUG]  [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  'n')  {  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]  while  (pos  <  len  &&  input.charAt(pos)!=  'n')  {  [BUGGY]  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	while  (pos  <  len  &&  input.charAt(pos)!=  'n')  {	while  (pos  <  len)  {  	compilable	  [FE]  StringIndexOutOfBoundsException  	16	1	replace
17	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]    out.write(len);  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	add	    out.write(len);		compilable	  [FE]  StringIndexOutOfBoundsException  	17	1	add
18	[BUG]  [BUGGY]    out.write(len);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]    out.write(len);  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	    out.write(len);		compilable	  [FE]  StringIndexOutOfBoundsException  	17	1	add
19	[BUG]  [BUGGY]    int  pos  =  input.indexOf('n');  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]    int  pos  =  input.indexOf('n');  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	    int  pos  =  input.indexOf('n');		non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	17	None	add
20	[BUG]  [BUGGY]    int  pos  =  input.indexOf('n',  pos);  [CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      StringIndexOutOfBoundsException  [CONTEXT]  public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  [BUGGY]    int  pos  =  input.indexOf('n',  pos);  [BUGGY]  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  continue;  }    for  (int  pt  =  0;  pt  <  consumed;  pt++)  {  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	84	84	1	replace	    int  pos  =  input.indexOf('n',  pos);		non-compiled	[CE]  variable  pos  is  already  defined  in  method  translate(CharSequence,Writer)	17	None	add
