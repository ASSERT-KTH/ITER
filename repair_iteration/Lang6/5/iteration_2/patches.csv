bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  out.write( "null ");  }  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  out.write( "null ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  out.write( "null ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
2	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write( ".s.IFJDCS ");  }  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write( ".s.IFJDCS ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write( ".s.IFJDCS ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	1	add
4	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	1	add
5	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	1	add
6	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	1	add
7	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  nu  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  nu	  	non-compiled	[CE]  	11	None	add
8	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange(input);  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange(input);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().reportCodeChange(input);	  Thread.currentThread().getContextClassLoader().reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
9	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange(this);  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange(this);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().reportCodeChange(this);	  Thread.currentThread().getContextClassLoader().reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
10	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange(in);  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange(in);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().reportCodeChange(in);	  Thread.currentThread().getContextClassLoader().reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
11	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	48	1	add
12	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	48	1	add
13	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(       "n       ");    }    if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	48	1	add
14	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(       "n       ");    }    if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	48	1	add
15	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ".n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( ".n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   ".n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( ".n ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	89	1	add
16	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ".n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( ".n ");  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ".n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( ".n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   ".n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( ".n ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	89	1	add
17	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ".n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( ". ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   ".n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( ". ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	89	1	add
18	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ".n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( ". ");  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ".n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( ". ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   ".n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( ". ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	89	1	add
19	[BUG]  [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    cannot    be    null.       ");    }    if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
20	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input!=  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
21	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
22	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
23	[BUG]  [BUGGY]  char[]  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char[]  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	char[]  inputLength  =  input.length();	          int    inputLength    =    input.length();    char[]    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
24	[BUG]  [BUGGY]  Integer  inputLength  =  input.length();  char[]  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Integer  inputLength  =  input.length();  char[]  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Integer  inputLength  =  input.length();  char[]  inputLength  =  input.length();	          int    inputLength    =    input.length();    char[]    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
25	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().setContextClassLoader(getClass().getClassLoader());	  if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
26	[BUG]  [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	  if(input!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
27	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ",n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ",n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	121	1	add
28	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ",n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ",n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ",n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	121	1	add
29	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	add
30	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	add
31	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	add
32	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	add
33	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	22	1	add
34	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	22	1	add
35	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(out,  input.getKey());  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(out,  input.getKey());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().setCurrentName(out,  input.getKey());	  Thread.currentThread().getContextClassLoader().setCurrentName(out.getKey());    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
36	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(out.getKey(),  input);  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(out.getKey(),  input);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().setCurrentName(out.getKey(),  input);	  Thread.currentThread().getContextClassLoader().setCurrentName(out.getKey());    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
37	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(input,  out.getKey());  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(input,  out.getKey());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().setCurrentName(input,  out.getKey());	  Thread.currentThread().getContextClassLoader().setCurrentName(out.getKey());    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
38	[BUG]  [BUGGY]  out.write( ", ");  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ", ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( ", ");	  if(out!=    null)    {    out.write(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
39	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write( ", ");  }  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  out.write( ", ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null)  {  out.write( ", ");  }	  if(out!=    null)    {    out.write(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
40	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(pos));  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ".s.IFJDCS ".charAt(pos));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( ".s.IFJDCS ".charAt(pos));	  if(out!=    null)    {    out.write(   ",   ");    }    	non-compiled	[CE]  illegal  start  of  type	133	None	replace
41	[BUG]  [BUGGY]  If(input  ==  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  If(input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	If(input  ==  null  ||  input.length()  ==  0)  {	  if(input    ==    null    ||    input.length()    ==    0)    {    If(input    ==    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  ';'  expected	78	None	replace
42	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".length());  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ".s.IFJDCS ".length());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( ".s.IFJDCS ".length());	  out.write(   "null   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
43	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null..   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null..   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	1	add
44	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null..   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null..   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null..   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	1	add
45	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	1	add
46	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	1	add
47	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.  [CE]  unclosed  string  literal  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	9	None	add
48	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	1	add
49	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	1	add
50	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  cannot  be  null. ");  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  cannot  be  null. ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	115	None	replace
51	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().print( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().print( "The  Writer  must  not  be  null. ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().print( "The  Writer  must  not  be  null. ");	  Thread.currentThread().getContextClassLoader().append(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
52	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().append( "The  Writer  must  not  be  null! ");  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().append( "The  Writer  must  not  be  null! ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().append( "The  Writer  must  not  be  null! ");	  Thread.currentThread().getContextClassLoader().append(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
53	[BUG]  [BUGGY]  out.write(Character.toChars(Character.codePointAt(input,  pos)));  [CE]  illegal  start  of  type  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Character.toChars(Character.codePointAt(input,  pos)));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toChars(Character.codePointAt(input,  pos)));	  out.write(Character.codePointAt(input,    pos));    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
54	[BUG]  [BUGGY]  out.write(Character.toChars(Character.codePointAt(input,  pos));  [CE]  ')'  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Character.toChars(Character.codePointAt(input,  pos));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toChars(Character.codePointAt(input,  pos));	  out.write(Character.codePointAt(input,    pos));    	non-compiled	[CE]  ')'  expected	105	None	replace
55	[BUG]  [BUGGY]  out.write(Character.codePointAt(input,  pos  +  1));  [CE]  illegal  start  of  type  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Character.codePointAt(input,  pos  +  1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.codePointAt(input,  pos  +  1));	  out.write(Character.codePointAt(input,    pos));    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
56	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    out.write('n');    return;    	compilable	  [FE]  ComparisonFailure  	91	1	replace
57	[BUG]  [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out!=  null)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    out.write('n');    return;    	compilable	  [FE]  ComparisonFailure  	91	1	replace
58	[BUG]  [BUGGY]  char  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	char  inputLength  =  input.length();	          int    inputLength    =    input.length();    int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
59	[BUG]  [BUGGY]  Integer  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Integer  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Integer  inputLength  =  input.length();	          int    inputLength    =    input.length();    int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
60	[BUG]  [BUGGY]  out.write(Integer.toString(input,  pos));  [CE]  illegal  start  of  type  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(input,  pos));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Integer.toString(input,  pos));	  out.write(Integer.toString(input));    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
61	[BUG]  [BUGGY]  out.write(Integer.toString(pt));  [CE]  illegal  start  of  type  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(pt));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Integer.toString(pt));	  out.write(Integer.toString(input));    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
62	[BUG]  [BUGGY]  int  outputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	int  outputLength  =  input.length();	          int    inputLength    =    input.length();    int    outputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
63	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	52	1	add
64	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	52	1	add
65	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().append( ";n ");  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().append( ";n ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().append( ";n ");	  Thread.currentThread().getContextClassLoader().append(   ");n   ");    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
66	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ".n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	119	1	add
67	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ".n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	119	1	add
68	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(out    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
69	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   "n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( "n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   "n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( "n ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	65	1	add
70	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   "n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( "n ");  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   "n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( "n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   "n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( "n ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	65	1	add
71	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   "n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   "n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }	  	compilable	  [FE]  ComparisonFailure  	65	1	add
72	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   "n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   "n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   "n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }	  	compilable	  [FE]  ComparisonFailure  	65	1	add
73	[BUG]  [BUGGY]  int  inputLength  =  input.length()  *  out.length();  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  inputLength  =  input.length()  *  out.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	int  inputLength  =  input.length()  *  out.length();	  int    inputLength    =    input.length()    +    out.length();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
74	[BUG]  [BUGGY]  int  inputLength  =  input.length()  /  out.length();  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  inputLength  =  input.length()  /  out.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	int  inputLength  =  input.length()  /  out.length();	  int    inputLength    =    input.length()    +    out.length();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
75	[BUG]  [BUGGY]  int  inputLength  =  input.length()  -  out.length();  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  inputLength  =  input.length()  -  out.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	int  inputLength  =  input.length()  -  out.length();	  int    inputLength    =    input.length()    +    out.length();    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
76	[BUG]  [BUGGY]  out.write(Character.toChars(c),  pos);  [CE]  illegal  start  of  type  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Character.toChars(c),  pos);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toChars(c),  pos);	  out.write(Character.toChars(c));    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
77	[BUG]  [BUGGY]  out.write(Character.toChars(c,  pos));  [CE]  illegal  start  of  type  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Character.toChars(c,  pos));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toChars(c,  pos));	  out.write(Character.toChars(c));    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
78	[BUG]  [BUGGY]  out.write(Character.toString(c));  [CE]  illegal  start  of  type  [FE]                            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Character.toString(c));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toString(c));	  out.write(Character.toChars(c));    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
79	[BUG]  [BUGGY]  out.write( "[null] ");  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "[null] ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "[null] ");	  out.write(   "n   ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
80	[BUG]  [BUGGY]  out.write( "   ");  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "   ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "   ");	  out.write(   "n   ");    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
81	[BUG]  [BUGGY]  if(input!=  null)  {  out.write( "null ");  }  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null)  {  out.write( "null ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input!=  null)  {  out.write( "null ");  }	  if(input    ==    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
82	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  input.toString());  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ".s.IFJDCS "  +  input.toString());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( ".s.IFJDCS "  +  input.toString());	  out.write(   ".s.IFJDCS   ".toString());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
83	[BUG]  [BUGGY]  out.write( "/.s.IFJDCS ".toString());  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "/.s.IFJDCS ".toString());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "/.s.IFJDCS ".toString());	  out.write(   ".s.IFJDCS   ".toString());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
84	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ");  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ".s.IFJDCS ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( ".s.IFJDCS ");	  out.write(   ".s.IFJDCS   ".toString());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
85	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
86	[BUG]  [BUGGY]  Int  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Int  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Int  inputLength  =  input.length();	          int    inputLength    =    input.length();    Int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
87	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	if(out!=  null)  {  if(input!=  null)  {  out.write('n');  return;  }	  if(input!=    null)    {    out.write('n');    return;    }    	compilable	  [FE]  ComparisonFailure  	85	1	replace
88	[BUG]  [BUGGY]  if(out!=  null)  {  if(input!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out!=  null)  {  if(input!=  null)  {  out.write('n');  return;  }	  if(input!=    null)    {    out.write('n');    return;    }    	compilable	  [FE]  ComparisonFailure  	85	1	replace
89	[BUG]  [BUGGY]  out.write(c);  return;  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(c);  return;  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(c);  return;	  out.write('n');    return;    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
90	[BUG]  [BUGGY]  if(input  ==  null)  {  output.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  output.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null)  {  output.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    output.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
91	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    output.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
92	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    not    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
93	[BUG]  [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    not    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
94	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  inputLength  =  input.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	add
95	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  Integer  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  Integer  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    Integer  inputLength  =  input.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	add
96	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  outputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  variable  outputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  outputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  outputLength  =  input.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  outputLength  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	add
97	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  outputLength;  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  outputLength;  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  inputLength  =  outputLength;  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	add
98	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	if(input  ==  null  ||  input.length()  >  0)  {	  if(input    ==    null    ||    input.length()    >=    0)    {    	compilable	  [FE]  ComparisonFailure  	16	1	replace
99	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()  >  0)  {	  if(input    ==    null    ||    input.length()    >=    0)    {    	compilable	  [FE]  ComparisonFailure  	16	1	replace
100	[BUG]  [BUGGY]  out.write(Integer.toString(pos  +  1));  [CE]  illegal  start  of  type  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(pos  +  1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Integer.toString(pos  +  1));	  out.write(Integer.toString(pos));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
101	[BUG]  [BUGGY]  out.write(Integer.toString(pos)+  1);  [CE]  illegal  start  of  type  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toString(pos)+  1);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Integer.toString(pos)+  1);	  out.write(Integer.toString(pos));    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
102	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(input,  out);  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().setContextClassLoader(input,  out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().setContextClassLoader(input,  out);	  Thread.currentThread().setContextClassLoader(input);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
103	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this.input);  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().setContextClassLoader(this.input);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().setContextClassLoader(this.input);	  Thread.currentThread().setContextClassLoader(input);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
104	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input!=  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input!=    null    ||    input.length()    ==    0)    {    if(input!=  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
105	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input  ==  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input!=    null    ||    input.length()    ==    0)    {    if(input  ==  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
106	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  If(input!=  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  If(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input!=    null    ||    input.length()    ==    0)    {    If(input!=  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
107	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input  >=  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  if(input  >=  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input!=    null    ||    input.length()    ==    0)    {    if(input  >=  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
108	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this,  out);  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().setContextClassLoader(this,  out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().setContextClassLoader(this,  out);	  Thread.currentThread().setContextClassLoader(this);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
109	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this,  input);  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().setContextClassLoader(this,  input);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().setContextClassLoader(this,  input);	  Thread.currentThread().setContextClassLoader(this);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
110	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(out,  true);  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().setContextClassLoader(out,  true);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().setContextClassLoader(out,  true);	  Thread.currentThread().setContextClassLoader(out);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
111	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(out,  input);  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().setContextClassLoader(out,  input);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().setContextClassLoader(out,  input);	  Thread.currentThread().setContextClassLoader(out);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
112	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(out,  false);  [CE]  illegal  start  of  type  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().setContextClassLoader(out,  false);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().setContextClassLoader(out,  false);	  Thread.currentThread().setContextClassLoader(out);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
113	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=    null)    {    out.write('n');    return;    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	41	1	replace
114	[BUG]  [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input.length()  ==  0)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=    null)    {    out.write('n');    return;    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	41	1	replace
115	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	26	1	add
116	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	26	1	add
117	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	26	1	add
118	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	26	1	add
119	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  nu  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  nu	  	non-compiled	[CE]  	26	None	add
120	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]          IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  Il  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	26	None	add
121	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input!=  null)  {  out.write(   "n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input!=    null)    {    out.write(   "n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }	  	compilable	  [FE]  ComparisonFailure  	67	1	add
122	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input!=  null)  {  out.write(   "n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input!=  null)  {  out.write(   "n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input!=    null)    {    out.write(   "n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }	  	compilable	  [FE]  ComparisonFailure  	67	1	add
123	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input!=  null)  {  out.write(   "n     ");  return;  }  if(input!=  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input!=    null)    {    out.write(   "n       ");    return;    }    if(input!=  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }	  	compilable	  [FE]  ComparisonFailure  	67	1	add
124	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input!=  null)  {  out.write(   "n     ");  return;  }  if(input!=  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input!=  null)  {  out.write(   "n     ");  return;  }  if(input!=  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input!=    null)    {    out.write(   "n       ");    return;    }    if(input!=  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }	  	compilable	  [FE]  ComparisonFailure  	67	1	add
125	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
126	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
127	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
128	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
129	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
130	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
131	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
132	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
133	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
134	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
135	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	if(input!=  null  ||  input.length()!=  0)  {	  if(input    ==    null    ||    input.length()!=    0)    {    if(input!=    null    ||    input.length()!=    0)    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
136	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()!=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input!=  null  ||  input.length()!=  0)  {	  if(input    ==    null    ||    input.length()!=    0)    {    if(input!=    null    ||    input.length()!=    0)    {    	compilable	  [FE]  ComparisonFailure  	30	1	replace
137	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(out.getAbsolutePath());  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(out.getAbsolutePath());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(out.getAbsolutePath());	  OutputStream    input    =    new    FileOutputStream(input.getAbsolutePath());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
138	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getPath());  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getPath());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(input.getPath());	  OutputStream    input    =    new    FileOutputStream(input.getAbsolutePath());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
139	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getAbsolutePath(),  out);  [CE]  illegal  start  of  type  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getAbsolutePath(),  out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(input.getAbsolutePath(),  out);	  OutputStream    input    =    new    FileOutputStream(input.getAbsolutePath());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
140	[BUG]  [BUGGY]  int  inputLength  =  output.length();  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  inputLength  =  output.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	int  inputLength  =  output.length();	  int    inputLength    =    input.length()    -    1;    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
141	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getChars());  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getChars());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(input.getChars());	          if(out!=    null)    {    out.write(       "n       ");    }    if(out    >=    null)    {    out.write(   "n       ");    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
142	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    cannot    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null..   ");    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
143	[BUG]  [BUGGY]  out.write(input.charAt(0));  [CE]  illegal  start  of  type  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.charAt(0));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(input.charAt(0));	  out.write(input);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
144	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	46	1	add
145	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	46	1	add
146	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	46	1	add
147	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	46	1	add
148	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	50	1	add
149	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	50	1	add
150	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	50	1	add
151	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	50	1	add
152	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	50	1	add
153	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	50	1	add
154	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	if(out  ==  null  ||  input.length()  ==  0)  {	  if(input    ==    null    ||    out.length()    ==    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	103	1	replace
155	[BUG]  [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null  ||  input.length()  ==  0)  {	  if(input    ==    null    ||    out.length()    ==    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	103	1	replace
156	[BUG]  [BUGGY]  if(c  ==  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [CE]  cannot  find  symbol  c  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(c  ==  null)  {  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(c  ==  null)  {  if(input  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    If(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  cannot  find  symbol  c	42	None	replace
157	[BUG]  [BUGGY]  out.write(Character.toString(input));  [CE]  illegal  start  of  type  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Character.toString(input));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toString(input));	  out.write(Character.toChars(input));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
158	[BUG]  [BUGGY]  out.write( "n ");  return;  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "n ");  return;  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "n ");  return;	  out.write(   "null   ");    return;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
159	[BUG]  [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out!=  null)  {  throw  new  IllegalArgumentException( " ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(input!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
160	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().set(out);  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().set(out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().set(out);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
161	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reset(out);  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().reset(out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().reset(out);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
162	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().set(out,  input);  [CE]  illegal  start  of  type  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().set(out,  input);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().set(out,  input);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
163	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");	  throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	83	None	replace
164	[BUG]  [BUGGY]  Thread.currentThread().interrupt(out);  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().interrupt(out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().interrupt(out);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
165	[BUG]  [BUGGY]  Thread.currentThread().interrupt(out,  pos);  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().interrupt(out,  pos);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().interrupt(out,  pos);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
166	[BUG]  [BUGGY]  Thread.currentThread().interrupt(input);  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().interrupt(input);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().interrupt(input);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
167	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ",       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	125	1	add
168	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ",       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	125	1	add
169	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out  ==  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out  ==  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(out!=        null)        {        out.write(       "n       ");        }        if(out    ==    null)    {    out.write(   "n       ");    }    if(out!=  null)  {  out.write( "n   ");  }  if(out  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	81	1	add
170	[BUG]  [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out  ==  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out  ==  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out  ==  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out  ==  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(out!=        null)        {        out.write(       "n       ");        }        if(out    ==    null)    {    out.write(   "n       ");    }    if(out!=  null)  {  out.write( "n   ");  }  if(out  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	81	1	add
171	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out  ==  null)  {  out.write(   "n     ");  }  if(out  ==  null)  {  out.write( "n   ");  }  if(out  ==  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(out!=        null)        {        out.write(       "n       ");        }        if(out    ==    null)    {    out.write(   "n       ");    }    if(out  ==  null)  {  out.write( "n   ");  }  if(out  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	81	1	add
172	[BUG]  [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out  ==  null)  {  out.write(   "n     ");  }  if(out  ==  null)  {  out.write( "n   ");  }  if(out  ==  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out  ==  null)  {  out.write(   "n     ");  }  if(out  ==  null)  {  out.write( "n   ");  }  if(out  ==  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(out!=        null)        {        out.write(       "n       ");        }        if(out    ==    null)    {    out.write(   "n       ");    }    if(out  ==  null)  {  out.write( "n   ");  }  if(out  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	81	1	add
173	[BUG]  [BUGGY]  If(input  ==  null  ||  input.length()!=  0)  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  If(input  ==  null  ||  input.length()!=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	If(input  ==  null  ||  input.length()!=  0)  {	  if(input    ==    null    ||    input.length()!=    0)    {    If(input    ==    null    ||    input.length()!=    0)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
174	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(out.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(out.getAbsolutePosition());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(out.getAbsolutePosition());	  OutputStream    input    =    new    FileOutputStream(input.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
175	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getAbsolutePosition()  +  1);  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getAbsolutePosition()  +  1);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(input.getAbsolutePosition()  +  1);	  OutputStream    input    =    new    FileOutputStream(input.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
176	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getAbsolutePosition(),  out);  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getAbsolutePosition(),  out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(input.getAbsolutePosition(),  out);	  OutputStream    input    =    new    FileOutputStream(input.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
177	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getCharsOffset());  [CE]  illegal  start  of  type  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getCharsOffset());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(input.getCharsOffset());	  OutputStream    input    =    new    FileOutputStream(input.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
178	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(out!=        null)        {        out.write(       "n       ");        }        if(out!=    null)    {    out.write(   "n       ");    }    if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	79	1	add
179	[BUG]  [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(out!=        null)        {        out.write(       "n       ");        }        if(out!=    null)    {    out.write(   "n       ");    }    if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	79	1	add
180	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   "n     ");  }  if(out  ==  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(out!=        null)        {        out.write(       "n       ");        }        if(out!=    null)    {    out.write(   "n       ");    }    if(out  ==  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	79	1	add
181	[BUG]  [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   "n     ");  }  if(out  ==  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   "n     ");  }  if(out  ==  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(out!=        null)        {        out.write(       "n       ");        }        if(out!=    null)    {    out.write(   "n       ");    }    if(out  ==  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	79	1	add
182	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	24	1	add
183	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	24	1	add
184	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	24	1	add
185	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	24	1	add
186	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	24	1	add
187	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null..   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	24	1	add
188	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.  [CE]  unclosed  string  literal  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.	  	non-compiled	[CE]  unclosed  string  literal	24	None	add
189	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	38	1	add
190	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	38	1	add
191	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	38	1	add
192	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	38	1	add
193	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	38	1	add
194	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	38	1	add
195	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	38	1	add
196	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	38	1	add
197	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	38	1	add
198	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	38	1	add
199	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	123	1	add
200	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	123	1	add
201	[BUG]  [BUGGY]  out.write( "no  input. ");  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "no  input. ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "no  input. ");	  out.write(   "no    input   ");    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
202	[BUG]  [BUGGY]  out.write( "null  input ");  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "null  input ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "null  input ");	  out.write(   "no    input   ");    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
203	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	7	1	add
204	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	7	1	add
205	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	7	1	add
206	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	7	1	add
207	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	1	add
208	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	1	add
209	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	32	1	add
210	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	32	1	add
211	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	32	None	add
212	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	32	1	add
213	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	32	1	add
214	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	32	1	add
215	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	32	1	add
216	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  nu  [CE]  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  nu	  	non-compiled	[CE]  	32	None	add
217	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input!=  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
218	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()!=  0)  {  out.write('n');  return;  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
219	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input    ==    null    ||    input.length()    >=    0)    {    if(input  ==  null  ||  input.length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
220	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input    ==    null    ||    input.length()    >=    0)    {    if(input  ==  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
221	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()  >>  0)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()  >>  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input    ==    null    ||    input.length()    >=    0)    {    if(input  ==  null  ||  input.length()  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
222	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input!=  null  ||  input.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input!=  null  ||  input.length()  >=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input    ==    null    ||    input.length()    >=    0)    {    if(input!=  null  ||  input.length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
223	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	34	1	add
224	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	34	1	add
225	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	34	1	add
226	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	34	1	add
227	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null..   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null..   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	34	1	add
228	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null..   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null..   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null..   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	34	1	add
229	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	34	None	add
230	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null..   ");  }  if(input  ==  nu  [CE]  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null..   ");  }  if(input  ==  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null..   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	34	None	add
231	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   ".n     ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( ".n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(out!=        null)        {        out.write(       "n       ");        }        if(out!=    null)    {    out.write(   ".n       ");    }    if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( ".n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	108	1	add
232	[BUG]  [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   ".n     ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( ".n ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   ".n     ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( ".n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(out!=        null)        {        out.write(       "n       ");        }        if(out!=    null)    {    out.write(   ".n       ");    }    if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( ".n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	108	1	add
233	[BUG]  [BUGGY]  out.write(Character.toChars(input,  pos  +  1));  [CE]  illegal  start  of  type  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Character.toChars(input,  pos  +  1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toChars(input,  pos  +  1));	  out.write(Character.toChars(input,    pos));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
234	[BUG]  [BUGGY]  out.write(Character.toString(input,  pos));  [CE]  illegal  start  of  type  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Character.toString(input,  pos));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toString(input,  pos));	  out.write(Character.toChars(input,    pos));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
235	[BUG]  [BUGGY]  out.write( ".s.IFJDCS "  +  input.getBytes());  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ".s.IFJDCS "  +  input.getBytes());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( ".s.IFJDCS "  +  input.getBytes());	  out.write(   ".s.IFJDCS   ".getBytes());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
236	[BUG]  [BUGGY]  out.write( "/.s.IFJDCS ".getBytes());  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "/.s.IFJDCS ".getBytes());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "/.s.IFJDCS ".getBytes());	  out.write(   ".s.IFJDCS   ".getBytes());    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
237	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(input.getKey(),  out);  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(input.getKey(),  out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().setCurrentName(input.getKey(),  out);	  Thread.currentThread().getContextClassLoader().setCurrentName(input.getKey());    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
238	[BUG]  [BUGGY]  out.write('n',  pos);  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write('n',  pos);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write('n',  pos);	  out.write('n');    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
239	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Throwables.throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  <identifier>  expected	1	None	replace
240	[BUG]  [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    be    null.       ");    }    if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
241	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ",n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( ",n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   ",n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( ",n ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	127	1	add
242	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ",n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( ",n ");  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ",n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( ",n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   ",n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( ",n ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	127	1	add
243	[BUG]  [BUGGY]  [FE]  org.junit.ComparisonFailure:  expected:<[😰]>  but  was:<[  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ",n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( ",n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   ",n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( ",n ");  return;  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[😰]>  but  was:<[  	127	1	add
244	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ",n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( ",n ");  return;  }  [FE]  org.junit.ComparisonFailure:  expected:<[😰]>  but  was:<[  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ",n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( ",n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   ",n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input!=  null)  {  out.write( ",n ");  return;  }	  	compilable	  [FE]  org.junit.ComparisonFailure:  expected:<[😰]>  but  was:<[  	127	1	add
245	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	36	1	add
246	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	36	1	add
247	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  nu  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  nu	  	non-compiled	[CE]  	36	None	add
248	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]        IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  Il  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	36	None	add
249	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	36	1	add
250	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	36	1	add
251	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  nu  [CE]  [FE]            IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  nu	  	non-compiled	[CE]  	36	None	add
252	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	22	None	add
253	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new	  	non-compiled	[CE]  <identifier>  expected	22	None	add
254	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  Il  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	22	None	add
255	[BUG]  [BUGGY]  Thread.currentThread().getContextClass().getName();  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClass().getName();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClass().getName();	  if(out    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
256	[BUG]  [BUGGY]  if(input!=  null)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input!=  null)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }	          int    inputLength    =    input.length();    int    outputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
257	[BUG]  [BUGGY]  char  inputLength  =  input.length();  int  outputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	char  inputLength  =  input.length();  int  outputLength  =  input.length();	          int    inputLength    =    input.length();    int    outputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
258	[BUG]  [BUGGY]  if(input!=  null)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  else  {  out.write(out);  return;  }  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input!=  null)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  else  {  out.write(out);  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input!=  null)  {  int  inputLength  =  input.length();  int  outputLength  =  input.length();  }  else  {  out.write(out);  return;  }	          int    inputLength    =    input.length();    int    outputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
259	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	46	1	add
260	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	46	1	add
261	[BUG]  [BUGGY]  char  inputLength  =  input.length();  Int  int  inputLength  =  input.length();  [CE]  not  a  statement  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char  inputLength  =  input.length();  Int  int  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	char  inputLength  =  input.length();  Int  int  inputLength  =  input.length();	          int    inputLength    =    input.length();    Int    int    inputLength    =    input.length();    	non-compiled	[CE]  not  a  statement	18	None	replace
262	[BUG]  [BUGGY]  char  inputLength  =  input.length();  Integer  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  char  inputLength  =  input.length();  Integer  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	char  inputLength  =  input.length();  Integer  inputLength  =  input.length();	          int    inputLength    =    input.length();    Int    int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
263	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	38	1	add
264	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	38	1	add
265	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	38	1	add
266	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	38	1	add
267	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw	  	non-compiled	[CE]  illegal  start  of  expression	26	None	add
268	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new	  	non-compiled	[CE]  <identifier>  expected	26	None	add
269	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	48	1	add
270	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input!=  null)  {  out.write(     "n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input!=    null)    {    out.write(       "n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input!=  null)  {  out.write( "n   ");  }  if(input!=  null)  {  out.write( "n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	48	1	add
271	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  nu  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  nu	  	non-compiled	[CE]  	9	None	add
272	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	9	None	add
273	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.  [CE]  unclosed  string  literal  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	9	None	add
274	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentSequence(out);  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentSequence(out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().setCurrentSequence(out);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
275	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange(out);  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange(out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().reportCodeChange(out);	  Thread.currentThread().getContextClassLoader().reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
276	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(input,  out));  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(input,  out));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().report(JSError.make(input,  out));	  Thread.currentThread().getContextClassLoader().reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
277	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(input,  pos));  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().report(JSError.make(input,  pos));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().report(JSError.make(input,  pos));	  Thread.currentThread().getContextClassLoader().reportCodeChange();    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
278	[BUG]  [BUGGY]  Thread.currentThread().getContextClass().getName());  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClass().getName());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClass().getName());	  if(out    ==    null)    {    throw    new    IllegalArgumentException(   "   ")+   "The    Writer    must    not    be    null.       ");    }    	non-compiled	[CE]  ';'  expected	99	None	replace
279	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ",n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ",n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	121	1	add
280	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ",n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ",n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ",n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	121	1	add
281	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
282	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(out  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	40	1	add
283	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  input!=  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	if(out  ==  null  ||  input!=  null  ||  input.length()  ==  0)  {	  if(input!=    null    ||    input.length()    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	14	1	replace
284	[BUG]  [BUGGY]  if(out  ==  null  ||  input!=  null  ||  input.length()  ==  0)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null  ||  input!=  null  ||  input.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null  ||  input!=  null  ||  input.length()  ==  0)  {	  if(input!=    null    ||    input.length()    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	14	1	replace
285	[BUG]  [BUGGY]  OutputStream  input  =  output.getOutputStream();  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  output.getOutputStream();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	OutputStream  input  =  output.getOutputStream();	  if(input    ==    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
286	[BUG]  [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine());  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  BufferedOutputStream(out.readLine());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	OutputStream  input  =  new  BufferedOutputStream(out.readLine());	  if(input    ==    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
287	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
288	[BUG]  [BUGGY]  out.write( "no  input  available ");  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "no  input  available ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "no  input  available ");	  out.write(   "no    input   ");    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
289	[BUG]  [BUGGY]  out.write( "no  input  provided ");  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "no  input  provided ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "no  input  provided ");	  out.write(   "no    input   ");    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
290	[BUG]  [BUGGY]  out.write( "no  input  found ");  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "no  input  found ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "no  input  found ");	  out.write(   "no    input   ");    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
291	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  If(input  ==  null  ||  input.length()  >=  0)  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  If(input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input    ==    null    ||    input.length()    >=    0)    {    If(input  ==  null  ||  input.length()  >=  0)  {	  	non-compiled	[CE]  ';'  expected	15	None	add
292	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write( "null ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	if(out!=  null)  {  if(input  ==  null)  {  out.write( "null ");  return;  }	          if(input    ==    null)    {    out.write(       "n       ");    return;    }    if(input    ==    null)    {    out.write(   ".n       ");    return;    }    	compilable	  [FE]  ComparisonFailure  	90	1	replace
293	[BUG]  [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write( "null ");  return;  }  [FE]  ComparisonFailure  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write( "null ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out!=  null)  {  if(input  ==  null)  {  out.write( "null ");  return;  }	          if(input    ==    null)    {    out.write(       "n       ");    return;    }    if(input    ==    null)    {    out.write(   ".n       ");    return;    }    	compilable	  [FE]  ComparisonFailure  	90	1	replace
294	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write( "null ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	if(out!=  null)  {  if(input  ==  null)  {  out.write( "null ");  }	          if(input    ==    null)    {    out.write(       "n       ");    return;    }    if(input    ==    null)    {    out.write(   ".n       ");    return;    }    	compilable	  [FE]  ComparisonFailure  	90	1	replace
295	[BUG]  [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write( "null ");  }  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write( "null ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out!=  null)  {  if(input  ==  null)  {  out.write( "null ");  }	          if(input    ==    null)    {    out.write(       "n       ");    return;    }    if(input    ==    null)    {    out.write(   ".n       ");    return;    }    	compilable	  [FE]  ComparisonFailure  	90	1	replace
296	[BUG]  [BUGGY]  OutputStream  out  =  input.getOutputStream();  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  out  =  input.getOutputStream();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	OutputStream  out  =  input.getOutputStream();	          if(out!=    null)    {    out.write(       "n       ");    }    if(out    >=    null)    {    out.write(   "n       ");    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
297	[BUG]  [BUGGY]  out.write( "no-string ");  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "no-string ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "no-string ");	          if(out!=    null)    {    out.write(       "n       ");    }    if(out    >=    null)    {    out.write(   "n       ");    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
298	[BUG]  [BUGGY]  out.write(Integer.toHexString(input));  [CE]  illegal  start  of  type  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toHexString(input));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Integer.toHexString(input));	  out.write(Integer.toString(input));    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
299	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	34	None	add
300	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  nu  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  if(input  ==  nu	  	non-compiled	[CE]  	34	None	add
301	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	34	1	add
302	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	34	1	add
303	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new	  	non-compiled	[CE]  <identifier>  expected	34	None	add
304	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ".n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   ".n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	89	1	add
305	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ".n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ".n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   ".n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	89	1	add
306	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( "n ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(out!=        null)        {        out.write(       "n       ");        }        if(out!=    null)    {    out.write(   "n       ");    }    if(out!=  null)  {  out.write( "n ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	79	1	add
307	[BUG]  [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( "n ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( "n ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(out!=        null)        {        out.write(       "n       ");        }        if(out!=    null)    {    out.write(   "n       ");    }    if(out!=  null)  {  out.write( "n ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	79	1	add
308	[BUG]  [BUGGY]  int  inputLength  =  input.length();  Int  outputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  inputLength  =  input.length();  Int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	int  inputLength  =  input.length();  Int  outputLength  =  input.length();	          int    inputLength    =    input.length();    Int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
309	[BUG]  [BUGGY]  out.write(input.toCharArray());  [CE]  illegal  start  of  type  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.toCharArray());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(input.toCharArray());	  out.write(input);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
310	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	7	None	add
311	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(null);  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().setContextClassLoader(null);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().setContextClassLoader(null);	  Thread.currentThread().setContextClassLoader(this);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
312	[BUG]  [BUGGY]  n   ");  [CE]  unclosed  string  literal  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  n   ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	n   ");	  Thread.currentThread().getContextClassLoader().append(   ");n   ");    	non-compiled	[CE]  unclosed  string  literal	114	None	replace
313	[BUG]  [BUGGY]  TasksUiUtil.copyCurrentSequence(out);  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  TasksUiUtil.copyCurrentSequence(out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	TasksUiUtil.copyCurrentSequence(out);	  if(out    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
314	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ".n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	119	1	add
315	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ".n       ");    }    if(input  ==  null)  {  out.write( "n ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( ".n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	119	1	add
316	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ".n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	119	1	add
317	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ".n     ");  }  if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ".n       ");    }    if(input  ==  null)  {  out.write( "n   ");  }  if(input  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	119	1	add
318	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ").append(input.toString());  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ".s.IFJDCS ").append(input.toString());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( ".s.IFJDCS ").append(input.toString());	  out.write(   ".s.IFJDCS   ".toString());    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
319	[BUG]  [BUGGY]  if(input  ==  null  ||  output.length()  ==  0)  {  [CE]  cannot  find  symbol  output  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  output.length()  ==  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  output.length()  ==  0)  {	  if(input    ==    null    ||    out.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  output	103	None	replace
320	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ",       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	125	1	add
321	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ",       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	125	1	add
322	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ",       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	125	1	add
323	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ",     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ",       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	125	1	add
324	[BUG]  [BUGGY]  out.write(Character.toChars(Integer.toChars(pos)));  [CE]  illegal  start  of  type  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Character.toChars(Integer.toChars(pos)));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toChars(Integer.toChars(pos)));	  out.write(Character.codePointAt(input,    pos));    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
325	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(in);  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().setContextClassLoader(in);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().setContextClassLoader(in);	  Thread.currentThread().setContextClassLoader(input);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
326	[BUG]  [BUGGY]  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	new  IllegalArgumentException( "The  Writer  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
327	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   ".n     ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(out!=        null)        {        out.write(       "n       ");        }        if(out!=    null)    {    out.write(   ".n       ");    }    if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	108	1	add
328	[BUG]  [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   ".n     ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   ".n     ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(out!=        null)        {        out.write(       "n       ");        }        if(out!=    null)    {    out.write(   ".n       ");    }    if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	108	1	add
329	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().append( ",The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().append( ",The  Writer  must  not  be  null. ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().append( ",The  Writer  must  not  be  null. ");	  Thread.currentThread().getContextClassLoader().append(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	131	None	replace
330	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(input.length()  -  1));  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ".s.IFJDCS ".charAt(input.length()  -  1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( ".s.IFJDCS ".charAt(input.length()  -  1));	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
331	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write( ".null ");  }  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write( ".null ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write( ".null ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
332	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	if(input  ==  null  ||  input.length()  <  0)  {	  if(input    ==    null    ||    input.length()    <    =    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	111	1	replace
333	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  <  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()  <  0)  {	  if(input    ==    null    ||    input.length()    <    =    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	111	1	replace
334	[BUG]  [BUGGY]  out.write(Character.toChars(input,  pos)+  1);  [CE]  illegal  start  of  type  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Character.toChars(input,  pos)+  1);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toChars(input,  pos)+  1);	  out.write(Character.toChars(input,    pos));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
335	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	123	1	add
336	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	123	1	add
337	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	123	1	add
338	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	123	1	add
339	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  nu	  	non-compiled	[CE]  	24	None	add
340	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  nu  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  nu  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  nu	  	non-compiled	[CE]  	24	None	add
341	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.  [CE]  unclosed  string  literal  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.	  	non-compiled	[CE]  unclosed  string  literal	24	None	add
342	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null..   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null..   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  if(input  ==  null)  {  throw  new	  	non-compiled	[CE]  <identifier>  expected	24	None	add
343	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    output.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
344	[BUG]  [BUGGY]  if(out!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    output.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
345	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  output.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  output.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  output.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    output.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
346	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  output.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  output.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null)  {  out.write('n');  return;  }  if(out  ==  null)  {  output.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    output.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
347	[BUG]  [BUGGY]  Thread.currentThread().interrupt(out,  output);  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().interrupt(out,  output);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().interrupt(out,  output);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
348	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ").getBytes());  [CE]  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ".s.IFJDCS ").getBytes());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( ".s.IFJDCS ").getBytes());	  out.write(   ".s.IFJDCS   ".getBytes());    	non-compiled	[CE]  	71	None	replace
349	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ",n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   ",n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	127	1	add
350	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ",n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ",n     ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   ",n       ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	127	1	add
351	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new	  	non-compiled	[CE]  <identifier>  expected	32	None	add
352	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  Il  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	32	None	add
353	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out  ==  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( "n ");  }  if(out  ==  null)  {  out.write( "n   ");  }  if(out  ==  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(out!=        null)        {        out.write(       "n       ");        }        if(out    ==    null)    {    out.write(   "n       ");    }    if(out!=  null)  {  out.write( "n ");  }  if(out  ==  null)  {  out.write( "n   ");  }  if(out  ==  null)  {  out.write( "n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	81	1	add
354	[BUG]  [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out  ==  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( "n ");  }  if(out  ==  null)  {  out.write( "n   ");  }  if(out  ==  null)  {  out.write( "n ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out  ==  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( "n ");  }  if(out  ==  null)  {  out.write( "n   ");  }  if(out  ==  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(out!=        null)        {        out.write(       "n       ");        }        if(out    ==    null)    {    out.write(   "n       ");    }    if(out!=  null)  {  out.write( "n ");  }  if(out  ==  null)  {  out.write( "n   ");  }  if(out  ==  null)  {  out.write( "n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	81	1	add
355	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().process(input);  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().process(input);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().process(input);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
356	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().process(out);  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().process(out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().process(out);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  illegal  start  of  type	113	None	replace
357	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " "));  }	  if(input    ==    null    ||    input.length()    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	104	None	replace
358	[BUG]  [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  output.length();  int  outputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          int    inputLength    =    input.length();    int  outputLength  =  input.length();  int  inputLength  =  output.length();  int  outputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                int        inputLength        =        input.length();        int    outputLength    =    input.length();    int  inputLength  =  output.length();  int  outputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	20	None	add
359	[BUG]  [BUGGY]  Thread.currentThread().intermediateThread().setContextClassLoader(out);  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().intermediateThread().setContextClassLoader(out);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().intermediateThread().setContextClassLoader(out);	  Thread.currentThread().setContextClassLoader(out);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
360	[BUG]  [BUGGY]  out.write(Character.toUpperCase(c));  [CE]  illegal  start  of  type  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Character.toUpperCase(c));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toUpperCase(c));	  out.write(Character.toChars(c));    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
361	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( ".n ");  }  if(out!=  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(out!=        null)        {        out.write(       "n       ");        }        if(out!=    null)    {    out.write(   "n       ");    }    if(out!=  null)  {  out.write( ".n ");  }  if(out!=  null)  {  out.write( "n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	79	1	add
362	[BUG]  [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( ".n ");  }  if(out!=  null)  {  out.write( "n ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( ".n ");  }  if(out!=  null)  {  out.write( "n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(out!=        null)        {        out.write(       "n       ");        }        if(out!=    null)    {    out.write(   "n       ");    }    if(out!=  null)  {  out.write( ".n ");  }  if(out!=  null)  {  out.write( "n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	79	1	add
363	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(input.getValue());  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(input.getValue());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().setCurrentName(input.getValue());	  Thread.currentThread().getContextClassLoader().setCurrentName(input.getKey());    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
364	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ",n     ");  }  if(input  ==  null)  {  out.write( ",n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ",n       ");    }    if(input  ==  null)  {  out.write( ",n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	121	1	add
365	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ",n     ");  }  if(input  ==  null)  {  out.write( ",n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    }    if(input  ==  null)  {  out.write(   ",n     ");  }  if(input  ==  null)  {  out.write( ",n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        }        if(input    ==    null)    {    out.write(   ",n       ");    }    if(input  ==  null)  {  out.write( ",n   ");  }  if(input  ==  null)  {  out.write( ",n ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	121	1	add
366	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write( "null ");  return;  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  out.write( "null ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null)  {  out.write( "null ");  return;  }	          if(input    ==    null)    {    out.write(       "n       ");    return;    }    if(input    ==    null)    {    out.write(   ".n       ");    return;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
367	[BUG]  [BUGGY]  throw  new  IllegalStateException( "The  Writer  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  throw  new  IllegalStateException( "The  Writer  cannot  be  null. ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	throw  new  IllegalStateException( "The  Writer  cannot  be  null. ");	  throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
368	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }	  	compilable	  [FE]  IllegalArgumentException  	36	1	add
369	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }	  	compilable	  [FE]  IllegalArgumentException  	36	1	add
370	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IllegalStateException( " "));  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IllegalStateException( " "));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().report(new  IllegalStateException( " "));	  if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
371	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	  	compilable	  [FE]  IllegalArgumentException  	26	1	add
372	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	  	compilable	  [FE]  IllegalArgumentException  	26	1	add
373	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  input.iterator();  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Iterator  <  Object>  it  =  input.iterator();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Iterator  <  Object>  it  =  input.iterator();	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    not    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
374	[BUG]  [BUGGY]  Iterator  <  Object>  it  =  inputs.iterator();  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Iterator  <  Object>  it  =  inputs.iterator();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Iterator  <  Object>  it  =  inputs.iterator();	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    must    not    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null..   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
375	[BUG]  [BUGGY]  if(out  ==  null)  {  out.write( "null ");  }  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  out.write( "null ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null)  {  out.write( "null ");  }	  if(input    ==    null)    {    out.write(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
376	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
377	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
378	[BUG]  [BUGGY]  throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	throw  new  IllegalStateException( "The  Writer  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
379	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( " ".   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	non-compiled	[CE]  <identifier>  expected	123	None	add
380	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getAbsolutePath()  +  1);  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getAbsolutePath()  +  1);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(input.getAbsolutePath()  +  1);	  OutputStream    input    =    new    FileOutputStream(input.getAbsolutePath());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
381	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	add
382	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	22	1	add
383	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  out.write( "null ");  }  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  out.write( "null ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()  >=  0)  {  out.write( "null ");  }	  if(input    ==    null    ||    input.length()    ==    0)    {    out.write(   "null   ");    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
384	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   "n     ");  return;  }  if(input  ==  null)  {  out.write( "n ".);  return;  }  if(input  ==  null)  {  out.write( "n ");  return;  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   "n     ");  return;  }  if(input  ==  null)  {  out.write( "n ".);  return;  }  if(input  ==  null)  {  out.write( "n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   "n       ");    return;    }    if(input  ==  null)  {  out.write( "n ".);  return;  }  if(input  ==  null)  {  out.write( "n ");  return;  }	  	non-compiled	[CE]  <identifier>  expected	65	None	add
385	[BUG]  [BUGGY]  out.write( "native ");  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "native ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "native ");	          if(input    ==    null)    {    out.write(       "n       ");    }    if(input!=    null)    {    out.write(       "n       ");    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
386	[BUG]  [BUGGY]  out.write(Character.toChars(Character.codePointAt(input,  pos  +  1));  [CE]  ')'  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Character.toChars(Character.codePointAt(input,  pos  +  1));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toChars(Character.codePointAt(input,  pos  +  1));	  out.write(Character.codePointAt(input,    pos));    	non-compiled	[CE]  ')'  expected	105	None	replace
387	[BUG]  [BUGGY]  out.write(Character.toChars(Character.codePointAt(pos,  input));  [CE]  ')'  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Character.toChars(Character.codePointAt(pos,  input));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toChars(Character.codePointAt(pos,  input));	  out.write(Character.codePointAt(input,    pos));    	non-compiled	[CE]  ')'  expected	105	None	replace
388	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write( "[null] ");  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  out.write( "[null] ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null)  {  out.write( "[null] ");  }	          if(input    ==    null)    {    out.write(       "n       ");    }    if(input    ==    null)    {    out.write(   ".n       ");    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
389	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	1	add
390	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    must    not    be    null.     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        must        not        be        null.       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	1	add
391	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write( "null ");  return;  }  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write( "null ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write( "null ");  return;  }	  if(input    ==    null)    {    out.write(   "null   ");    return;    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
392	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()  <  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  if(input  ==  null  ||  input.length()  <  0)  {  [BUGGY]      return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input    ==    null    ||    input.length()    >=    0)    {    if(input  ==  null  ||  input.length()  <  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
393	[BUG]  [BUGGY]  out.write(Integer.toHexString(pos));  [CE]  illegal  start  of  type  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(Integer.toHexString(pos));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Integer.toHexString(pos));	  out.write(Character.toChars(input));    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
394	[BUG]  [BUGGY]  int  inputLength  =  input.length();  char[]  inputLength  =  input.getChars(inputLength);  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  int  inputLength  =  input.length();  char[]  inputLength  =  input.getChars(inputLength);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	int  inputLength  =  input.length();  char[]  inputLength  =  input.getChars(inputLength);	          int    inputLength    =    input.length();    char[]    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
395	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ".n     ");  return;  }  if(input  ==  null)  {  out.write( "n ".);  return;  }  if(input  ==  null)  {  out.write( ".n ");  return;  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input  ==  null)  {  out.write(   ".n     ");  return;  }  if(input  ==  null)  {  out.write( "n ".);  return;  }  if(input  ==  null)  {  out.write( ".n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input    ==    null)    {    out.write(   ".n       ");    return;    }    if(input  ==  null)  {  out.write( "n ".);  return;  }  if(input  ==  null)  {  out.write( ".n ");  return;  }	  	non-compiled	[CE]  <identifier>  expected	89	None	add
396	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out  ==  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( ".n ");  }  if(out  ==  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(out!=        null)        {        out.write(       "n       ");        }        if(out    ==    null)    {    out.write(   "n       ");    }    if(out!=  null)  {  out.write( ".n ");  }  if(out  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	81	1	add
397	[BUG]  [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out  ==  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( ".n ");  }  if(out  ==  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out  ==  null)  {  out.write(   "n     ");  }  if(out!=  null)  {  out.write( ".n ");  }  if(out  ==  null)  {  out.write( "n   ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(out!=        null)        {        out.write(       "n       ");        }        if(out    ==    null)    {    out.write(   "n       ");    }    if(out!=  null)  {  out.write( ".n ");  }  if(out  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	81	1	add
398	[BUG]  [BUGGY]  out.write(input.getBytes());  [CE]  illegal  start  of  type  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write(input.getBytes());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(input.getBytes());	  out.write(input);    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
399	[BUG]  [BUGGY]  IntInteger  inputLength  =  input.length();  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  IntInteger  inputLength  =  input.length();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	IntInteger  inputLength  =  input.length();	          int    inputLength    =    input.length();    Int    int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
400	[BUG]  [BUGGY]  Thread.currentThread().intermediateThread().setContextClassLoader(input);  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().intermediateThread().setContextClassLoader(input);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().intermediateThread().setContextClassLoader(input);	  Thread.currentThread().setContextClassLoader(input);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
401	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input!=  null)  {  out.write(   "n     ");  return;  }  if(input  ==  null)  {  out.write( "n ".);  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write(     "n     ");    return;    }    if(input!=  null)  {  out.write(   "n     ");  return;  }  if(input  ==  null)  {  out.write( "n ".);  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write(       "n       ");        return;        }        if(input!=    null)    {    out.write(   "n       ");    return;    }    if(input  ==  null)  {  out.write( "n ".);  return;  }  if(input!=  null)  {  out.write( "n ");  return;  }	  	non-compiled	[CE]  <identifier>  expected	67	None	add
402	[BUG]  [BUGGY]  if(c  ==  null)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(c  ==  null)  {  out.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(c  ==  null)  {  out.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
403	[BUG]  [BUGGY]  if(input  ==  null)  {  input.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  input.write('n');  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null)  {  input.write('n');  return;  }	          if(input    ==    null)    {    out.write('n');    return;    }    if(input    ==    null)    {    output.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
404	[BUG]  [BUGGY]  out.append('n');  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.append('n');  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.append('n');	  out.write('n');    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
405	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IOException( " "));  [CE]  illegal  start  of  type  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().report(new  IOException( " "));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().report(new  IOException( " "));	  if(out    ==    null)    {    throw    new    IllegalArgumentException(   "   ")+   "The    Writer    must    not    be    null.       ");    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
406	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(out.getKey(),  out.getChars());  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(out.getKey(),  out.getChars());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().setCurrentName(out.getKey(),  out.getChars());	  Thread.currentThread().getContextClassLoader().setCurrentName(out.getKey());    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
407	[BUG]  [BUGGY]  aughtException( "The  Writer  must  be  null. ");  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  aughtException( "The  Writer  must  be  null. ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	aughtException( "The  Writer  must  be  null. ");	  if(out    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
408	[BUG]  [BUGGY]  throw  new  IllegalStateException( "The  Writer  must  be  null. ");  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  throw  new  IllegalStateException( "The  Writer  must  be  null. ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	throw  new  IllegalStateException( "The  Writer  must  be  null. ");	  throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
409	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
410	[BUG]  [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        out.write('n');        return;        }        if(input!=    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
411	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().append( "; ");  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader().append( "; ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().append( "; ");	  Thread.currentThread().getContextClassLoader().append(   ");n   ");    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
412	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   ".n     ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( ". ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(out!=        null)        {        out.write(       "n       ");        }        if(out!=    null)    {    out.write(   ".n       ");    }    if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( ". ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	108	1	add
413	[BUG]  [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   ".n     ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( ". ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(out!=    null)    {    out.write(     "n     ");    }    if(out!=  null)  {  out.write(   ".n     ");  }  if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( ". ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(out!=        null)        {        out.write(       "n       ");        }        if(out!=    null)    {    out.write(   ".n       ");    }    if(out!=  null)  {  out.write( "n   ");  }  if(out!=  null)  {  out.write( ". ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	108	1	add
414	[BUG]  [BUGGY]  aughtException( "The  Writer  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  aughtException( "The  Writer  cannot  be  null. ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	aughtException( "The  Writer  cannot  be  null. ");	  if(out    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
415	[BUG]  [BUGGY]  Thread.currentThread().intermediateThread().setContextClassLoader(this);  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().intermediateThread().setContextClassLoader(this);  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().intermediateThread().setContextClassLoader(this);	  Thread.currentThread().setContextClassLoader(this);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
416	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader();  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  Thread.currentThread().getContextClassLoader();  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader();	  Thread.currentThread().setContextClassLoader(this);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
417	[BUG]  [BUGGY]  out.write( "no  input: ");  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( "no  input: ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "no  input: ");	  out.write(   "no    input   ");    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
418	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	52	1	add
419	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	52	1	add
420	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	52	1	add
421	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(input!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	52	1	add
422	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write( ", ");  return;  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(input  ==  null)  {  out.write( ", ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null)  {  out.write( ", ");  return;  }	          if(input    ==    null)    {    out.write(       "n       ");    return;    }    if(input    ==    null)    {    out.write(   ",n       ");    return;    }    	non-compiled	[CE]  illegal  start  of  type	128	None	replace
423	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write( ", ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	if(out!=  null)  {  if(input  ==  null)  {  out.write( ", ");  return;  }	          if(input    ==    null)    {    out.write(       "n       ");    return;    }    if(input    ==    null)    {    out.write(   ",n       ");    return;    }    	compilable	  [FE]  ComparisonFailure  	128	1	replace
424	[BUG]  [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write( ", ");  return;  }  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out!=  null)  {  if(input  ==  null)  {  out.write( ", ");  return;  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out!=  null)  {  if(input  ==  null)  {  out.write( ", ");  return;  }	          if(input    ==    null)    {    out.write(       "n       ");    return;    }    if(input    ==    null)    {    out.write(   ",n       ");    return;    }    	compilable	  [FE]  ComparisonFailure  	128	1	replace
425	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getPosition());  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getPosition());  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(input.getPosition());	  OutputStream    input    =    new    FileOutputStream(input.getAbsolutePosition());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
426	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null. ".);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null. ".);  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null. ".);  }	          if(input    ==    null)    {    throw    new    IllegalArgumentException(       "The    Writer    cannot    be    null.       ");    }    if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
427	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	32	1	add
428	[BUG]  [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]          if(input    ==    null)    {    throw    new    IllegalArgumentException(     "The    Writer    cannot    be    null.     ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.     ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	                if(input        ==        null)        {        throw        new        IllegalArgumentException(       "The        Writer        cannot        be        null.       ");        }        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.       ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	32	1	add
429	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".charAt(0));  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  out.write( ".s.IFJDCS ".charAt(0));  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( ".s.IFJDCS ".charAt(0));	  out.write(   "null   ");    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
430	[BUG]  [BUGGY]  aughtException( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(     "The  Writer  must  not  be  null     ");  }      [BUGGY]  aughtException( "The  Writer  must  not  be  null. ");  [BUGGY]      if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	aughtException( "The  Writer  must  not  be  null. ");	  if(out    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null   ");    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
