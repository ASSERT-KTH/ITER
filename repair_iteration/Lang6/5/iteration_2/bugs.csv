bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().setContextClassLoader(this);	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().interrupt();	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(out);  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  Thread.currentThread().setContextClassLoader(out);  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().setContextClassLoader(out);	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(input);  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  Thread.currentThread().setContextClassLoader(input);  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().setContextClassLoader(input);	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ")    +   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
6	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	throw  new  IllegalArgumentException( " ");	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ")    +   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
7	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	1	add
8	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	1	add
9	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	1	add
10	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	1	add
11	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	1	1	add
12	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	1	1	add
13	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	if(input!=  null  ||  input.length()  ==  0)  {	  if(input    ==    null    ||    input.length()    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	12	1	replace
14	[BUG]  [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  [FE]  ComparisonFailure  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input!=  null  ||  input.length()  ==  0)  {	  if(input    ==    null    ||    input.length()    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	12	1	replace
15	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	if(input  ==  null  ||  input.length()  >=  0)  {	  if(input    ==    null    ||    input.length()    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	12	1	replace
16	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()  >=  0)  {	  if(input    ==    null    ||    input.length()    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	12	1	replace
17	[BUG]  [BUGGY]      int  inputLength  =  input.length();  int  inputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      int  inputLength  =  input.length();  int  inputLength  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        int    inputLength    =    input.length();    int  inputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	5	None	add
18	[BUG]  [BUGGY]      int  inputLength  =  input.length();  Int  int  inputLength  =  input.length();  [CE]  not  a  statement  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      int  inputLength  =  input.length();  Int  int  inputLength  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        int    inputLength    =    input.length();    Int  int  inputLength  =  input.length();	  	non-compiled	[CE]  not  a  statement	5	None	add
19	[BUG]  [BUGGY]      int  inputLength  =  input.length();  char[]  inputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      int  inputLength  =  input.length();  char[]  inputLength  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        int    inputLength    =    input.length();    char[]  inputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	5	None	add
20	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      int  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        int    inputLength    =    input.length();    int  outputLength  =  input.length();	  	compilable	  [FE]  StringIndexOutOfBoundsException  	5	1	add
21	[BUG]  [BUGGY]      int  inputLength  =  input.length();  int  outputLength  =  input.length();  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      int  inputLength  =  input.length();  int  outputLength  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        int    inputLength    =    input.length();    int  outputLength  =  input.length();	  	compilable	  [FE]  StringIndexOutOfBoundsException  	5	1	add
22	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	7	1	add
23	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	7	1	add
24	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	7	1	add
25	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	7	1	add
26	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	1	add
27	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	1	add
28	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input    ==    null    ||    input.length()!=    0)    {    if(input  ==  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
29	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input  ==  null  ||  input.length()  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input  ==  null  ||  input.length()  >=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input    ==    null    ||    input.length()!=    0)    {    if(input  ==  null  ||  input.length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
30	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input!=  null  ||  input.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input!=  null  ||  input.length()!=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input    ==    null    ||    input.length()!=    0)    {    if(input!=  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
31	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  If(input  ==  null  ||  input.length()!=  0)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  If(input  ==  null  ||  input.length()!=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input    ==    null    ||    input.length()!=    0)    {    If(input  ==  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
32	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	1	add
33	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	1	add
34	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	1	add
35	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.. ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	1	add
36	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.   ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	9	1	add
37	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  cannot  be  null.   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.   ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	9	1	add
38	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	13	1	add
39	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	13	1	add
40	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	13	1	add
41	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    if(input!=  null)  {  out.write('n');  return;  }	  	compilable	  [FE]  ComparisonFailure  	13	1	add
42	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  If(input  ==  null)  {  out.write('n');  return;  }  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  If(input  ==  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    If(input  ==  null)  {  out.write('n');  return;  }	  	non-compiled	[CE]  ';'  expected	13	None	add
43	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  >=  null)  {  out.write('n');  return;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  >=  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    if(input  >=  null)  {  out.write('n');  return;  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	13	None	add
44	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null. ");  }	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write(   "n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input  ==  null)  {  out.write(   "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	17	1	add
47	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write(   "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write(   "n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input  ==  null)  {  out.write(   "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	17	1	add
48	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input!=  null)  {  out.write(   "n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input!=  null)  {  out.write(   "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	17	1	add
49	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input!=  null)  {  out.write(   "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input!=  null)  {  out.write(   "n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input!=  null)  {  out.write(   "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	17	1	add
50	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	1	add
51	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	1	add
52	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	3	1	add
53	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(input!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	3	1	add
54	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null. ");  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null. ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null. ");  }	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
55	[BUG]  [BUGGY]  int  inputLength  =  input.length()  -  1;  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  int  inputLength  =  input.length()  -  1;  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	int  inputLength  =  input.length()  -  1;	      int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  int  inputLength  =  input.length()  +  1;  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  int  inputLength  =  input.length()  +  1;  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	int  inputLength  =  input.length()  +  1;	      int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  int  inputLength  =  input.length()  -  2;  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  int  inputLength  =  input.length()  -  2;  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	int  inputLength  =  input.length()  -  2;	      int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  out.write( "null ");  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write( "null ");  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "null ");	      if(input    ==    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
59	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write( "null ");  }  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null)  {  out.write( "null ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null)  {  out.write( "null ");  }	      if(input    ==    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
60	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getAbsolutePosition());  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getAbsolutePosition());  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(input.getAbsolutePosition());	      if(input    ==    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
61	[BUG]  [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getAbsolutePath());  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  OutputStream  input  =  new  FileOutputStream(input.getAbsolutePath());  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	OutputStream  input  =  new  FileOutputStream(input.getAbsolutePath());	      if(input    ==    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
62	[BUG]  [BUGGY]  out.write(Character.toChars(input));  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write(Character.toChars(input));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toChars(input));	      out.write(c);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
63	[BUG]  [BUGGY]  out.write(Character.toChars(input,  pos));  [CE]  illegal  start  of  type  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write(Character.toChars(input,  pos));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toChars(input,  pos));	      out.write(c);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
64	[BUG]  [BUGGY]  out.write(Character.toChars(c));  [CE]  illegal  start  of  type  [FE]                    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write(Character.toChars(c));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.toChars(c));	      out.write(c);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
65	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    out.write(   "n   ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	1	add
66	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  return;  }  if(input  ==  null)  {  out.write( "n   ");  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    out.write(   "n   ");    return;    }    if(input  ==  null)  {  out.write( "n   ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	1	add
67	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  return;  }  if(input!=  null)  {  out.write( "n   ");  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    out.write(   "n   ");    return;    }    if(input!=  null)  {  out.write( "n   ");  return;  }	  	compilable	  [FE]  ComparisonFailure  	15	1	add
68	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  return;  }  if(input!=  null)  {  out.write( "n   ");  return;  }  [FE]  ComparisonFailure  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  return;  }  if(input!=  null)  {  out.write( "n   ");  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    out.write(   "n   ");    return;    }    if(input!=  null)  {  out.write( "n   ");  return;  }	  	compilable	  [FE]  ComparisonFailure  	15	1	add
69	[BUG]  [BUGGY]  out.write( "n ");  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write( "n ");  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "n ");	      if(out!=    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
70	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".toString());  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write( ".s.IFJDCS ".toString());  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( ".s.IFJDCS ".toString());	      if(out!=    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
71	[BUG]  [BUGGY]  out.write( ".s.IFJDCS ".getBytes());  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write( ".s.IFJDCS ".getBytes());  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( ".s.IFJDCS ".getBytes());	      if(out!=    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
72	[BUG]  [BUGGY]  out.write( "null ");  return;  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write( "null ");  return;  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "null ");  return;	      if(input    ==    null)    {    out.write(   "n   ");    return;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
73	[BUG]  [BUGGY]  if(input  ==  null)  {  out.write( "null ");  return;  }  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null)  {  out.write( "null ");  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null)  {  out.write( "null ");  return;  }	      if(input    ==    null)    {    out.write(   "n   ");    return;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
74	[BUG]  [BUGGY]  if(input!=  null)  {  out.write( "null ");  return;  }  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input!=  null)  {  out.write( "null ");  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input!=  null)  {  out.write( "null ");  return;  }	      if(input    ==    null)    {    out.write(   "n   ");    return;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
75	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  if(input  ==  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  if(input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input    ==    null    ||    input.length()    ==    0)    {    if(input  ==  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
76	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  if(input!=  null  ||  input.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  if(input!=  null  ||  input.length()  ==  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input    ==    null    ||    input.length()    ==    0)    {    if(input!=  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
77	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  if(input  ==  null  ||  input.length()!=  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input    ==    null    ||    input.length()    ==    0)    {    if(input  ==  null  ||  input.length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
78	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  If(input  ==  null  ||  input.length()  ==  0)  {  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  If(input  ==  null  ||  input.length()  ==  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input    ==    null    ||    input.length()    ==    0)    {    If(input  ==  null  ||  input.length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	11	None	add
79	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(out!=  null)  {  out.write(   "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(out!=    null)    {    out.write(   "n   ");    }    if(out!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	19	1	add
80	[BUG]  [BUGGY]      if(out!=  null)  {  out.write(   "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(out!=  null)  {  out.write(   "n   ");  }  if(out!=  null)  {  out.write( "n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(out!=    null)    {    out.write(   "n   ");    }    if(out!=  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	19	1	add
81	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(out!=  null)  {  out.write(   "n   ");  }  if(out  ==  null)  {  out.write( "n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(out!=    null)    {    out.write(   "n   ");    }    if(out  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	19	1	add
82	[BUG]  [BUGGY]      if(out!=  null)  {  out.write(   "n   ");  }  if(out  ==  null)  {  out.write( "n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(out!=  null)  {  out.write(   "n   ");  }  if(out  ==  null)  {  out.write( "n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(out!=    null)    {    out.write(   "n   ");    }    if(out  ==  null)  {  out.write( "n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	19	1	add
83	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
84	[BUG]  [BUGGY]  out.write('n');  return;  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write('n');  return;  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write('n');  return;	      if(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
85	[BUG]  [BUGGY]  if(input!=  null)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input!=  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input!=  null)  {  out.write('n');  return;  }	      if(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
86	[BUG]  [BUGGY]  out.write('n');  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write('n');  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write('n');	      if(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
87	[BUG]  [BUGGY]  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
88	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  not  be  null ");  }	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
89	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  return;  }  if(input  ==  null)  {  out.write( ".n   ");  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    out.write(   "n   ");    return;    }    if(input  ==  null)  {  out.write( ".n   ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	1	add
90	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  return;  }  if(input  ==  null)  {  out.write( ".n   ");  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  return;  }  if(input  ==  null)  {  out.write( ".n   ");  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    out.write(   "n   ");    return;    }    if(input  ==  null)  {  out.write( ".n   ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	1	add
91	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  out.write('n');  return;  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  out.write('n');  return;	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
92	[BUG]  [BUGGY]  if(out!=  null)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(out!=  null)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out!=  null)  {  out.write('n');  return;  }	      if(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
93	[BUG]  [BUGGY]  out.write(input);  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write(input);  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(input);	      out.write(c);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
94	[BUG]  [BUGGY]  out.write(Integer.toString(pos));  [CE]  illegal  start  of  type  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write(Integer.toString(pos));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Integer.toString(pos));	      out.write(c);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
95	[BUG]  [BUGGY]  out.write(Integer.toString(input));  [CE]  illegal  start  of  type  [FE]                    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write(Integer.toString(input));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Integer.toString(input));	      out.write(c);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
96	[BUG]  [BUGGY]      if(out!=  null)  {  out.write(   "n   ");  }  if(out  >=  null)  {  out.write( "n   ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(out!=  null)  {  out.write(   "n   ");  }  if(out  >=  null)  {  out.write( "n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(out!=    null)    {    out.write(   "n   ");    }    if(out  >=  null)  {  out.write( "n   ");  }	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  	19	None	add
97	[BUG]  [BUGGY]      int  inputLength  =  input.length();  Integer  inputLength  =  input.length();  [CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      int  inputLength  =  input.length();  Integer  inputLength  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        int    inputLength    =    input.length();    Integer  inputLength  =  input.length();	  	non-compiled	[CE]  variable  inputLength  is  already  defined  in  method  translate(CharSequence,Writer)	5	None	add
98	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ")    +   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
99	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( " ")+ "The  Writer  must  not  be  null.   ");  }  [CE]  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( " ")+ "The  Writer  must  not  be  null.   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( " ")+ "The  Writer  must  not  be  null.   ");  }	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ")    +   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  	22	None	replace
100	[BUG]  [BUGGY]  out.write( "no  input ");  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write( "no  input ");  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write( "no  input ");	      if(input    ==    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
101	[BUG]  [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out  ==  null)  {  throw  new  IllegalArgumentException( "The  Writer  must  be  null. ");  }	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
102	[BUG]  [BUGGY]  int  inputLength  =  input.length()  +  out.length();  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  int  inputLength  =  input.length()  +  out.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	int  inputLength  =  input.length()  +  out.length();	      int    inputLength    =    input.length();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
103	[BUG]  [BUGGY]  if(input  ==  null  ||  out.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  out.length()  ==  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  out.length()  ==  0)  {	  if(input    ==    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
104	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
105	[BUG]  [BUGGY]  out.write(Character.codePointAt(input,  pos));  [CE]  illegal  start  of  type  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  out.write(Character.codePointAt(input,  pos));  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	out.write(Character.codePointAt(input,  pos));	      out.write(c);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
106	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }  [CE]  cannot  find  symbol  output  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write('n');  return;  }  if(input  ==  null)  {  output.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    out.write('n');    return;    }    if(input  ==  null)  {  output.write('n');  return;  }	  	non-compiled	[CE]  cannot  find  symbol  output	13	None	add
107	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input  ==  null  ||  input.length()  >>  0)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()!=  0)  {  if(input  ==  null  ||  input.length()  >>  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input    ==    null    ||    input.length()!=    0)    {    if(input  ==  null  ||  input.length()  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
108	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(out!=  null)  {  out.write(   "n   ");  }  if(out!=  null)  {  out.write( ".n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(out!=    null)    {    out.write(   "n   ");    }    if(out!=  null)  {  out.write( ".n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	19	1	add
109	[BUG]  [BUGGY]      if(out!=  null)  {  out.write(   "n   ");  }  if(out!=  null)  {  out.write( ".n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(out!=  null)  {  out.write(   "n   ");  }  if(out!=  null)  {  out.write( ".n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(out!=    null)    {    out.write(   "n   ");    }    if(out!=  null)  {  out.write( ".n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	19	1	add
110	[BUG]  [BUGGY]  if(out!=  null)  {  out.write( "null ");  return;  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(out!=  null)  {  out.write( "null ");  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out!=  null)  {  out.write( "null ");  return;  }	      if(input    ==    null)    {    out.write(   "n   ");    return;    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
111	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  <  =  0)  {  [BUGGY]    return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()  <  =  0)  {	  if(input    ==    null    ||    input.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
112	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange();  [CE]  illegal  start  of  type  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  Thread.currentThread().getContextClassLoader().reportCodeChange();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().reportCodeChange();	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ")    +   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
113	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [CE]  illegal  start  of  type  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().reset();	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ")    +   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
114	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().append( ");n ");  [CE]  illegal  start  of  type  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  Thread.currentThread().getContextClassLoader().append( ");n ");  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().append( ");n ");	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ")    +   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
115	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null. ");  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  throw  new  IllegalArgumentException( "The  Writer  cannot  be  null. ");  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	throw  new  IllegalArgumentException( "The  Writer  cannot  be  null. ");	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    cannot    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
116	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write( "null ");  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write( "null ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write( "null ");  }	      if(input    ==    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
117	[BUG]  [BUGGY]      int  inputLength  =  input.length();  Int  inputLength  =  input.length();  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      int  inputLength  =  input.length();  Int  inputLength  =  input.length();  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        int    inputLength    =    input.length();    Int  inputLength  =  input.length();	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
118	[BUG]  [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(input  ==  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(input  ==  null  ||  input.length()  ==  0)  {  out.write('n');  return;  }	      if(input    ==    null)    {    out.write('n');    return;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
119	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write( ".n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input  ==  null)  {  out.write( ".n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	17	1	add
120	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write( ".n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write( ".n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input  ==  null)  {  out.write( ".n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	17	1	add
121	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write( ",n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input  ==  null)  {  out.write( ",n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	17	1	add
122	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write( ",n   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  }  if(input  ==  null)  {  out.write( ",n   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    out.write(   "n   ");    }    if(input  ==  null)  {  out.write( ",n   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	17	1	add
123	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	1	add
124	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	1	add
125	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ",   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( ",   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	1	add
126	[BUG]  [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ",   ");  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(input  ==  null)  {  throw  new  IllegalArgumentException( ",   ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(input  ==  null)  {  throw  new  IllegalArgumentException( ",   ");  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	1	add
127	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  return;  }  if(input  ==  null)  {  out.write( ",n   ");  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	add	        if(input    ==    null)    {    out.write(   "n   ");    return;    }    if(input  ==  null)  {  out.write( ",n   ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	1	add
128	[BUG]  [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  return;  }  if(input  ==  null)  {  out.write( ",n   ");  return;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]      if(input  ==  null)  {  out.write(   "n   ");  return;  }  if(input  ==  null)  {  out.write( ",n   ");  return;  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	        if(input    ==    null)    {    out.write(   "n   ");    return;    }    if(input  ==  null)  {  out.write( ",n   ");  return;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	1	add
129	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(input.getKey());  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(input.getKey());  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().setCurrentName(input.getKey());	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
130	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(out.getKey());  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  Thread.currentThread().getContextClassLoader().setCurrentName(out.getKey());  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().setCurrentName(out.getKey());	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
131	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().append( "The  Writer  must  not  be  null. ");  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  Thread.currentThread().getContextClassLoader().append( "The  Writer  must  not  be  null. ");  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	Thread.currentThread().getContextClassLoader().append( "The  Writer  must  not  be  null. ");	      if(input    ==    null)    {    throw    new    IllegalArgumentException(   "The    Writer    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
132	[BUG]  [BUGGY]  if(out!=  null)  {  out.write( "null ");  }  [CE]  illegal  start  of  type  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(out!=  null)  {  out.write( "null ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out!=  null)  {  out.write( "null ");  }	      if(out!=    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
133	[BUG]  [BUGGY]  if(out!=  null)  {  out.write( ", ");  }  [CE]  illegal  start  of  type  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    public  final  void  translate(CharSequence  input,  Writer  out)  throws  IOException  {  if  (out  ==  null)  {  throw  new  IllegalArgumentException(   "The  Writer  must  not  be  null   ");  }    [BUGGY]  if(out!=  null)  {  out.write( ", ");  }  [BUGGY]    if  (input  ==  null)  {  return;  }  int  pos  =  0;  int  len  =  input.length();  while  (pos  <  len)  {  int  consumed  =  translate(input,  pos,  out);  if  (consumed  ==  0)  {  char[]  c  =  Character.toChars(Character.codePointAt(input,  pos));  out.write(c);  pos+=  c.length;  [CLASS]  CharSequenceTranslator  [METHOD]  translate  [RETURN_TYPE]  void  CharSequence  input  Writer  out  [VARIABLES]  boolean  CharSequence  input  Writer  out  int  consumed  len  pos  pt  char[]  c  	projects/Lang6/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java	1.0	79	79	1	replace	if(out!=  null)  {  out.write( ", ");  }	      if(out!=    null)    {    out.write(   "n   ");    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
